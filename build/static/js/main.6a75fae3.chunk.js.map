{"version":3,"sources":["Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/ChatStepTypes.ts","Components/Generic/Header/HeaderTitle/HeaderTitle.tsx","Components/Generic/Header/HeaderMenu/MenuLink/MenuLink.tsx","Components/Generic/Header/HeaderMenu/NavLinks.ts","Components/Generic/Header/HeaderMenu/HeaderMenu.tsx","Components/Generic/Header/Header.tsx","Components/HomeComponents/HomeDetail/HomeDetail.tsx","Pages/HomePage.tsx","Pages/AboutPage.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/services/ChatbotCommunicator.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/OptionSelector/OptionSelector.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/RearChildrenOptionSelector/RearChildrenOptionSelector.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/UndividedEstateWidget/UndividedEstateWidget.tsx","Components/InheritanceCalculatorComponents/OtherComponent/ChatHeader/ChatHeader.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/ParentChildSelector.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Classes/NodeEntity.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Generics.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/ValidationType.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Config.js","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/BinaryAnswerTypes.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/ChatbotValidation.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/MessageParser.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/ShowInfoWidget/ShowInfoWidget.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/QuestionConstants.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/InheritanceConstants.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Classes/Person.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Classes/Family.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/HandleCurrency.tsx","Components/InheritanceCalculatorComponents/Reports/ReportUtils.ts","Components/InheritanceCalculatorComponents/Reports/InheritanceCalculation.ts","Components/InheritanceCalculatorComponents/Reports/PDF/styles.jsx","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/ProcessDataForChart.tsx","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/CustomNode.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/genealogy/Genealogy.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/summary/Summary.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/survivingPartner/SurvivingPartner.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/firstSection/FirstSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/secondSection/SecondSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/thirdSection/ThirdSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/generalReservations/GeneralReservations.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/nationalInsurance/NationalInsurance.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/FourthSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/text-styles/Bold.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/introSection/IntroductionPage.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/introSection/IntroductionUtils.ts","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/Footer.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/Header.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/FinalDocument.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProvider.tsx","store/chartSelector.js","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/Classes/ChartNode.ts","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/Classes/ChartConnector.ts","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/Classes/Bubble.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/services/ComponentCommunicatorService.tsx","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/ChartComponent.tsx","assets/images/chat_button_logo.svg","Pages/InheritanceCalculatorPage.js","Components/Generic/Footer/Footer.tsx","Pages/ResourcesPage.tsx","store/genericReducer.js","store/store.js","App.tsx","index.tsx"],"names":["ChatStepTypes","QuestionType","useStyles","makeStyles","root","fontFamily","color","HeaderTitle","classes","Typography","variant","className","noWrap","fontSize","padding","textDecoration","textAlign","backgroundColor","fontWeight","rootActive","MenuLink","props","to","href","exact","activeClassName","name","navLinks","id","title","path","HeaderMenu","Grid","container","direction","justifyContent","alignItems","NavLinks","map","item","header","height","paddingLeft","drawerContainer","menuIconRoot","Header","useState","mobileView","drawerOpen","state","setState","useEffect","setResponsiveness","window","innerWidth","prevState","addEventListener","AppBar","Toolbar","IconButton","edge","onClick","size","Drawer","anchor","open","onClose","Link","component","RouterLink","style","key","MenuItem","sm","highLightText","HomeDetail","Box","align","typeSpeed","strings","HomePage","AboutPage","inSubject","Subject","outSubject","internalSubscriptionList","Array","externalSubscriptionList","previousStates","messageService","message","next","asObservable","subscription","push","data","stateCopy","_","cloneDeep","filter","previousState","Object","entries","length","pop","reverseCount","forEach","unsubscribe","handleOptions","option","actionProvider","hideWarning","curStep","stepID","yesNoClickedFlag","testatorStep","handleUndividedEstateChoice","undividedEstateStep","successor_flag","part2","handleChildAliveOption","parent_flag","handleParentAliveOption","part3","handleSecondParentExists","underAgeStep","handleUnderAge","spouseChoice","handleSpouseChoice","cohabitantChoice","handleCohabitantChoice","successorStep","parentsStep","marriedParentsStep","handleMarriedParents","grandParentStep","finalStep","handleFinalQuestion","console","log","warningDiv","document","getElementById","display","OptionSelector","setOption","e","InfoMessagesWidget","PropTypes","string","label","sx","RearChildrenOptionSelector","a","rearChildren","handleRearChildrenOptionWidget","UndividedEstateWidget","handleOwnershipResponse","onClickHandler","thisButton","target","currentParent","parentElement","hasChildNodes","values","childNodes","childEl","pointerEvents","disabled","background","ChatHeader","setOpen","handleCloseNo","restartBot","resetChatbot","flexGrow","position","Button","RestartAlt","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","ParentChildSelector","NodeEntity","level","_id","_level","_path","_parents","_children","_spouse","_cohabitant","_undividedEstateSpouse","_relationshipMap","_childCount","_processChildNodePos","_getRelationshipMap","Map","add_child","child","add_for_both","children_array","child_id","find","obj","getLevel","add_parent","parent","parents_array","parent_id","grandParent","getLatestPathKey","Error","x","setPathforPartner","partnerSelector","partner","has_surviving_spouse","has_surviving_cohabitant","this","prevPath","nodeMap","currId","currNode","getNode","includes","parentCount","i","node","get","undefined","ValidationType","DefaultWarningMessage","ChatbotState","initalStep","person","testator","caseName","netWealth","initialQuestion","temp_person","temp_child","temp_parent","personsMap","deceasedParentsArray","grandParent_flag","rearChildrenResponse","undividedEstate","undividedEstateChoice","undivided_flag","totalEstateValue","undividedEstateSeparateWealth","temp_first","temp_last","tempMessages","successorProcessArray","isUndividedParent","InitialChatbotState","messages","cache","createIntlCache","value","createIntl","locale","Norsk","formatMessage","config","botName","lang","customStyles","botMessageBox","chatButton","initialMessages","createChatBotMessage","customComponents","widgets","widgetName","widgetFunc","BinaryAnswerTypeYes","BinaryAnswerTypeNo","ChatbotValidation","chatbotState","validate","validationTypes","warningMessage","validationType","getDefaultWarningMessage","validationResult","emptyValue","validateEmpty","invalidAmount","validateAmount","onlyDigit","validateDigit","incorrectValueForBoolean","validateValueForBoolean","error","showWarning","messageCopy","handleValidation","test","innerHTML","emptyValueMessage","MessageParser","chatbotValidator","disableButtons","buttonElements","getElementsByClassName","currentElement","setRevertListeners","subscribe","revertState","lastState","flagSwitch","curState","part1","handleSuccessorInput","handleSuccessorCount","trim","handleTestator","toLowerCase","alert","handleTotalEstateValueResponse","handleDelvisFirstResponse","part4","handleDelvisSecondResponse","part5","handleFulltSaereieResponse","part6","handleParentsInput","handleUndividedEstateSpouse","handleNetWealth","netWealthStep","spouseStep","handleSpouseInput","cohabitantStep","handleCohabitantInput","theme","popover","paper","useTheme","spacing","ShowInfoWidget","anchorEl","setAnchorEl","containerRef","useRef","handlePopoverClose","Boolean","ref","onMouseEnter","event","currentTarget","onMouseLeave","Popover","anchorOrigin","vertical","horizontal","transformOrigin","disableRestoreFocus","current","text","QuestionConstants","TestatorQuestion","UndividedEstateQuestion","YesNoWidgetOptions","widget","withAvatar","loading","terminateLoading","UndividedEstateResultText","selectedOption","undividedEstateResultText","NetWealthQuestion","NetWealthWarning","UnderAgeQuestion","UnderAgeResultText","underAgeResultText","SpouseChoiceQuestion","SpouseQuestion","CohabitantChoiceQuestion","CohabitantQuestion","addSuccessorQuestion1","person_id","person_ID","addSuccessorQuestion2","child_id_string","children_IDs","AliveQuestion","child_ID","AliveResultText","aliveResultText","addParentsQuestion1","askSecondParentChoiceQuestion","addParentsQuestion2","parent_id_string","parents_IDs","MarriedParents1","first_parent_id","second_parent_id","parent1_ID","parent2_ID","MarriedParents2","addGrandParentsQuestion1","addGrandParentsQuestion2","grandparent_id_string","grandParents_IDs","FinalQuestion","EmptyQuestion","DefaultText","TotalEstateNetValueQuestion","TotalEstateNetValueWarning","OwnershipTypeQuestion","OwnershipQuestionWidgetOptions","OwnershipTypeWarning","DelvisFirstQuestion","DelvisSecondQuestion","FulltSaereieQuestion","UndividedEstateSpouseQuestion","TextBeforeSucsrUndvdSpouse","addSuccessorCount","addSuccessorOfParentCount","existing_child_id","existing_child_ID","InheritanceConstants","DESC_COHABITANT_WITHOUT_COMMON_CHILD","DESC_NO_SPOUSE_OR_COHABITANT","DESC_COHABITANT_NO_CLOSE_RELATIVES_2","DESC_COHABITANT_NO_CLOSE_RELATIVES","DESC_SPOUSE_NO_CLOSE_RELATIVES_2","DESC_SPOUSE_NO_CLOSE_RELATIVES","G","MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN","FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN","MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS","FRACTION_INHERITANCE_SPOUSE_VS_PARENTS","MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN","FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN","MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS","FRACTION_INHERITANCE_COHABITANT_VS_PARENTS","FRACTION_PLIKTDEL","LINE_MAXIMUM_PLIKTDEL","LAW_LINKS","KapittelVI","CODE_PARAGRAPHS","Person","personid","_personName","_deceased","_childrenRearing","_underAge","set_spouse","spouse","hasSurvivingSpouse","set_cohabitant","cohabitant","getPerson","personMap","Family","_person_dict","personID","keys","ParseCurrencyStringForOutput","unformattedCurrency","Intl","NumberFormat","currency","currencyDisplay","minimumFractionDigits","maximumFractionDigits","format","Number","replace","concat","CurrencyOutput","inputCurrency","initialCurrencyValue","beginningValue","endValue","matchesStart","match","matchStartResult","substring","matchesEnd","matchEndResult","removeTextFromCurrencyString","digitsBeforeSeparatorValue","separatorCount","checkSeparatorCount","digitsBeforeSymbol","checkDigitsBeforeSeparatorValue","ReportUtils","combine_duplicates","inheritance_fraction_list","combinedList","inheritanceFraction","has","frac","chains","set","arrayOfObjects","from","rArray","split_evenly_between_lines","person_list","maximum_distance","allow_parents","split_fraction_list","split_frac","personDetail","personNode","get_class_and_distance_closest_surviving_relative","temp_list","level_sum","interm_temp_list","temp_split_fraction_list","temp_fraction_list","compute_default_genealogy_splits_with_chains","class_closest","firstParentSpouse","grandParent_splits","parentNode","intl","InheritanceCalculation","will","survivor","survivor_type","distance_closest","old_surviving_reference_paragraphs","surviving_reference_paragraphs","minimum_surviving_inheritance","surviving_fraction","descriptive_text","survivor_inheritance_sum","genealogy_inheritance_sum","splits_with_chains","genealogy_inheritance","genealogy_splits","reportUtils","computeInheritance","closest_class","firstParentNode","num","grandparent_splits","split","resultList","computeGenealogyInheritance","Math","min","max","genealogy_split","Font","register","family","fonts","src","xDiff","yDiff","partnerBubbleLevelMap","HandleType","styles","StyleSheet","create","page","section","margin","viewer","width","innerHeight","marginBottom","heading","subheading","fontsize","paragraph","pageNumber","bottom","left","right","boldValue","Genealogy","break","Summary","SurvivingPartner","useContext","UserContext","FirstSection","SecondSection","ThirdSection","GeneralReservations","NationalInsurance","FourthSection","Bold","children","IntroductionPage","calculatedValues","currencyFormatted","useGrouping","testatorName","IntroductionUtils","Footer","render","totalPages","fixed","createContext","FinalDocument","inputData","Provider","ActionProvider","setStateFunc","createClientMessage","stateRef","QuestionConsts","checkstate","isStarted","glb_state","GRANDCHILDREN_PATH_LIMIT","revertCount","localStorage","getItem","parseInt","setItem","toString","returnState","testatorResponse","undividedEstateQuestion","createTestator","addMessageToBotState","undividedEstateChoiceResponse","totalEstateNetValueQuestion","netWealthQuestion","totalEstateValueResponse","totalEstateValueQuestion","currencyIntResponse","currencyStringResponse","currencyJSX","ownershipTypeQuestion","currencyCustom","totalEstateWarning","ownershipResponse","undividedEstateSpouseQuestion","underAgeQuestion","askFinalQuestion","delvisFirstQuestion","fulltSaereieQuestion","ownershipTypeWarning","delvisFirstResponse","delvisSecondQuestion","netWealthWarning","delvisSecondResponse","fulltSaereieResponse","undividedEstateSpouseResponse","undividedSpouseID","newUndividedSpouse","createNewPerson","undividedSpouse","newUndividedSpouseDetail","textBeforeSucsrUndvdSpouse","newSuccessorQuestion","spouseChoiceQuestion","cohabitantChoiceQuestion","spouseQuestion","spouseResponse","spouseID","newSpouse","rearChildrenStep","cohabitantChoiceResponse","cohabitantQuestion","cohabitantResponse","cohabitantID","newCohabitant","successorResponse","child_name","childID","getChildUnprocessedNode","personId","aliveQuestion","alive","childDetail","getGenerationCount","handleNoSuccessorCase","childItrPos","allChildrenID","getParentChildrenIDStrings","currentParentID","isCurrentParentID","currentId","getParentId","currentParentDetail","handleClosingStep","secondParentChoice","allParentsID","temp_person_detail","newParentQuestion","closestSurvivingRelativeParents","closestSurvivingRelativeGrandParents","parentResponse","predecessor_id","predecessor","temp_parent_detail","grandParentFirst","testatorNode","askForNextGrandParent","marriedParentsResponse","finalOption","inheritanceCalculation","pdfDownloadLink","fileName","blob","url","pdfLink","handleRearChildrenResult","closestSurvivingRelativeChildren","testatorDetail","temp_class_testator","temp_class_undivided_spouse","collection","join","finalQuestion","isTwoParent","personName","secondParentChoiceQuestion","temp_class","eitherParentsDeceased","p_id","parent1Detail","parent2Detail","marriedParentsQn","isArray","handleDefault","newPerson","generateNextID","newNode","createEmptyNode","firstSpouse_id","secondSpouse_id","surviving_successor_distance","possible_distances","temp","distance","alternatives","sort","b","closest_alternative_class","closest_alternative_distance","check","self","setInterval","detail","clearInterval","chartSelector","delay","n","Promise","resolve","setTimeout","currencyResponse","successorCount","parentID","questionType","itr_id","t","ChartNode","type","xLevel","draggable","connectable","NodeData","showDialog","pos","ChartConnector","source","sourceHandle","targetHandle","animated","Bubble","elements","maxLevel","minLevel","xLevelArray","chartNodeMap","connectorArray","nodeSize","setxLevel","levelMap","processedNodes","currentLevelChartNodes","currentNode","avgXlevel","parentsCurrentNode","partnerNodeId","partnerChartNode","getChartNode","partnerBubbleArray","connector","newConnector","currentNodePath","j","sourceNode","targetNode","top","getLevelMap","nodeDetails","nodeLabel","y","setNodePosition","ypos","sortedLevelChartNode","bubbles","createLevelBubble","processBubbles","xleft","xgap","previousXRight","bubble","parentChartNode","relativeXleft","relativeXRight","eleID","chartNodes","partnerBubble","isPartnerProcessed","chartNode","partnerParent","isExistingBubble","partnerNode","existingBubbles","existingBubble","getChartNodeConnectorArray","finalArray","setxLevelForMaxLevel","nodeArray","xlevelDefault","customHandleData","Position","Right","Bottom","Left","Top","partnerNodeStyles","borderRadius","borderColor","borderStyle","borderWidth","letterSpacing","lineHeight","deceasedFormatter","personString","CustomNode","totalData","isConnectable","handles","v","k","labelString","mode","forceSingleModeWidth","Popper","chatBotDataSubject","chatbotMessageSubscriptionList","componentCommunicatorService","flowStyles","isHandleChange","OrgChartTree","result","setResult","chartContent","setChartContent","componentWillUnmount","updateNodeInternals","useUpdateNodeInternals","chartData","maxLevelData","processData","fitView","useZoomPanHelper","nodeTypes","specialNode","paddingTop","nodesConnectable","paneMoveable","selectNodesOnDrag","elementsSelectable","nodesDraggable","BackgroundVariant","Dots","gap","setWarningDiv","chatParentElement","newDiv","createElement","prepend","addListenerToChatInputField","InheritanceCalculatorPage","prev","Config","messageParser","divChatBot","botIcon","Copyright","Date","getFullYear","footer","description","Paper","gutterBottom","ResourcesPage","initialState","genericReducer","action","payload","store","createStore","createTheme","rootPaper","marginTop","minHeight","opacity","menuItems","App","langMessages","StyledEngineProvider","injectFirst","ThemeProvider","role"],"mappings":"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","file":"static/js/main.6a75fae3.chunk.js","sourcesContent":["export enum ChatStepTypes {\r\n  initalStep = \"\",\r\n  testatorStep = \"testatorStep\",\r\n  undividedEstateStep = \"undividedEstateStep\",\r\n  netWealthStep = \"netWealthStep\",\r\n  underAgeStep = \"underAgeStep\",\r\n  spouseChoice = \"spouseChoice\",\r\n  spouseStep = \"spouseStep\",\r\n  cohabitantChoice = \"cohabitantChoice\",\r\n  cohabitantStep = \"cohabitantStep\",\r\n  successorStep = \"successorStep\",\r\n  parentsStep = \"parentsStep\",\r\n  rearChildrenStep = \"rearChildrenStep\",\r\n  marriedParentsStep = \"marriedParentsStep\",\r\n  grandParentStep = \"grandParentStep\",\r\n  finalStep = \"finalStep\",\r\n  secondParentChoice = \"secondParentChoice\",\r\n}\r\n\r\nexport enum QuestionType {\r\n  part1 = \"part1\",\r\n  part2 = \"part2\",\r\n  part3 = \"part3\",\r\n  part4 = \"part4\",\r\n  part5 = \"part5\",\r\n  part6 = \"part6\",\r\n  initialQuestion = \"none\",\r\n}\r\n","import { ReactElement } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\n\r\nconst root = {\r\n  fontFamily: '\"Abril Fatface\", serif',\r\n  color: \"#016196\",\r\n};\r\n\r\nconst useStyles = makeStyles({ root });\r\nconst HeaderTitle = (): ReactElement => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Typography variant=\"h2\" className={classes.root} noWrap>\r\n      ARVEBOT\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default HeaderTitle;\r\n","// import classes from \"./MenuLink.module.css\";\r\nimport { ReactElement } from \"react\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface propsTypes {\r\n  href: string;\r\n  name: ReactElement;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    fontFamily: '\"Work Sans\", sans-serif',\r\n    // fontWeight: \"300\",\r\n    fontSize: \"1.3rem\",\r\n    color: \"#4151C9\",\r\n    padding: \"0 20px\",\r\n    textDecoration: \"none\",\r\n    textAlign: \"center\",\r\n    \"&:hover\": {\r\n      color: \"#FFF5EE\",\r\n      backgroundColor: \"#87AFC7\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  rootActive: {\r\n    backgroundColor: \"#FFCBA4\",\r\n    color: \"#2B3856\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#FCCABD\",\r\n      color: \"#2B3856\",\r\n    },\r\n  },\r\n});\r\n\r\nconst MenuLink = (props: propsTypes): ReactElement => {\r\n  const classes = useStyles(props);\r\n  return (\r\n    <NavLink\r\n      to={props.href}\r\n      className={classes.root}\r\n      exact\r\n      activeClassName={classes.rootActive}\r\n    >\r\n      {props.name}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default MenuLink;\r\n","const navLinks = [\r\n  {\r\n    id: 0,\r\n    title: \"Menu.Home\",\r\n    path: \"/\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Menu.Calculator\",\r\n    path: \"/calculator\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Menu.About\",\r\n    path: \"/about\",\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Menu.Resources\",\r\n    path: \"/resources\",\r\n  },\r\n];\r\n\r\nexport default navLinks;\r\n","import { Grid } from \"@mui/material\";\r\nimport MenuLink from \"./MenuLink/MenuLink\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ReactElement } from \"react\";\r\n\r\nconst HeaderMenu = (): ReactElement => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"space-evenly\"\r\n      alignItems=\"center\"\r\n    >\r\n      {NavLinks.map(({ id, title, path }) => {\r\n        return (\r\n          <Grid item key={id}>\r\n            <MenuLink name={<FormattedMessage id={`${title}`} />} href={path} />\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HeaderMenu;\r\n","import { useState, useEffect, ReactElement } from \"react\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Grid,\r\n  IconButton,\r\n  Drawer,\r\n  Link,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport HeaderTitle from \"./HeaderTitle/HeaderTitle\";\r\nimport HeaderMenu from \"./HeaderMenu/HeaderMenu\";\r\nimport NavLinks from \"../../Generic/Header/HeaderMenu/NavLinks\";\r\n\r\nconst useStyles = makeStyles({\r\n  header: {\r\n    backgroundColor: \"white\",\r\n    height: \"5rem\",\r\n  },\r\n  \"@media (max-width: 900px)\": {\r\n    paddingLeft: 0,\r\n  },\r\n  drawerContainer: {\r\n    padding: \"20px 30px\",\r\n  },\r\n  menuIconRoot: {\r\n    color: \"#4151C9\",\r\n  },\r\n});\r\n\r\nconst getDrawerChoices = () => {\r\n  return NavLinks.map(({ id, title, path }) => {\r\n    return (\r\n      <Link\r\n        {...{\r\n          component: RouterLink,\r\n          to: path,\r\n          color: \"inherit\",\r\n          style: { textDecoration: \"none\" },\r\n          key: id,\r\n        }}\r\n      >\r\n        <MenuItem>{title}</MenuItem>\r\n      </Link>\r\n    );\r\n  });\r\n};\r\nconst displayDesktop = () => {\r\n  return (\r\n    <Toolbar>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item sm={6}>\r\n          <HeaderTitle />\r\n        </Grid>\r\n        <Grid item sm={6}>\r\n          <HeaderMenu />\r\n        </Grid>\r\n      </Grid>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nconst Header = (): ReactElement => {\r\n  const [state, setState] = useState({\r\n    mobileView: false,\r\n    drawerOpen: false,\r\n  });\r\n  const { mobileView, drawerOpen } = state;\r\n  useEffect(() => {\r\n    const setResponsiveness = () => {\r\n      return window.innerWidth < 900\r\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\r\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\r\n    };\r\n    setResponsiveness();\r\n    window.addEventListener(\"resize\", () => setResponsiveness());\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  const displayMobile = () => {\r\n    const handleDrawerOpen = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: true }));\r\n    const handleDrawerClose = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: false }));\r\n\r\n    return (\r\n      <Toolbar>\r\n        <MenuIcon className={classes.menuIconRoot} />\r\n        <IconButton edge=\"start\" color=\"inherit\" onClick={handleDrawerOpen} size=\"large\" />\r\n        <Drawer anchor=\"left\" open={drawerOpen} onClose={handleDrawerClose}>\r\n          <div className={classes.drawerContainer}>{getDrawerChoices()}</div>\r\n        </Drawer>\r\n        <HeaderTitle />\r\n      </Toolbar>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppBar className={classes.header}>\r\n      {mobileView ? displayMobile() : displayDesktop()}\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { ReactElement } from \"react\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport Typed from 'react-typed';\r\n// import Typed from \"typed.js\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    padding: \"10rem 20rem\",\r\n    color: \"white\",\r\n    fontFamily: '\"Work Sans\", sans-serif',\r\n  },\r\n  highLightText: {\r\n    fontFamily: '\"Abril Fatface\", serif',\r\n    fontSize: \"4rem\",\r\n    color: \"yellow\",\r\n  },\r\n});\r\n\r\nconst HomeDetail = (): ReactElement => {\r\n  const classes = useStyles();\r\n  const textLines = [\"hjelper deg å finne løsningen og relevant rettsgrunnlag.\"]\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h4\" align=\"center\" className={classes.root}>\r\n        Lurer du på hvem som arver Peder Ås når han dør? <br />\r\n        Hvor mye får kona og barna? Hva med stesønnen? <br />\r\n        Og hvor mye kan han testamentere til Lilleviks fuglekikkerforening?{\" \"}\r\n        <br /> <br />\r\n        <span className={classes.highLightText}>BeregnArv</span> <Typed typeSpeed={50} strings={textLines}></Typed>\r\n      </Typography>\r\n    </Box >\r\n  );\r\n};\r\n\r\nexport default HomeDetail;\r\n","import { ReactElement } from \"react\";\r\nimport HomeDetail from \"../Components/HomeComponents/HomeDetail/HomeDetail\";\r\n\r\nconst HomePage = (): ReactElement => {\r\n  return (\r\n    // <Typography variant=\"h2\" align=\"center\">\r\n    //   HomePage\r\n    // </Typography>\r\n    <HomeDetail />\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { Typography } from \"@mui/material\";\r\nimport { ReactElement } from \"react\";\r\nconst AboutPage = (): ReactElement => {\r\n\r\n  return (\r\n    <Typography variant=\"h2\" align=\"center\">\r\n      About Page\r\n    </Typography>\r\n  )\r\n};\r\n\r\nexport default AboutPage;","import { Subject, Subscription } from 'rxjs';\r\nimport _ from \"lodash\";\r\n\r\nconst inSubject = new Subject();\r\nconst outSubject = new Subject();\r\nconst internalSubscriptionList = new Array<Subscription>()\r\nconst externalSubscriptionList = new Array<Subscription>()\r\nconst previousStates = new Array<any>();\r\nexport const messageService = {\r\n\r\n    sendMessageToChatbot: (message: any) => inSubject.next(message),\r\n\r\n    sendMessageFromChatbot: (message: any) => outSubject.next(message),\r\n\r\n    getMessageInChatbot: () => inSubject.asObservable(),\r\n\r\n    getMessageOutChatbot: () => outSubject.asObservable(),\r\n\r\n    addInternalSubscription: (subscription: Subscription) => internalSubscriptionList.push(subscription),\r\n\r\n    addExternalSubscription: (subscription: Subscription) => externalSubscriptionList.push(subscription),\r\n\r\n    addPreviousState: (data: any) => {\r\n        const stateCopy = _.cloneDeep(data)\r\n        if (previousStates.filter(previousState => Object.entries(previousState) == Object.entries(stateCopy)).length === 0) {\r\n            previousStates.push(stateCopy)\r\n        }\r\n    },\r\n\r\n    removePreviousState: () => {\r\n        if (previousStates.length === 0) {\r\n            return null;\r\n        }\r\n        return previousStates.pop()\r\n    },\r\n\r\n    getPreviousStates: () => previousStates,\r\n\r\n    getPreviousState: (reverseCount: number) => {\r\n        if (previousStates.length === 0) return null;\r\n        return previousStates[previousStates.length - 1 - reverseCount]\r\n    },\r\n\r\n    clearAllInternalSubscription: () => {\r\n        internalSubscriptionList.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        })\r\n    },\r\n\r\n    clearAllExternalSubscription: () => {\r\n        externalSubscriptionList.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        })\r\n    }\r\n};\r\n","import \"./OptionSelector.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ReactElement } from \"react\";\r\nimport { ChatbotInterface } from \"../../../Generics\";\r\nimport { ChatStepTypes, QuestionType } from \"../../../Helper/Enums/ChatStepTypes\";\r\nimport { messageService } from \"../../../services/ChatbotCommunicator\";\r\n\r\n\r\nconst OptionSelector = (props: any): ReactElement => {\r\n  const { actionProvider, setState } = props;\r\n  const setOption = (option: boolean) => {\r\n    handleOptions(option, actionProvider, setState);\r\n  };\r\n\r\n  const onClickHandler = (e: any): void => {\r\n    // const thisButton = e.target as HTMLButtonElement\r\n    // const nextButton = (thisButton).nextElementSibling as HTMLButtonElement\r\n    // const prevButton = (thisButton).previousElementSibling as HTMLButtonElement\r\n    // const otherButton = nextButton ? nextButton : prevButton\r\n    // thisButton.style.pointerEvents = \"none\"\r\n    // thisButton.style.background = \"darkolivegreen\";\r\n    // thisButton.disabled = true;\r\n    // otherButton.style.pointerEvents = \"none\"\r\n    // otherButton.disabled = true;\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"option-selector-button-container\">\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(true)\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.Yes\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(false)\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.No\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst handleOptions = (option: boolean, actionProvider: any, setState: any) => {\r\n  hideWarning();\r\n  setState((state: ChatbotInterface) => {\r\n    messageService.addPreviousState({ ...state })\r\n    const curStep = state.stepID;\r\n    state.yesNoClickedFlag = true;\r\n    switch (curStep) {\r\n      case ChatStepTypes.testatorStep: {\r\n        actionProvider.handleUndividedEstateChoice(option);\r\n        break;\r\n      }\r\n      case ChatStepTypes.undividedEstateStep: {\r\n        if (state.successor_flag === QuestionType.part2) {\r\n          actionProvider.handleChildAliveOption(option);\r\n          break;\r\n        }\r\n        else if (state.parent_flag === QuestionType.part2) {\r\n          actionProvider.handleParentAliveOption(option);\r\n          break;\r\n        }\r\n        else if (state.parent_flag === QuestionType.part3) {\r\n          actionProvider.handleSecondParentExists(option);\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case ChatStepTypes.underAgeStep: {\r\n        actionProvider.handleUnderAge(option);\r\n        break;\r\n      }\r\n      case ChatStepTypes.spouseChoice: {\r\n        actionProvider.handleSpouseChoice(option);\r\n        break;\r\n      }\r\n      case ChatStepTypes.cohabitantChoice: {\r\n        actionProvider.handleCohabitantChoice(option);\r\n        break;\r\n      }\r\n      case ChatStepTypes.successorStep: {\r\n        state.successor_flag = QuestionType.part2\r\n        actionProvider.handleChildAliveOption(option);\r\n        break;\r\n      }\r\n      case ChatStepTypes.parentsStep: {\r\n        if (state.successor_flag === QuestionType.part2) {\r\n          actionProvider.handleChildAliveOption(option);\r\n          break;\r\n        }\r\n        else if (state.parent_flag === QuestionType.part2) {\r\n          actionProvider.handleParentAliveOption(option);\r\n          break;\r\n        }\r\n        else if (state.parent_flag === QuestionType.part3) {\r\n          actionProvider.handleSecondParentExists(option);\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case ChatStepTypes.marriedParentsStep: {\r\n        actionProvider.handleMarriedParents(option);\r\n        break;\r\n      }\r\n      case ChatStepTypes.grandParentStep: {\r\n        if (state.successor_flag === QuestionType.part2) {\r\n          actionProvider.handleChildAliveOption(option);\r\n          break;\r\n        }\r\n        else if (state.parent_flag === QuestionType.part2) {\r\n          actionProvider.handleParentAliveOption(option);\r\n          break;\r\n        }\r\n        else if (state.parent_flag === QuestionType.part3) {\r\n          actionProvider.handleSecondParentExists(option);\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case ChatStepTypes.finalStep: {\r\n        actionProvider.handleFinalQuestion(option)\r\n        break;\r\n      }\r\n      default: {\r\n        console.log(\"fix this. state: \", state);\r\n      }\r\n    }\r\n    return state;\r\n  });\r\n}\r\nconst hideWarning = () => {\r\n  const warningDiv = document.getElementById(\"chatbot-warning-div\");\r\n  if (warningDiv) {\r\n    warningDiv.style.display = \"none\";\r\n    return;\r\n  }\r\n}\r\nexport default OptionSelector;\r\n// function toggleInputField() {\r\n//   const chatInputField = document.querySelectorAll(\r\n//     \".react-chatbot-kit-chat-input\"\r\n//   ) as NodeListOf<HTMLElement>;\r\n//   if (chatInputField)\r\n//     chatInputField[0]. = !chatInputField.disabled;\r\n// }\r\n\r\n","import { Box } from \"@mui/material\";\r\nimport PropTypes, { InferProps } from 'prop-types';\r\nimport './InfoMessagesWidget.scss'\r\n\r\nconst InfoMessageTypes = {\r\n  label: PropTypes.string\r\n}\r\ntype InfoMessageTypes = InferProps<typeof InfoMessageTypes>\r\n\r\nconst InfoMessagesWidget = ({ label }: InfoMessageTypes) => {\r\n  return <Box\r\n    display=\"flex\"\r\n    justifyContent=\"center\"\r\n    alignItems=\"center\"\r\n    component=\"span\"\r\n    className=\"InfoMessage\"\r\n    sx={{ backgroundColor: \"#FFCBA4\" }}\r\n  >\r\n    Amount Entered: {label}\r\n  </Box>\r\n};\r\n// color: #FFCBA4\r\n\r\nexport default InfoMessagesWidget;","import { ReactElement } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./RearChildrenOptionSelector.scss\";\r\n\r\nconst RearChildrenOptionSelector = (props: any): ReactElement => {\r\n  const { setState, actionProvider } = props;\r\n\r\n  const setOption = async (option: any) => {\r\n    setState((state: any) => ({\r\n      ...state,\r\n      // stepID: 5,\r\n      rearChildren: option,\r\n    }));\r\n\r\n    actionProvider.handleRearChildrenOptionWidget(option);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"option-selector-button-container\">\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={() => setOption(true)}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.Yes\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={() => setOption(false)}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.No\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RearChildrenOptionSelector;\r\n","import \"./UndividedEstateWidget.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ReactElement } from \"react\";\r\n\r\n\r\nconst UndividedEstateWidget = (props: any): ReactElement => {\r\n  const { actionProvider } = props;\r\n\r\n  const setOption = (option: string) => {\r\n    actionProvider.handleOwnershipResponse(option);\r\n  };\r\n\r\n  const onClickHandler = (e: any): void => {\r\n    const thisButton = e.target as HTMLButtonElement;\r\n    const currentParent = thisButton.parentElement;\r\n    if (currentParent?.hasChildNodes) {\r\n      const allCurrentButtons = Object.values(currentParent.childNodes) as HTMLButtonElement[];\r\n      for (const childEl of allCurrentButtons) {\r\n        childEl.style.pointerEvents = \"none\";\r\n        childEl.disabled = true;\r\n      }\r\n      thisButton.style.background = \"darkolivegreen\";\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"option-selector-button-container\">\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(\"FELLESEIE\")\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.OWNERSHIP_TYPE1\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(\"DELVIS SÆREIE\")\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.OWNERSHIP_TYPE2\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(\"FULLT SÆREIE\")\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.OWNERSHIP_TYPE3\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UndividedEstateWidget;\r\n","import { useState } from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport { RestartAlt } from \"@mui/icons-material\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function ChatHeader(props: any) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCloseNo = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseYes = () => {\r\n    restartBot();\r\n    setOpen(false);\r\n  }\r\n\r\n  const restartBot = () => {\r\n    props.actionProvider.resetChatbot();\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Conversation with ArveBot\r\n          </Typography>\r\n          <Button onClick={handleClickOpen} style={{ backgroundColor: \"rgb(92, 204, 157)\" }}>\r\n            <RestartAlt fontSize=\"large\" />\r\n          </Button>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleCloseNo}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n              Restart ChatBot?\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                Do you really want to finish current session and start over?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseNo}>No</Button>\r\n              <Button onClick={handleCloseYes} autoFocus>\r\n                Yes\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","export enum ParentChildSelector {\r\n  child = 0,\r\n  parent = 1,\r\n  testator = -1,\r\n  grandParent = 2,\r\n  spouse = 3,\r\n  cohabitant = 4,\r\n  undividedSpouse = 5,\r\n}\r\n","import { ParentChildSelector } from \"../Enums/ParentChildSelector\";\r\n\r\nexport class NodeEntity {\r\n  _id: number;\r\n  _level: number;\r\n  _path: Array<[number, number]>;\r\n  _parents: Array<number>;\r\n  _children: Array<number>;\r\n  _spouse: number | null;\r\n  _cohabitant: number | null;\r\n  _undividedEstateSpouse: number | null;\r\n  _relationshipMap: Map<string, string>;\r\n  _childCount: number;\r\n  _processChildNodePos: number;\r\n  constructor(id: number, level: number) {\r\n    this._id = id;\r\n    this._level = level;\r\n    this._path = [];\r\n    this._parents = [];\r\n    this._children = [];\r\n    this._spouse = null;\r\n    this._cohabitant = null;\r\n    this._undividedEstateSpouse = null;\r\n    this._relationshipMap = this._getRelationshipMap();\r\n    this._childCount = 0;\r\n    this._processChildNodePos = 0;\r\n  }\r\n  _getRelationshipMap = (): Map<string, string> => {\r\n    return new Map<string, string>([\r\n      [\"0\", \"child\"],\r\n      [\"00\", \"grandchild\"],\r\n      [\"1\", \"parent\"],\r\n      [\"10\", \"brother/sister\"],\r\n      [\"100\", \"nephew/niece\"],\r\n      [\"1000\", \"grandniece\"],\r\n      [\"12\", \"grandparent\"],\r\n      [\"120\", \"uncle/aunt\"],\r\n      [\"1200\", \"cousin\"],\r\n      [\"\", \"\"],\r\n    ]);\r\n    return new Map<string, string>();\r\n  };\r\n  setPath(prevPath: Array<[number, number]>) {\r\n    this._path = prevPath;\r\n  }\r\n  getParentId(nodeMap: Map<number, NodeEntity>) {\r\n    if (this._path.length - 2 < 0) {\r\n      return null;\r\n    }\r\n    const currId = this._path[this._path.length - 2][1];\r\n    const currNode = NodeEntity.getNode(currId, nodeMap);\r\n    if (\r\n      !(\r\n        this._children.includes(this._path[this._path.length - 2][1]) ||\r\n        currNode._undividedEstateSpouse === this._id\r\n      )\r\n    )\r\n      return this._path[this._path.length - 2][1];\r\n    return null;\r\n  }\r\n  getGenerationCount() {\r\n    let parentCount = 0;\r\n    if (this._path.length - 2 < 0) {\r\n      return 0;\r\n    }\r\n    for (let i = this._path.length - 2; i >= 0; i--) {\r\n      if (this._path[i][0] === ParentChildSelector.grandParent) {\r\n        parentCount += 1;\r\n        break;\r\n      } else {\r\n        parentCount += 1;\r\n      }\r\n    }\r\n    return parentCount;\r\n  }\r\n\r\n  add_child = (child: NodeEntity, add_for_both = true): void => {\r\n    const children_array = this._children;\r\n    const child_id = child._id;\r\n    if (!children_array.find((obj) => obj === child_id)) {\r\n      this._children.push(child_id);\r\n    }\r\n    child._path = [...this._path];\r\n    child._path.push([ParentChildSelector.child, child_id]);\r\n    child._level = this.getLevel(child._path);\r\n    if (add_for_both) {\r\n      if (!child._parents.find((obj) => obj === this._id)) {\r\n        child._parents.push(this._id);\r\n      }\r\n    }\r\n  };\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  add_parent = (\r\n    parent: NodeEntity,\r\n    add_for_both = true,\r\n    grandParent = false\r\n  ): void => {\r\n    const parents_array = this._parents;\r\n    const parent_id = parent._id;\r\n    if (!parents_array.find((obj) => obj === parent_id)) {\r\n      this._parents.push(parent_id);\r\n    }\r\n    parent._path = [...this._path];\r\n\r\n    parent._path.push([ParentChildSelector.parent, parent_id]);\r\n    parent._level = this.getLevel(parent._path);\r\n    if (parent._level === 2) {\r\n      parent._path[parent._path.length - 1][0] =\r\n        ParentChildSelector.grandParent;\r\n    }\r\n    if (add_for_both) {\r\n      if (!parent._children.find((obj) => obj === this._id)) {\r\n        parent._children.push(this._id);\r\n      }\r\n    }\r\n  };\r\n\r\n  getLatestPathKey = () => {\r\n    if (this._path.length == 0) {\r\n      throw new Error(\"Invalid Case\");\r\n    }\r\n    return this._path[this._path.length - 1][0];\r\n  };\r\n\r\n  getLevel = (path: Array<[number, number]>) => {\r\n    let level = 0;\r\n    path.map((x) => {\r\n      if (x[0] === ParentChildSelector.child) {\r\n        level = level - 1;\r\n      } else if (\r\n        x[0] === ParentChildSelector.parent ||\r\n        x[0] === ParentChildSelector.grandParent\r\n      ) {\r\n        level = level + 1;\r\n      } else {\r\n        level = level + 0;\r\n      }\r\n    });\r\n    return level;\r\n  };\r\n\r\n  static getNode = (id: number, nodeMap: Map<number, NodeEntity>) => {\r\n    const node: NodeEntity | undefined = nodeMap.get(id);\r\n    if (node == undefined) {\r\n      throw new Error(\"Node not found with given id:\" + id);\r\n    }\r\n    return node;\r\n  };\r\n\r\n  setPathforPartner = (partnerSelector: number, partner: NodeEntity) => {\r\n    partner._path = [...this._path];\r\n    partner._path.push([partnerSelector, partner._id]);\r\n  };\r\n  getChildUnprocessedNode() {\r\n    if (this._processChildNodePos < this._children.length) {\r\n      return this._children[this._processChildNodePos++];\r\n    }\r\n  }\r\n\r\n  has_surviving_spouse = () => {\r\n    return true;\r\n  };\r\n\r\n  has_surviving_cohabitant = () => {\r\n    if (this._cohabitant !== null) return true;\r\n    return false;\r\n  };\r\n}\r\n","import Person from \"../ChatbotComponent/Helper/Classes/Person\";\r\nimport { NodeEntity } from \"./Helper/Classes/NodeEntity\";\r\nimport { ChatStepTypes, QuestionType } from \"./Helper/Enums/ChatStepTypes\";\r\nexport interface ChatbotInterface {\r\n  stepID: string;\r\n  person: NodeEntity;\r\n  testator: NodeEntity;\r\n  caseName: string;\r\n  netWealth: number;\r\n  successor_flag: string;\r\n  parent_flag: string;\r\n  temp_person: NodeEntity;\r\n  temp_child: NodeEntity;\r\n  temp_parent: NodeEntity;\r\n  personsMap: Map<number, Person>;\r\n  nodeMap: Map<number, NodeEntity>;\r\n  id: number;\r\n  deceasedParentsArray: Array<number>;\r\n  grandParent_flag: string;\r\n  rearChildrenResponse: boolean;\r\n  undividedEstate: {\r\n    undividedEstateChoice: boolean;\r\n    undivided_flag: string;\r\n    totalEstateValue: number;\r\n    undividedEstateSeparateWealth: number;\r\n    temp_first: number;\r\n    temp_last: number;\r\n  };\r\n  tempMessages: any;\r\n  successorProcessArray: Array<[number, number]>;\r\n  isUndividedParent: boolean;\r\n  yesNoClickedFlag: boolean;\r\n}\r\n\r\nexport const ChatbotState: ChatbotInterface = {\r\n  stepID: ChatStepTypes.initalStep,\r\n  person: new NodeEntity(0, 0),\r\n  testator: new NodeEntity(0, 0),\r\n  caseName: \"\",\r\n  netWealth: 0,\r\n  successor_flag: QuestionType.initialQuestion,\r\n  parent_flag: QuestionType.initialQuestion,\r\n  temp_person: new NodeEntity(0, 0),\r\n  temp_child: new NodeEntity(0, 0),\r\n  temp_parent: new NodeEntity(0, 0),\r\n  personsMap: new Map(),\r\n  nodeMap: new Map(),\r\n  id: 1,\r\n  deceasedParentsArray: [],\r\n  grandParent_flag: QuestionType.initialQuestion,\r\n  rearChildrenResponse: false,\r\n  undividedEstate: {\r\n    undividedEstateChoice: false,\r\n    undivided_flag: QuestionType.initialQuestion,\r\n    totalEstateValue: 0,\r\n    undividedEstateSeparateWealth: 0,\r\n    temp_first: 0,\r\n    temp_last: 0,\r\n  },\r\n  tempMessages: [],\r\n  successorProcessArray: [],\r\n  isUndividedParent: false,\r\n  yesNoClickedFlag: false,\r\n};\r\n\r\nexport const InitialChatbotState: any = {\r\n  stepID: ChatStepTypes.initalStep,\r\n  person: new NodeEntity(0, 0),\r\n  testator: new NodeEntity(0, 0),\r\n  caseName: \"\",\r\n  netWealth: 0,\r\n  successor_flag: QuestionType.initialQuestion,\r\n  parent_flag: QuestionType.initialQuestion,\r\n  temp_person: new NodeEntity(0, 0),\r\n  temp_child: new NodeEntity(0, 0),\r\n  temp_parent: new NodeEntity(0, 0),\r\n  personsMap: new Map(),\r\n  nodeMap: new Map(),\r\n  id: 1,\r\n  deceasedParentsArray: [],\r\n  grandParent_flag: QuestionType.initialQuestion,\r\n  rearChildrenResponse: false,\r\n  undividedEstate: {\r\n    undividedEstateChoice: false,\r\n    undivided_flag: QuestionType.initialQuestion,\r\n    totalEstateValue: 0,\r\n    undividedEstateSeparateWealth: 0,\r\n    temp_first: 0,\r\n    temp_last: 0,\r\n  },\r\n  tempMessages: [],\r\n  successorProcessArray: [],\r\n  messages: [],\r\n};\r\n","export enum ValidationType {\r\n  emptyValue = 0,\r\n  invalidAmount = 1,\r\n  onlyDigit = 2,\r\n  incorrectValueForBoolean = 3,\r\n}\r\nexport enum DefaultWarningMessage {\r\n  emptyValueMessage = \"The field cannot be empty\",\r\n  onlyDigitMessage = \"Please enter only number.\",\r\n  errorForBooleanMessage = \"Please choose correct value or write 'yes/ja', 'no/nei'\",\r\n}\r\n","import { createChatBotMessage } from \"react-chatbot-kit\";\r\nimport OptionSelector from \"./Custom/Widgets/OptionSelector/OptionSelector\";\r\nimport InfoMessageWidget from \"./Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget\";\r\nimport RearChildrenOptionSelector from \"./Custom/Widgets/RearChildrenOptionSelector/RearChildrenOptionSelector\";\r\nimport UndividedEstateWidget from \"./Custom/Widgets/UndividedEstateWidget/UndividedEstateWidget\";\r\nimport \"react-chatbot-kit/build/main.css\";\r\nimport \"../chatbot.scss\";\r\nimport ChatHeader from \"../OtherComponent/ChatHeader/ChatHeader\";\r\nimport { ChatbotState } from \"./Generics\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\n\r\nconst botName = \"Arvebot\";\r\nconst value = intl.formatMessage({ id: \"Chatbot.TESTATOR_QUESTION\" });\r\nconst config = {\r\n  botName: botName,\r\n  lang: \"no\",\r\n  customStyles: {\r\n    botMessageBox: {\r\n      backgroundColor: \"#376B7E\",\r\n    },\r\n    chatButton: {\r\n      backgroundColor: \"#5ccc9d\",\r\n    },\r\n  },\r\n  state: ChatbotState,\r\n  initialMessages: [createChatBotMessage(value, {})],\r\n  customComponents: {\r\n    header: (actionProvider) => <ChatHeader actionProvider={actionProvider} />,\r\n  },\r\n\r\n  widgets: [\r\n    {\r\n      widgetName: \"optionSelectorWidget\",\r\n      widgetFunc: (props) => <OptionSelector {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"RearChildrenSelectorWidget\",\r\n      widgetFunc: (props) => <RearChildrenOptionSelector {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"InfoMessage\",\r\n      widgetFunc: (props) => <InfoMessageWidget {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"undividedEstateWidget\",\r\n      widgetFunc: (props) => <UndividedEstateWidget {...props} />,\r\n    },\r\n  ],\r\n};\r\nexport default config;\r\n","export enum BinaryAnswerTypeYes {\r\n  \"yes\",\r\n  \"ja\",\r\n}\r\n\r\nexport enum BinaryAnswerTypeNo {\r\n  \"no\",\r\n  \"nei\",\r\n}\r\n","import ActionProvider from \"../../ActionProvider\";\r\nimport { BinaryAnswerTypeNo, BinaryAnswerTypeYes } from \"../Enums/BinaryAnswerTypes\";\r\nimport { DefaultWarningMessage, ValidationType } from \"../Enums/ValidationType\";\r\nimport _ from \"lodash\";\r\n\r\nexport class ChatbotValidation {\r\n    constructor(private actionProvider: ActionProvider, private chatbotState: any) { }\r\n    validate = (message: string, validationTypes: Array<number>, warningMessage?: string): boolean => {\r\n\r\n        for (const validationType of validationTypes) {\r\n            if (warningMessage === undefined) {\r\n                warningMessage = this.getDefaultWarningMessage(validationType);\r\n            }\r\n            let validationResult = false;\r\n            switch (validationType) {\r\n                case ValidationType.emptyValue:\r\n                    validationResult = this.validateEmpty(message);\r\n                    break\r\n                case ValidationType.invalidAmount:\r\n                    validationResult = this.validateAmount(message);\r\n                    break\r\n                case ValidationType.onlyDigit:\r\n                    validationResult = this.validateDigit(message);\r\n                    break\r\n                case ValidationType.incorrectValueForBoolean:\r\n                    validationResult = this.validateValueForBoolean(message);\r\n                    break;\r\n                default:\r\n                    console.error(\"Invalid Validation type\")\r\n                    return false;\r\n            }\r\n            if (!validationResult && this.chatbotState) {\r\n                this.showWarning(warningMessage)\r\n                const messageCopy = _.cloneDeep(this.chatbotState.messages)\r\n                this.actionProvider.handleValidation(messageCopy);\r\n                return false;\r\n            } else {\r\n                this.hideWarning();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    validateEmpty = (message: string) => {\r\n        //\r\n        if (message.length === 0) {\r\n            // remove last message\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n    // eslint-disable-next-line\r\n    validateAmount = (message: string) => {\r\n        return false\r\n    }\r\n\r\n    validateDigit = (message: string) => {\r\n        const checkNatural = /^(0|([1-9]\\d*))$/\r\n        if (checkNatural.test(message)) return true\r\n        return false\r\n    }\r\n\r\n    validateValueForBoolean = (message: string) => {\r\n        if (((message in BinaryAnswerTypeYes) || (message in BinaryAnswerTypeNo)) && !(message in [0, 1])) {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private showWarning = (warningMessage: string) => {\r\n        const warningDiv = document.getElementById(\"chatbot-warning-div\");\r\n        if (warningDiv) {\r\n            warningDiv.innerHTML = warningMessage\r\n            warningDiv.style.display = \"block\";\r\n            return;\r\n        }\r\n    }\r\n    private hideWarning = () => {\r\n        const warningDiv = document.getElementById(\"chatbot-warning-div\");\r\n        if (warningDiv) {\r\n            warningDiv.style.display = \"none\";\r\n            return;\r\n        }\r\n    }\r\n    getDefaultWarningMessage(validationType: ValidationType) {\r\n        switch (validationType) {\r\n            case ValidationType.emptyValue:\r\n                return DefaultWarningMessage.emptyValueMessage;\r\n            case ValidationType.incorrectValueForBoolean:\r\n                return \"error boolean message\"\r\n            // return DefaultWarningMessage.errorForBooleanMessage;\r\n            default:\r\n                return \"Improve error message in ChatbotType.ts\";\r\n        }\r\n    }\r\n\r\n\r\n}","import ActionProvider from \"./ActionProvider\";\r\nimport { ChatbotInterface } from \"./Generics\";\r\nimport { ChatStepTypes, QuestionType } from \"./Helper/Enums/ChatStepTypes\";\r\nimport { ValidationType } from \"./Helper/Enums/ValidationType\";\r\nimport { ChatbotValidation } from \"./Helper/Methods/ChatbotValidation\";\r\nimport { messageService } from \"./services/ChatbotCommunicator\";\r\nimport { BinaryAnswerTypeYes, BinaryAnswerTypeNo } from \"../ChatbotComponent/Helper/Enums/BinaryAnswerTypes\"\r\n\r\nclass MessageParser {\r\n  actionProvider: ActionProvider;\r\n  state: any;\r\n  chatbotValidator: ChatbotValidation;\r\n  constructor(actionProvider: ActionProvider, state: any) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n    this.chatbotValidator = new ChatbotValidation(actionProvider, state);\r\n    // this.setRevertListeners();\r\n  }\r\n\r\n  parse(message: string): ReturnType<() => void> {\r\n\r\n\r\n    message = message.trim();\r\n\r\n    const curState = this.state;\r\n    curState.yesNoClickedFlag = false;\r\n\r\n    // initialStep\r\n    if (curState.stepID === ChatStepTypes.initalStep) {\r\n      if (this.chatbotValidator.validate(message, [ValidationType.emptyValue])) {\r\n        return this.actionProvider.handleTestator(message);\r\n      }\r\n      return;\r\n    }\r\n\r\n    //testatorStep\r\n    if (curState.stepID === ChatStepTypes.testatorStep) {\r\n      message = message.toLowerCase();\r\n      if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n        if (message in BinaryAnswerTypeYes) {\r\n          this.disableButtons()\r\n          return this.actionProvider.handleUndividedEstateChoice(true)\r\n\r\n        }\r\n        else if (message in BinaryAnswerTypeNo) {\r\n          this.disableButtons();\r\n          return this.actionProvider.handleUndividedEstateChoice(false)\r\n        }\r\n        else {\r\n          alert(\"check for error\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // undividedEstateStep\r\n    if (curState.stepID === ChatStepTypes.undividedEstateStep) {\r\n      if (curState.undividedEstate.undivided_flag === QuestionType.part1) {\r\n        return this.actionProvider.handleTotalEstateValueResponse(message)\r\n      }\r\n      if (curState.undividedEstate.undivided_flag === QuestionType.part2) {\r\n        return this.actionProvider.handleOwnershipResponse(message)\r\n      }\r\n      if (curState.undividedEstate.undivided_flag === QuestionType.part3) {\r\n        return this.actionProvider.handleDelvisFirstResponse(message)\r\n      }\r\n      if (curState.undividedEstate.undivided_flag === QuestionType.part4) {\r\n        return this.actionProvider.handleDelvisSecondResponse(message)\r\n      }\r\n      if (curState.undividedEstate.undivided_flag === QuestionType.part5) {\r\n        return this.actionProvider.handleFulltSaereieResponse(message);\r\n      }\r\n      if (curState.undividedEstate.undivided_flag === QuestionType.part6) {\r\n        if (curState.successor_flag === QuestionType.part1) {\r\n          return this.actionProvider.handleSuccessorInput(message);\r\n        } else if (curState.successor_flag === QuestionType.part2) {\r\n          message = message.toLowerCase();\r\n          if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n            if (message in BinaryAnswerTypeYes) {\r\n              this.disableButtons()\r\n              return this.actionProvider.handleChildAliveOption(true)\r\n            }\r\n            else if (message in BinaryAnswerTypeNo) {\r\n              this.disableButtons();\r\n              return this.actionProvider.handleChildAliveOption(false)\r\n            }\r\n            else {\r\n              alert(\"check for error\");\r\n            }\r\n          }\r\n        }\r\n        else if (curState.successor_flag === QuestionType.part3) {\r\n          if (this.chatbotValidator.validate(message, [ValidationType.emptyValue, ValidationType.onlyDigit])) {\r\n            return this.actionProvider.handleSuccessorCount(message);\r\n          } else {\r\n            // remove last message and update stepid\r\n            // return this.actionProvider.handleValidation();\r\n          }\r\n        }\r\n        if (curState.parent_flag === QuestionType.part1) {\r\n          return this.actionProvider.handleParentsInput(message);\r\n        }\r\n        else if (curState.parent_flag == QuestionType.part2) {\r\n          message = message.toLowerCase();\r\n          if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n            if (message in BinaryAnswerTypeYes) {\r\n              this.disableButtons()\r\n              return this.actionProvider.handleParentAliveOption(true)\r\n            }\r\n            else if (message in BinaryAnswerTypeNo) {\r\n              this.disableButtons();\r\n              return this.actionProvider.handleParentAliveOption(false)\r\n            }\r\n            else {\r\n              alert(\"check for error\");\r\n            }\r\n          }\r\n        }\r\n        return this.actionProvider.handleUndividedEstateSpouse(message)\r\n      }\r\n      else {\r\n        return this.actionProvider.handleNetWealth(message);\r\n      }\r\n\r\n    }\r\n\r\n    // netWealthStep\r\n    if (curState.stepID === ChatStepTypes.netWealthStep) {\r\n      return this.actionProvider.handleNetWealth(message)\r\n    }\r\n\r\n    // underAgeStep\r\n    if (curState.stepID === ChatStepTypes.underAgeStep) {\r\n      message = message.toLowerCase();\r\n      if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n        if (message in BinaryAnswerTypeYes) {\r\n          this.disableButtons()\r\n          return this.actionProvider.handleUnderAge(true)\r\n\r\n        }\r\n        else if (message in BinaryAnswerTypeNo) {\r\n          this.disableButtons();\r\n          return this.actionProvider.handleUnderAge(false)\r\n        }\r\n        else {\r\n          alert(\"check for error\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // spouse start\r\n    if (curState.stepID === ChatStepTypes.spouseChoice) {\r\n      message = message.toLowerCase();\r\n      if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n        if (message in BinaryAnswerTypeYes) {\r\n          this.disableButtons()\r\n          return this.actionProvider.handleSpouseChoice(true)\r\n        }\r\n        else if (message in BinaryAnswerTypeNo) {\r\n          this.disableButtons();\r\n          return this.actionProvider.handleSpouseChoice(false)\r\n        }\r\n        else {\r\n          alert(\"check for error\");\r\n        }\r\n      }\r\n    }\r\n    if (curState.stepID === ChatStepTypes.spouseStep) {\r\n      if (this.chatbotValidator.validate(message, [ValidationType.emptyValue])) {\r\n        return this.actionProvider.handleSpouseInput(message);\r\n      }\r\n    }\r\n    // spouse end\r\n\r\n\r\n    // cohabitant start\r\n    if (curState.stepID === ChatStepTypes.cohabitantChoice) {\r\n      message = message.toLowerCase();\r\n      if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n        if (message in BinaryAnswerTypeYes) {\r\n          this.disableButtons()\r\n          return this.actionProvider.handleCohabitantChoice(true)\r\n        }\r\n        else if (message in BinaryAnswerTypeNo) {\r\n          this.disableButtons();\r\n          return this.actionProvider.handleCohabitantChoice(false)\r\n        }\r\n        else {\r\n          alert(\"check for error\");\r\n        }\r\n      }\r\n    }\r\n\r\n    if (curState.stepID === ChatStepTypes.cohabitantStep) {\r\n      return this.actionProvider.handleCohabitantInput(message); //set stepID = 7\r\n    }\r\n\r\n    //  cohabitant end\r\n\r\n\r\n    // successorStep\r\n    if (curState.stepID === ChatStepTypes.successorStep) {\r\n      if (curState.successor_flag === QuestionType.part1) {\r\n        return this.actionProvider.handleSuccessorInput(message);\r\n      } else if (curState.successor_flag === QuestionType.part2) {\r\n        message = message.toLowerCase();\r\n        if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n          if (message in BinaryAnswerTypeYes) {\r\n            this.disableButtons()\r\n            return this.actionProvider.handleChildAliveOption(true)\r\n          }\r\n          else if (message in BinaryAnswerTypeNo) {\r\n            this.disableButtons();\r\n            return this.actionProvider.handleChildAliveOption(false)\r\n          }\r\n          else {\r\n            alert(\"check for error\");\r\n          }\r\n        }\r\n      }\r\n      else if (curState.successor_flag === QuestionType.part3) {\r\n        if (this.chatbotValidator.validate(message, [ValidationType.emptyValue, ValidationType.onlyDigit])) {\r\n          return this.actionProvider.handleSuccessorCount(message);\r\n        } else {\r\n          return;\r\n          // remove last message and update stepid\r\n          // return this.actionProvider.handleValidation();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //  parentsStep\r\n    if (curState.stepID === ChatStepTypes.parentsStep) {\r\n      if (curState.successor_flag === QuestionType.part1) {\r\n        return this.actionProvider.handleSuccessorInput(message);\r\n      } else if (curState.successor_flag === QuestionType.part2) {\r\n        message = message.toLowerCase();\r\n        if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n          if (message in BinaryAnswerTypeYes) {\r\n            this.disableButtons()\r\n            return this.actionProvider.handleChildAliveOption(true)\r\n          }\r\n          else if (message in BinaryAnswerTypeNo) {\r\n            this.disableButtons();\r\n            return this.actionProvider.handleChildAliveOption(false)\r\n          }\r\n          else {\r\n            alert(\"check for error\");\r\n          }\r\n        }\r\n      }\r\n      else if (curState.successor_flag === QuestionType.part3) {\r\n        if (this.chatbotValidator.validate(message, [ValidationType.emptyValue, ValidationType.onlyDigit])) {\r\n          return this.actionProvider.handleSuccessorCount(message);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      if (curState.parent_flag === QuestionType.part1) {\r\n        return this.actionProvider.handleParentsInput(message);\r\n      }\r\n      else if (curState.parent_flag == QuestionType.part2) {\r\n        message = message.toLowerCase();\r\n        if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n          if (message in BinaryAnswerTypeYes) {\r\n            this.disableButtons()\r\n            return this.actionProvider.handleParentAliveOption(true)\r\n          }\r\n          else if (message in BinaryAnswerTypeNo) {\r\n            this.disableButtons();\r\n            return this.actionProvider.handleParentAliveOption(false)\r\n          }\r\n          else {\r\n            alert(\"check for error\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // marriedParentsStep\r\n    if (curState.stepID === ChatStepTypes.marriedParentsStep) {\r\n      message = message.toLowerCase();\r\n      if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n        if (message in BinaryAnswerTypeYes) {\r\n          this.disableButtons()\r\n          return this.actionProvider.handleMarriedParents(true)\r\n\r\n        }\r\n        else if (message in BinaryAnswerTypeNo) {\r\n          this.disableButtons();\r\n          return this.actionProvider.handleMarriedParents(false)\r\n        }\r\n        else {\r\n          alert(\"check for error\");\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    // grandParentStep\r\n    if (curState.stepID === ChatStepTypes.grandParentStep) {\r\n      if (curState.successor_flag === QuestionType.part1) {\r\n        return this.actionProvider.handleSuccessorInput(message);\r\n      } else if (curState.successor_flag === QuestionType.part2) {\r\n        message = message.toLowerCase();\r\n        if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n          if (message in BinaryAnswerTypeYes) {\r\n            this.disableButtons()\r\n            return this.actionProvider.handleChildAliveOption(true)\r\n\r\n          }\r\n          else if (message in BinaryAnswerTypeNo) {\r\n            this.disableButtons();\r\n            return this.actionProvider.handleChildAliveOption(false)\r\n          }\r\n          else {\r\n            alert(\"check for error\");\r\n          }\r\n        }\r\n      }\r\n      else if (curState.successor_flag === QuestionType.part3) {\r\n        if (this.chatbotValidator.validate(message, [ValidationType.emptyValue, ValidationType.onlyDigit])) {\r\n          return this.actionProvider.handleSuccessorCount(message);\r\n        } else {\r\n          return;\r\n          // remove last message and update stepid\r\n          // return this.actionProvider.handleValidation();\r\n        }\r\n      }\r\n      if (curState.parent_flag === QuestionType.part1) {\r\n        return this.actionProvider.handleParentsInput(message);\r\n      }\r\n      else if (curState.parent_flag == QuestionType.part2) {\r\n        message = message.toLowerCase();\r\n        if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n          if (message in BinaryAnswerTypeYes) {\r\n            this.disableButtons()\r\n            return this.actionProvider.handleParentAliveOption(true)\r\n          }\r\n          else if (message in BinaryAnswerTypeNo) {\r\n            this.disableButtons();\r\n            return this.actionProvider.handleParentAliveOption(false)\r\n          }\r\n          else {\r\n            alert(\"check for error\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    // finalStep\r\n    if (curState.stepID === ChatStepTypes.finalStep) {\r\n      console.log(curState)\r\n      message = message.toLowerCase();\r\n      if (this.chatbotValidator.validate(message, [ValidationType.incorrectValueForBoolean])) {\r\n        if (message in BinaryAnswerTypeYes) {\r\n          this.disableButtons()\r\n          return this.actionProvider.handleFinalQuestion(true)\r\n\r\n        }\r\n        else if (message in BinaryAnswerTypeNo) {\r\n          this.disableButtons();\r\n          return this.actionProvider.handleFinalQuestion(false)\r\n        }\r\n        else {\r\n          alert(\"check for error\");\r\n        }\r\n      }\r\n      // return this.actionProvider.handleFinalQuestion(message)\r\n    }\r\n    // else {\r\n    //   return this.actionProvider.handleDefault();\r\n    //   return;\r\n    // }\r\n  }\r\n\r\n  disableButtons = () => {\r\n    const buttonElements: any = document.getElementsByClassName(\"option-selector-button\");\r\n    for (let i = 0; i < buttonElements.length; i++) {\r\n      const currentElement = buttonElements[i];\r\n      if (!currentElement.disabled)\r\n        currentElement.disabled = true\r\n      currentElement.style.pointerEvents = \"none\"\r\n    }\r\n  }\r\n\r\n  setRevertListeners = () => {\r\n    messageService.clearAllInternalSubscription();\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    const subscription = messageService.getMessageInChatbot().subscribe(message => {\r\n      this.revertState();\r\n    })\r\n    messageService.addInternalSubscription(subscription);\r\n  }\r\n  revertState = () => {\r\n\r\n\r\n    const lastState = messageService.removePreviousState();\r\n    console.log('setting state:');\r\n    console.log(lastState);\r\n\r\n    const previousStates: any = messageService.getPreviousStates();\r\n    console.log('previous States:');\r\n    console.log(previousStates);\r\n\r\n    if (lastState) {\r\n      this.actionProvider.setState((state: any) => {\r\n        state = lastState\r\n        console.log('final state');\r\n        console.log(state);\r\n\r\n\r\n        return state;\r\n      });\r\n    }\r\n  }\r\n  flagSwitch = (curState: ChatbotInterface, message: any) => {\r\n    if (curState.successor_flag === QuestionType.part1) {\r\n      return this.actionProvider.handleSuccessorInput(message);\r\n    } else if (curState.successor_flag === QuestionType.part2)\r\n      return this.actionProvider.handleChildAliveOption(message);\r\n    else if (curState.successor_flag === QuestionType.part3) {\r\n      if (this.chatbotValidator.validate(message, [ValidationType.emptyValue, ValidationType.onlyDigit])) {\r\n        return this.actionProvider.handleSuccessorCount(message);\r\n      } else {\r\n        // remove last message and update stepid\r\n        // return this.actionProvider.handleValidation();\r\n      }\r\n    }\r\n    return null\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default MessageParser;\r\n// function dispatch(arg0: { type: string; payload: any; }) {\r\n//   throw new Error(\"Function not implemented.\");\r\n// }\r\n\r\n","import { ReactElement, useRef, useState } from \"react\";\r\nimport Popover from \"@mui/material/Popover\";\r\nimport \"./ShowInfoWidget.scss\";\r\nimport LiveHelpIcon from '@mui/icons-material/LiveHelp';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// import { Typography } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: \"none\",\r\n  },\r\n  paper: {\r\n    padding: useTheme().spacing(1),\r\n    backgroundColor: \"#e8e4c9\",\r\n  },\r\n}));\r\n\r\nconst ShowInfoWidget = (props: any): ReactElement => {\r\n  const classes = useStyles();\r\n  /*\r\n   used reference to parent element for correcting the scrollbar conflict issue on popover show.\r\n   https://stackoverflow.com/questions/53985436/material-ui-unblock-scrolling-when-popover-is-opened\r\n  */\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const handlePopoverOpen = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  return (\r\n    <div className=\"infoDiv\" ref={containerRef}>\r\n      <LiveHelpIcon\r\n        className=\"InfoWidgetIcon\"\r\n        onMouseEnter={handlePopoverOpen}\r\n        onMouseLeave={handlePopoverClose}\r\n        aria-owns={open ? \"mouse-over-popover\" : undefined}\r\n        aria-haspopup=\"true\"\r\n      />\r\n\r\n      <Popover\r\n        id=\"mouse-over-popover\"\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n        container={containerRef.current}\r\n      >\r\n        <FormattedMessage id={props.text} />\r\n      </Popover>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowInfoWidget;\r\n","import { ReactElement } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport ShowInfoWidget from \"../../Custom/Widgets/ShowInfoWidget/ShowInfoWidget\";\r\n\r\nclass QuestionConstants {\r\n\r\n  TestatorQuestion = (<FormattedMessage id=\"Chatbot.TESTATOR_QUESTION\" />);\r\n\r\n  UndividedEstateQuestion = (\r\n    <FormattedMessage id=\"Chatbot.UNDIVIDED_ESTATE_QUESTION\" />\r\n  );\r\n\r\n  YesNoWidgetOptions = {\r\n    widget: \"optionSelectorWidget\",\r\n    withAvatar: true,\r\n    loading: true,\r\n    terminateLoading: true,\r\n  };\r\n\r\n  UndividedEstateResultText = (selectedOption: string): ReactElement => {\r\n    const undividedEstateResultText = (selectedOption === \"true\")\r\n      ? \"Chatbot.Yes\"\r\n      : \"Chatbot.No\";\r\n    return <FormattedMessage id={undividedEstateResultText} />;\r\n  };\r\n\r\n  NetWealthQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.NET_WEALTH_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.NET_WEALTH_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  NetWealthWarning = (<FormattedMessage id=\"Chatbot.NET_WEALTH_WARNING\" />);\r\n\r\n  UnderAgeQuestion = (<FormattedMessage id=\"Chatbot.UNDER_AGE_QUESTION\" />);\r\n\r\n  UnderAgeResultText = (selectedOption: boolean): ReactElement => {\r\n    const underAgeResultText = selectedOption\r\n      ? \"Chatbot.UnderAge\"\r\n      : \"Chatbot.NotUnderAge\";\r\n\r\n    return <FormattedMessage id={underAgeResultText} />;\r\n  };\r\n\r\n\r\n  SpouseChoiceQuestion = (<FormattedMessage id=\"Chatbot.SPOUSE_EXIST_QUESTION\" />);\r\n\r\n\r\n  SpouseQuestion = (<FormattedMessage id=\"Chatbot.SPOUSE_QUESTION\" />);\r\n\r\n\r\n  CohabitantChoiceQuestion = (<FormattedMessage id=\"Chatbot.COHABITANT_EXIST_QUESTION\" />);\r\n\r\n  CohabitantQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.COHABITANT_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.COHABITANT_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  addSuccessorQuestion1 = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorQn1\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.CHILD_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n  addSuccessorQuestion2 = (\r\n    person_id: string,\r\n    child_id_string: ReactElement\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorQn2\"\r\n          values={{ person_ID: <strong>{person_id}</strong>, children_IDs: child_id_string }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.CHILD_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  AliveQuestion = (child_id: string): ReactElement => {\r\n    return (\r\n      <FormattedMessage\r\n        id=\"Chatbot.ALIVE_CHILD\"\r\n        values={{ child_ID: child_id }}\r\n      />\r\n    );\r\n  };\r\n\r\n  AliveResultText = (selectedOption: string): ReactElement => {\r\n    const aliveResultText = selectedOption ? \"Chatbot.Yes\" : \"Chatbot.No\";\r\n\r\n    return <FormattedMessage id={aliveResultText} />;\r\n  };\r\n\r\n\r\n  addParentsQuestion1 = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addParentsQn1\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.PARENT_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  askSecondParentChoiceQuestion = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage id=\"Chatbot.SecondParentChoice\" values={{ person_ID: <strong>{person_id}</strong> }} />\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  addParentsQuestion2 = (\r\n    person_id: string,\r\n    parent_id_string: ReactElement\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addParentsQn2\"\r\n          values={{ person_ID: <strong>{person_id}</strong>, parents_IDs: parent_id_string }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.PARENT_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  MarriedParents1 = (\r\n    first_parent_id: string,\r\n    second_parent_id: string\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.marriedParents1\"\r\n          values={{ parent1_ID: <strong>{first_parent_id}</strong>, parent2_ID: <strong>{second_parent_id}</strong> }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  MarriedParents2 = (\r\n    first_parent_id: string,\r\n    second_parent_id: string\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.marriedParents2\"\r\n          values={{ parent1_ID: <strong>{first_parent_id}</strong>, parent2_ID: <strong>{second_parent_id}</strong> }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  addGrandParentsQuestion1 = (parent_id: string): ReactElement => {\r\n    return (<div>\r\n      <FormattedMessage\r\n        id=\"Chatbot.addGrandParentQn1\"\r\n        values={{ parent_id: <strong>{parent_id}</strong> }}\r\n      />\r\n    </div>)\r\n  }\r\n\r\n\r\n  addGrandParentsQuestion2 = (parent_id: string, grandparent_id_string: ReactElement): ReactElement => {\r\n    return (<div>\r\n      <FormattedMessage\r\n        id=\"Chatbot.addGrandParentQn2\"\r\n        values={{ parent_id: <strong>{parent_id}</strong>, grandParents_IDs: grandparent_id_string }}\r\n      />\r\n    </div>)\r\n  }\r\n\r\n  FinalQuestion = (<FormattedMessage id=\"Chatbot.FINAL_QUESTION\" />);\r\n\r\n  EmptyQuestion = <p></p>\r\n  DefaultText = (<FormattedMessage id=\"Chatbot.DEFAULT_TEXT\" />);\r\n\r\n\r\n\r\n  // UndividedEstateStart\r\n\r\n  TotalEstateNetValueQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.TOTAL_ESTATE_NET_VALUE_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.TOTAL_ESTATE_NET_VALUE_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  TotalEstateNetValueWarning = (<FormattedMessage id=\"Chatbot.NET_WEALTH_WARNING\" />);\r\n\r\n\r\n  OwnershipTypeQuestion = (<FormattedMessage id=\"Chatbot.FELLESEIE_QUESTION\" />)\r\n\r\n  OwnershipQuestionWidgetOptions = {\r\n    widget: \"undividedEstateWidget\",\r\n    withAvatar: true,\r\n    loading: true,\r\n    terminateLoading: true,\r\n  }\r\n\r\n  OwnershipTypeWarning = <FormattedMessage id=\"Chatbot.OptionChoiceWrongWarning\" />\r\n\r\n  DelvisFirstQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.DELVIS_SAEREIE_FIRST_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.DELVIS_SAEREIE_FIRST_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  DelvisSecondQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.DELVIS_SAEREIE_LAST_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.DELVIS_SAEREIE_LAST_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  FulltSaereieQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.FULLT_SAEREIE_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.FULLT_SAEREIE_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  UndividedEstateSpouseQuestion = (<div>\r\n    <FormattedMessage id=\"Chatbot.UNDIVIDED_SPOUSE_QUESTION\" />\r\n  </div>)\r\n\r\n  TextBeforeSucsrUndvdSpouse = (<div><FormattedMessage id=\"Chatbot.TextBeforeSucsrUndvdSpouse\" /></div>)\r\n\r\n  // UndividedEstateEnd\r\n  addSuccessorCount = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorCount\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  addSuccessorOfParentCount = (person_id: string, existing_child_id: ReactElement): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage id=\"Chatbot.addSuccessorCountExistingParent\"\r\n          values={{ person_ID: <strong>{person_id}</strong>, existing_child_ID: <strong>{existing_child_id}</strong> }} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuestionConstants;\r\n","export default class InheritanceConstants {\r\n  DESC_COHABITANT_WITHOUT_COMMON_CHILD =\r\n    \"Arvelater har ikke felles barn med samboer og vedkommende har ikke krav på arv (MED MINDRE DE VENTER FELLES BARN!).\";\r\n  DESC_NO_SPOUSE_OR_COHABITANT =\r\n    \"Arvelater etterlater hverken ektefelle eller samboer.\";\r\n  DESC_COHABITANT_NO_CLOSE_RELATIVES_2 =\r\n    \"Arvelaters nærmeste gjenlevende slektning er i tredje arvegangsklasse, men etterkommer av barnebarn av arvelaters besteforeldre. Hele arven går da til gjenlevende samboer med felles barn.\";\r\n  DESC_COHABITANT_NO_CLOSE_RELATIVES =\r\n    \"Arvelater har ingen gjenlevende slektninger i de tre første arvegangsklassene. Hele arven går da til gjenlevende samboer med felles barn.\";\r\n  DESC_SPOUSE_NO_CLOSE_RELATIVES_2 =\r\n    \"Arvelaters nærmeste gjenlevende slektning er i andre arvegangsklasse, men etterkommer av barnebarn av arvelaters besteforeldre. Hele arven går da til gjenlevende ektefellep.\";\r\n  DESC_SPOUSE_NO_CLOSE_RELATIVES =\r\n    \"Arvelater har ingen gjenlevende slektninger i de to første arvegangsklassene. Hele arven går da til gjenlevende ektefelle.\";\r\n\r\n  G = 101351;\r\n  MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN = 4 * this.G;\r\n  FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN = 1 / 4;\r\n  MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS = 6 * this.G;\r\n  FRACTION_INHERITANCE_SPOUSE_VS_PARENTS = 1 / 2;\r\n  MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN = 4 * this.G;\r\n  FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN = 0;\r\n  MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS = 4 * this.G;\r\n  FRACTION_INHERITANCE_COHABITANT_VS_PARENTS = 0;\r\n  FRACTION_PLIKTDEL = 2 / 3;\r\n  LINE_MAXIMUM_PLIKTDEL = 15 * this.G;\r\n\r\n  LAW_LINKS = {\r\n    1: \"https://lovdata.no/NL/lov/1972-03-03-5/§1\",\r\n    2: \"https://lovdata.no/NL/lov/1972-03-03-5/§2\",\r\n    3: \"https://lovdata.no/NL/lov/1972-03-03-5/§3\",\r\n    4: \"https://lovdata.no/NL/lov/1972-03-03-5/§4\",\r\n    6: \"https://lovdata.no/NL/lov/1972-03-03-5/§6\",\r\n    28: \"https://lovdata.no/NL/lov/1972-03-03-5/§28\",\r\n    36: \"https://lovdata.no/NL/lov/1972-03-03-5/§36\",\r\n    46: \"https://lovdata.no/NL/lov/1972-03-03-5/§46\",\r\n    KapittelVI: \"https://lovdata.no/pro/NL/lov/1972-03-03-5/KAPITTEL_1-7\",\r\n  };\r\n\r\n  CODE_PARAGRAPHS = {\r\n    \"1 første og annet ledd\":\r\n      \"Næraste slektsarvingar er avkomet (livsarvingane) til arvelataren.\\n\\nBarna til arvelataren arvar likt dersom ikkje anna går fram av særskilde lovreglar. Er eit barn død, går arvelotten til livsarvingane etter barnet, med lik part på kvar grein.\",\r\n    \"2 første, andre og tredje ledd\":\r\n      \"Har arvelataren ikkje livsarving, går arven til foreldra hans.\\n\\nForeldre arvar likt. Er far eller mor død, går arvelotten til hans eller hennar livsarvingar, med lik part på kvar grein.\\n\\nEr ein av foreldra død, og er det ikkje livsarving etter han, går heile arven til den andre av foreldra eller til hans eller hennar livsarvingar. Døyr arvelataren før fylte 18 år, går likevel halve arven til besteforeldra på den døde fars eller mors side eller til deira livsarvingar i samsvar med § 3, dersom foreldra ikkje var gifte med kvarandre då den første døydde eller det låg føre omstende som nemnt i § 8. Er det heller ingen slike arvingar i live, gjeld reglane i første punktum.\",\r\n    \"3 første ledd, andre punktum\":\r\n      \"Fjernare slektningar enn barnebarn til besteforeldre har likevel ikkje arverett etter loven.\",\r\n    \"3 første og annet ledd\":\r\n      \"Har arvelataren ikkje livsarving eller ektemake, og lever ikkje far eller mor, eller livsarving etter far eller mor, går arven til besteforeldra hans eller til livsarvingar etter dei, slik at reglane i § 2 andre ledd gjeld tilsvarande. Fjernare slektningar enn barnebarn til besteforeldre har likevel ikkje arverett etter loven.\\n\\nEr ein av besteforeldra død utan barn eller barnebarn i live, går arvelotten hans til den andre av besteforeldra på same side eller til barn eller barnebarn til denne. Er det ikkje arvingar på den eine sida, går heile arven til arvingane på den andre sida.\",\r\n    4: \"Arverett etter kapitlet her gjeld berre morskap eller farskap som følgjer av reglane i barnelova.​\\n\\nFaren og farsslekta tar ikkje arv etter barnet dersom det er avla med ei handling som er brotsverk mot noka føresegn i straffelovas​ §§ 291, 292 bokstav a og d, 293, 294, 295, 296, 299 bokstav a, 300 bokstav a og d, 301, 302 første punktum, 303, 312 og 314 bokstav a og som faren er dømd til fengselsstraff for utan vilkår. Dette gjeld likevel ikkje arvelott som i verdi svarar til arv eller gåve barnet har fått frå faren eller nokon i farsslekta\",\r\n    \"6 første ledd\":\r\n      \"Ektemaken har rett til fjerdeparten av arven når det er livsarvinger etter arvelateren. Minstearven skal likevel tilsvare 4 ganger grunnbeløpet i folketrygda ved dødsfallet. Er dei næraste slektsarvingane til arvelateren foreldra hans eller avkom etter desse, har ektemaken rett til halvparten av arven, likevel minst 6 ganger grunnbeløpet i folketrygda ved dødsfallet.\",\r\n    \"6 første og annet ledd\":\r\n      \"Ektemaken har rett til fjerdeparten av arven når det er livsarvinger etter arvelateren. Minstearven skal likevel tilsvare 4 ganger grunnbeløpet i folketrygda ved dødsfallet. Er dei næraste slektsarvingane til arvelateren foreldra hans eller avkom etter desse, har ektemaken rett til halvparten av arven, likevel minst 6 ganger grunnbeløpet i folketrygda ved dødsfallet.\\n\\nEr det ikkje arvingar som nemnt i første ledd, arvar ektemaken alt.\",\r\n    \"28 b første ledd\":\r\n      \"Den som var sambuar med den avdøde ved dødsfallet og har, har hatt eller ventar barn med den avdøde, har rett til arv svarande til 4 gonger grunnbeløpet i folketrygda ved dødsfallet, jamvel om det er livsarvingar etter arvelataren. Same retten til arv utan omsyn til livsarvingar har også den som har vore sambuar med den avdøde i minst dei siste fem åra før dødsfallet, dersom den avdøde har fastsett det i testament.\",\r\n    36: \"Barn av arvelataren som ikkje har fått oppfostringa si fullenda på den tid arvelataren døyr, har krav på ein sum av buet som forlott til å sikre livsopphald og utdanning dersom dette er rimeleg etter tilhøva. Storleiken av summen skal avpassast etter tilhøva. Ved avgjerda skal det m.a. takast omsyn til den arvelotten det uforsytte barnet elles får, om barnet har eigen formue, om barnet er sikra oppfostring på annan måte, og kva utgifter arvelataren har hatt til utdanning av dei andre barna sine. Er det fleire barn utan forsyting, skal kvart barn ha så mykje som er rimelig når det blir tatt omsyn til kva dei treng og til tilhøva elles.​\\n\\nHeimeverande barn som utan rimeleg vederlag har gjort særleg mykje for arvelataren, kan ved arveoppgjeret krevje å få ein sum av buet som forlott dersom dette er rimeleg etter tilhøva. Storleiken av summen skal avpassast etter tilhøva. Ved avgjerda skal det m.a. takast omsyn til den innsats barnet har gjort, dei utsikter det har i arbeidslivet, kor stor arvelott barnet elles vil få og den økonomiske stoda i det heile til barnet​ og dei andre arvingane\",\r\n    \"46 første ledd, første punktum\":\r\n      \"Har avdøde ikkje slektningar, ektemake eller sambuar som arvar han, og har han ikkje gjort testament om arven, skal nettoformuen fordelast til frivillig verksemd til fordel for barn og unge.\",\r\n  };\r\n}\r\n","export default class Person {\r\n  _id: number;\r\n  _personName = \"\";\r\n  _undividedEstateSpouse: Person | undefined;\r\n  _deceased = false;\r\n  _spouse: Person | undefined;\r\n  _cohabitant: Person | undefined;\r\n  _childrenRearing: boolean | undefined;\r\n  _underAge: boolean | undefined;\r\n\r\n  constructor(personid: string, id = 1) {\r\n    this._personName = personid;\r\n    this._id = id;\r\n  }\r\n\r\n  get person_id(): string {\r\n    return this._personName;\r\n  }\r\n\r\n  set person_id(value: string) {\r\n    this._personName = value;\r\n  }\r\n\r\n  get deceased(): boolean {\r\n    return this._deceased;\r\n  }\r\n\r\n  set deceased(value: boolean) {\r\n    this._deceased = value;\r\n  }\r\n\r\n  get undividedEstateSpouse(): Person | undefined {\r\n    return this._undividedEstateSpouse;\r\n  }\r\n\r\n  set undividedEstateSpouse(value: Person | undefined) {\r\n    this._undividedEstateSpouse = value;\r\n  }\r\n\r\n  get spouse(): Person | undefined {\r\n    return this._spouse;\r\n  }\r\n\r\n  set_spouse = (spouse: Person, add_for_both = true): void => {\r\n    if (!this._spouse) console.log(this._spouse == spouse);\r\n    else this._spouse = spouse;\r\n    if (add_for_both) spouse.set_spouse(this, false);\r\n  };\r\n\r\n  hasSurvivingSpouse = (): boolean => {\r\n    if (this._spouse !== undefined && !this._spouse._deceased) return true;\r\n    else return false;\r\n  };\r\n\r\n  get cohabitant(): Person | undefined {\r\n    return this._cohabitant;\r\n  }\r\n\r\n  set_cohabitant = (cohabitant: Person, add_for_both = true): void => {\r\n    if (!this._cohabitant) console.log(this._cohabitant == cohabitant);\r\n    else this._cohabitant = cohabitant;\r\n    if (add_for_both) cohabitant.set_cohabitant(this, false);\r\n  };\r\n\r\n  static getPerson = (id: number, personMap: Map<number, Person>) => {\r\n    const person: Person | undefined = personMap.get(id);\r\n    if (person == undefined) {\r\n      throw new Error(\"Person not found with given id:\" + id);\r\n    }\r\n    return person;\r\n  };\r\n\r\n  has_surviving_cohabitant(): boolean {\r\n    if (this._cohabitant && !this._cohabitant._deceased) return true;\r\n    else return false;\r\n  }\r\n}\r\n","import Person from \"./Person\";\r\n\r\nclass Family {\r\n  _person_dict: Record<string, Person>;\r\n\r\n  constructor() {\r\n    this._person_dict = {};\r\n  }\r\n\r\n  get_or_create_person(personID: string): Person {\r\n    if (personID in Object.keys(this._person_dict)) {\r\n      return this._person_dict[personID];\r\n    } else {\r\n      const person = new Person(personID);\r\n      this._person_dict[personID] = person;\r\n      return person;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Family;\r\n","\r\n// error:\r\n// 1- no digits in input error\r\n// 2- separatorCount error\r\n// 3- digitsBeforeSeparatorValue error\r\n// 4- unknown error, debug\r\n// 5- normal pass\r\n//\r\nconst checkSeparatorCount = (initialCurrencyValue: string): number => {\r\n    let checkSeparatorCount = 0;\r\n    for (const i of initialCurrencyValue) {\r\n        if (i == \",\" || i == \" \" || i == \".\") {\r\n            checkSeparatorCount += 1;\r\n        }\r\n    }\r\n    if (checkSeparatorCount == 0) {\r\n        return 0 // no separators, valid input, format it.\r\n    }\r\n    else if (checkSeparatorCount > 1) {\r\n        // more than 1 symbol in the entered value, invalid input, error\r\n        return 2\r\n    }\r\n    else {\r\n        return 1 // one separator, valid input.\r\n    }\r\n}\r\n\r\n\r\nconst checkDigitsBeforeSeparatorValue = (initialCurrencyValue: string): string => {\r\n    let digitsBeforeSymbol = 0;\r\n    for (const i of initialCurrencyValue) {\r\n        if (digitsBeforeSymbol > 3) {\r\n            // more than 3 digits before symbol\r\n            return \"incorrect\"\r\n        }\r\n        else if (i !== \",\" && i !== \" \" && i !== \".\") {\r\n            digitsBeforeSymbol += 1;\r\n        }\r\n        else {\r\n            digitsBeforeSymbol = 0;\r\n        }\r\n\r\n    }\r\n    return \"correct\"\r\n}\r\n\r\nconst removeTextFromCurrencyString = (inputCurrency: string): string => {\r\n    let beginningValue = \"\";\r\n    let endValue = \"\"\r\n\r\n    // match and remove extra text at the beginning\r\n    const matchesStart: RegExpMatchArray | null = inputCurrency.match(/^[\\D]{0,}/)\r\n    if (matchesStart) {\r\n        const matchStartResult = matchesStart[0];\r\n        beginningValue = inputCurrency.substring(matchStartResult.length,)\r\n    }\r\n\r\n    // match and remove extra text at the end\r\n    const matchesEnd: RegExpMatchArray | null = beginningValue.match(/[^\\d]{0,}$/)\r\n    if (matchesEnd) {\r\n        const matchEndResult = matchesEnd[0];\r\n        endValue = beginningValue.substring(0, beginningValue.length - matchEndResult.length)\r\n    }\r\n\r\n    return endValue.replace(\" \", \"\").replace(\".\", \"\").replace(\",\", \"\")\r\n}\r\n\r\nexport const ParseCurrencyStringForOutput = (unformattedCurrency: string): string => {\r\n    return new Intl.NumberFormat(\"no-NO\", {\r\n        style: \"currency\",\r\n        currency: \"NOK\",\r\n        currencyDisplay: \"narrowSymbol\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0,\r\n    }).format(Number(unformattedCurrency.replace(/[^0-9.-]+/g, \"\"))).replace(\"kr\", \"kr.\").concat(\",-\");\r\n\r\n}\r\n\r\nexport const validateCurrency = (inputCurrency: string): boolean => {\r\n    // const currencyMatchExpression = /^((\\d{1,3},)*\\d{3}|\\d{1,3})\\.\\d{2}$|^((\\d{1,3}\\.)*\\d{3}|\\d{1,3})$/;\r\n    const currencyMatchExpression = /^\\d+$/;\r\n    if (inputCurrency.match(currencyMatchExpression)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const CurrencyOutput = (inputCurrency: string): [number, string] => {\r\n\r\n    if ((/\\d/).test(inputCurrency)) {\r\n        const initialCurrencyValue: string = removeTextFromCurrencyString(inputCurrency)\r\n\r\n        let digitsBeforeSeparatorValue = \"correct\"\r\n        const separatorCount = checkSeparatorCount(initialCurrencyValue);\r\n        if (separatorCount !== 0) {\r\n            digitsBeforeSeparatorValue = checkDigitsBeforeSeparatorValue(initialCurrencyValue)\r\n        }\r\n        if ((separatorCount === 0 || separatorCount === 1) && digitsBeforeSeparatorValue === \"correct\") {\r\n            return [5, initialCurrencyValue]\r\n        }\r\n\r\n        else {\r\n            if (separatorCount === 2) {\r\n                return [2, \"separatorCount\"]\r\n            }\r\n            else if (digitsBeforeSeparatorValue === \"incorrect\") {\r\n                return [3, \"digitsBeforeSeparatorValue\"]\r\n            }\r\n            else {\r\n                return [4, \"unknown error, debug\"]\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // show error message and ask question again\r\n        return [1, \"\"]\r\n    }\r\n\r\n}\r\n","import { ChatbotInterface } from \"../ChatbotComponent/Generics\";\r\n\r\nexport class ReportUtils {\r\n  actionProvider: any;\r\n  state: ChatbotInterface;\r\n  constructor(actionProvider: any, state: ChatbotInterface) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n  }\r\n\r\n  combine_duplicates = (inheritance_fraction_list: Array<any>): Array<any> => {\r\n    const combinedList = new Map<number, any>();\r\n    for (const inheritanceFraction of inheritance_fraction_list) {\r\n      if (combinedList.has(inheritanceFraction[0])) {\r\n        const x = combinedList.get(inheritanceFraction[0]);\r\n        if (x) {\r\n          x.frac += inheritanceFraction[1];\r\n          x.chains.push(inheritanceFraction[2]);\r\n        }\r\n      } else {\r\n        combinedList.set(inheritanceFraction[0], {\r\n          person: inheritanceFraction[0],\r\n          frac: inheritanceFraction[1],\r\n          chains: [inheritanceFraction[2]],\r\n        });\r\n      }\r\n    }\r\n    const resultArray = Array.from(combinedList.values());\r\n    const arrayOfObjects = [];\r\n    for (const rArray of resultArray) {\r\n      arrayOfObjects.push(rArray);\r\n    }\r\n    return arrayOfObjects;\r\n  };\r\n\r\n  split_evenly_between_lines = (\r\n    person_list: Array<number>,\r\n    maximum_distance: number | undefined = undefined,\r\n    allow_parents = false\r\n  ): any => {\r\n    let split_fraction_list = new Array<any>();\r\n    if (person_list.length === 0) {\r\n      return split_fraction_list;\r\n    }\r\n\r\n    const split_frac = 1 / person_list.length;\r\n\r\n    for (const person of person_list) {\r\n      const personDetail = this.actionProvider.getPerson(\r\n        person,\r\n        this.state.personsMap\r\n      );\r\n      const personNode = this.actionProvider.getNode(\r\n        person,\r\n        this.state.nodeMap\r\n      );\r\n      if (personDetail._deceased) {\r\n        if (maximum_distance === 0) {\r\n          // pass\r\n        } else if (\r\n          this.actionProvider.get_class_and_distance_closest_surviving_relative(\r\n            personNode,\r\n            this.state\r\n          )[1] !== 1\r\n        ) {\r\n          if (allow_parents) {\r\n            let temp_list: any = this.split_evenly_between_lines(\r\n              personNode._parents\r\n            );\r\n            let level_sum = 0;\r\n            for (const item of temp_list) {\r\n              level_sum += item[1];\r\n            }\r\n            const interm_temp_list: typeof temp_list = [];\r\n            if (level_sum !== 1) {\r\n              for (const item of temp_list) {\r\n                interm_temp_list.push[(item[0], item[1] / level_sum, item[2])];\r\n              }\r\n              temp_list = interm_temp_list;\r\n            }\r\n\r\n            const temp_split_fraction_list: typeof split_fraction_list = [];\r\n            for (const item of temp_list) {\r\n              temp_split_fraction_list.push([\r\n                item[0],\r\n                item[1] * split_frac,\r\n                item[2] + [personDetail._personName],\r\n              ]);\r\n            }\r\n            split_fraction_list = split_fraction_list.concat(\r\n              temp_split_fraction_list\r\n            );\r\n          } else {\r\n            // pass\r\n          }\r\n        } else {\r\n          let temp_list: Array<any> = this.split_evenly_between_lines(\r\n            personNode._children\r\n          );\r\n          const temp_fraction_list: Array<any> = [];\r\n          let level_sum = 0;\r\n          for (const item of temp_list) {\r\n            level_sum += item[1];\r\n          }\r\n          if (level_sum !== 1) {\r\n            for (const item of temp_list) {\r\n              temp_fraction_list.push([\r\n                item[0],\r\n                item[1] / level_sum,\r\n                item[2].concat([personDetail._personName]),\r\n              ]);\r\n            }\r\n            temp_list = temp_fraction_list;\r\n          }\r\n          const temp_split_fraction_list: any = [];\r\n          for (const item of temp_list) {\r\n            temp_split_fraction_list.push([\r\n              item[0],\r\n              item[1] * split_frac,\r\n              item[2] + [personDetail._personName],\r\n            ]);\r\n          }\r\n          split_fraction_list = split_fraction_list.concat(\r\n            temp_split_fraction_list\r\n          );\r\n          console.log(split_fraction_list);\r\n        }\r\n      } else {\r\n        split_fraction_list.push([person, split_frac, []]);\r\n      }\r\n    }\r\n    let level_sum = 0;\r\n    for (const item of split_fraction_list) level_sum += item[1];\r\n\r\n    if (level_sum !== 1) {\r\n      const temp_split_fraction_list: any = [];\r\n      for (const item of split_fraction_list) {\r\n        temp_split_fraction_list.push([item[0], item[1] / level_sum, item[2]]);\r\n      }\r\n      split_fraction_list = split_fraction_list.concat(\r\n        temp_split_fraction_list\r\n      );\r\n    }\r\n    return split_fraction_list;\r\n  };\r\n\r\n  compute_default_genealogy_splits_with_chains = (person: number): any => {\r\n    const personNode = this.actionProvider.getNode(person, this.state.nodeMap);\r\n    const [class_closest, distance_closest] =\r\n      this.actionProvider.get_class_and_distance_closest_surviving_relative(\r\n        personNode\r\n      );\r\n    if (class_closest === 1) {\r\n      return this.split_evenly_between_lines(personNode._children);\r\n    } else if (class_closest === 2) {\r\n      const firstParentSpouse = this.actionProvider.getNode(\r\n        personNode._parents[0],\r\n        this.state.nodeMap\r\n      )._spouse;\r\n      if (\r\n        !personNode._underAge ||\r\n        firstParentSpouse === personNode._parents[1]\r\n      ) {\r\n        return this.split_evenly_between_lines(personNode._parents);\r\n      } else {\r\n        return this.split_evenly_between_lines(\r\n          personNode._parents,\r\n          undefined,\r\n          true\r\n        );\r\n      }\r\n    } else if (class_closest === 3) {\r\n      const grandParent_splits = [];\r\n      personNode._parents.map((parent: number) => {\r\n        const parentNode = this.actionProvider.getNode(\r\n          parent,\r\n          this.state.nodeMap\r\n        );\r\n        grandParent_splits.push(\r\n          this.split_evenly_between_lines(parentNode._parents, 2)\r\n        );\r\n      });\r\n    } else if (class_closest === undefined || class_closest > 3) return [];\r\n  };\r\n}\r\n","import { ChatbotInterface } from \"../ChatbotComponent/Generics\";\r\nimport { NodeEntity } from \"../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nimport InheritanceConstants from \"../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { ReportUtils } from \"./ReportUtils\";\r\nimport ActionProvider from \"../ChatbotComponent/ActionProvider\";\r\nimport Person from \"../ChatbotComponent/Helper/Classes/Person\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\n\r\ninterface InheritanceCalculationInterface {\r\n  survivor: number | null;\r\n  survivor_type: string;\r\n  class_closest: number | undefined;\r\n  distance_closest: number | undefined;\r\n  old_surviving_reference_paragraphs: string;\r\n  surviving_reference_paragraphs: string;\r\n  minimum_surviving_inheritance: number;\r\n  surviving_fraction: number;\r\n  descriptive_text: string;\r\n  survivor_inheritance_sum: number;\r\n  genealogy_inheritance_sum: number;\r\n  splits_with_chains: [];\r\n  genealogy_inheritance: [];\r\n}\r\n// interface inheritanceFractionListType {\r\n//   person: number;\r\n//   frac: number;\r\n//   chains: Array<any>;\r\n// }\r\nexport class InheritanceCalculation implements InheritanceCalculationInterface {\r\n  state: ChatbotInterface;\r\n  InheritanceConstants: any;\r\n  actionProvider: ActionProvider;\r\n  person: NodeEntity;\r\n  survivor: number | null = null;\r\n  survivor_type = \"\";\r\n  class_closest: number | undefined;\r\n  distance_closest: number | undefined;\r\n  old_surviving_reference_paragraphs = \"\";\r\n  surviving_reference_paragraphs = \"\";\r\n  minimum_surviving_inheritance = 0;\r\n  surviving_fraction = 0;\r\n  descriptive_text = \"\";\r\n  survivor_inheritance_sum = 0;\r\n  genealogy_inheritance_sum = 0;\r\n  splits_with_chains: [] = [];\r\n  genealogy_inheritance: any = [];\r\n  genealogy_splits: [] = [];\r\n  will: string | undefined;\r\n  reportUtils: any;\r\n  constructor(\r\n    person: number,\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface,\r\n    will = undefined\r\n  ) {\r\n    this.state = state;\r\n    this.InheritanceConstants = InheritanceConstants;\r\n    this.actionProvider = actionProvider;\r\n    this.person = actionProvider.getNode(person, this.state.nodeMap);\r\n    this.will = will;\r\n    this.reportUtils = new ReportUtils(actionProvider, state);\r\n  }\r\n\r\n  computeInheritance = () => {\r\n    [this.class_closest, this.distance_closest] =\r\n      this.actionProvider.get_class_and_distance_closest_surviving_relative(\r\n        this.state.testator,\r\n        this.state\r\n      );\r\n\r\n    if (this.person.has_surviving_spouse()) {\r\n      // TODO define has_surviving_spouse in NodeEntity.ts\r\n      this.survivor = this.person._spouse;\r\n      this.survivor_type = intl.formatMessage({\r\n        id: \"REPORT.Inheritance.survivorType1\",\r\n      });\r\n\r\n      if (this.class_closest === undefined || this.class_closest > 2) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n        });\r\n        this.surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.surviving_reference_paragraphs_9annet\",\r\n        });\r\n        this.minimum_surviving_inheritance = 0;\r\n        this.surviving_fraction = 1;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DESC_SPOUSE_NO_CLOSE_RELATIVES\",\r\n        });\r\n      } else if (this.class_closest === 1) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n        });\r\n        this.surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_8forste\",\r\n        });\r\n        this.minimum_surviving_inheritance =\r\n          this.InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n        this.surviving_fraction =\r\n          this.InheritanceConstants.FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText4G\",\r\n        });\r\n      } else if (this.class_closest === 2) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n        });\r\n        this.surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_9forste\",\r\n        });\r\n        this.minimum_surviving_inheritance =\r\n          this.InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS;\r\n        this.surviving_fraction =\r\n          this.InheritanceConstants.FRACTION_INHERITANCE_SPOUSE_VS_PARENTS;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText6G\",\r\n        });\r\n      }\r\n    } else if (this.person.has_surviving_cohabitant()) {\r\n      this.survivor = this.person._cohabitant;\r\n      this.survivor_type = intl.formatMessage({\r\n        id: \"Report.Inheritance.survivorType2\",\r\n      });\r\n\r\n      if (this.class_closest === undefined || this.class_closest > 3) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n        });\r\n        this.surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n        });\r\n        this.minimum_surviving_inheritance = 0;\r\n        this.surviving_fraction = 1;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DESC_COHABITANT_NO_CLOSE_RELATIVES\",\r\n        });\r\n      } else if (this.class_closest === 1) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n        });\r\n        this.surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n        });\r\n        this.minimum_surviving_inheritance =\r\n          this.InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN;\r\n        this.surviving_fraction =\r\n          this.InheritanceConstants.FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText_firstClass_cohab_4G\",\r\n        });\r\n      } else if (this.class_closest === 2) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n        });\r\n        this.surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n        });\r\n        this.minimum_surviving_inheritance =\r\n          this.InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS;\r\n        this.surviving_fraction =\r\n          this.InheritanceConstants.FRACTION_INHERITANCE_COHABITANT_VS_PARENTS;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText_secondClass_cohab_4G\",\r\n        });\r\n      } else if (this.class_closest === 3) {\r\n        if (this.distance_closest && this.distance_closest <= 2) {\r\n          this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n          });\r\n          this.surviving_reference_paragraphs = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n          });\r\n          this.minimum_surviving_inheritance = 4 * this.InheritanceConstants.G;\r\n          this.surviving_fraction = 0;\r\n          this.descriptive_text = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.DescriptiveText_thirdClass_cohab_4G\",\r\n          });\r\n        } else {\r\n          this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n          });\r\n          this.surviving_reference_paragraphs = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n          });\r\n          this.minimum_surviving_inheritance = 0;\r\n          this.surviving_fraction = 1;\r\n          this.descriptive_text = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.DESC_COHABITANT_NO_CLOSE_RELATIVES_2\",\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      this.survivor = null;\r\n      this.surviving_reference_paragraphs = \"\";\r\n      this.minimum_surviving_inheritance = 0;\r\n      this.surviving_fraction = 0;\r\n      this.descriptive_text = intl.formatMessage({\r\n        id: \"REPORT.Inheritance.DESC_NO_SPOUSE_OR_COHABITANT\",\r\n      });\r\n    }\r\n  };\r\n\r\n  compute_default_genealogy_splits_with_chains = (person: number) => {\r\n    //\r\n    const personNode = this.actionProvider.getNode(person, this.state.nodeMap);\r\n    const personDetail = this.actionProvider.getPerson(\r\n      person,\r\n      this.state.personsMap\r\n    );\r\n    const [closest_class, closest_distance] =\r\n      this.actionProvider.get_class_and_distance_closest_surviving_relative(\r\n        personNode,\r\n        this.state\r\n      );\r\n    if (closest_class === 1) {\r\n      return this.reportUtils.split_evenly_between_lines(personNode._children);\r\n    } else if (closest_class === 2) {\r\n      const firstParentNode = this.actionProvider.getNode(\r\n        personNode._parents[0],\r\n        this.state.nodeMap\r\n      );\r\n      if (\r\n        !personDetail._underAge ||\r\n        firstParentNode._spouse === personNode._parents[1]\r\n      ) {\r\n        return this.reportUtils.split_evenly_between_lines(personNode._parents);\r\n      } else\r\n        return this.reportUtils.split_evenly_between_lines(\r\n          personNode._parents,\r\n          undefined,\r\n          true\r\n        );\r\n    } else if (closest_class === 3) {\r\n      const grandparent_splits = this.reportUtils.split_evenly_between_lines(\r\n        personNode._parents,\r\n        2\r\n      );\r\n      let num;\r\n      for (const a of grandparent_splits) {\r\n        if (a.length > 0) {\r\n          num = a.length;\r\n        }\r\n      }\r\n      const temp_list = [];\r\n      for (const split of grandparent_splits) {\r\n        if (split.length > 0) {\r\n          temp_list.push([split[0]]);\r\n        }\r\n      }\r\n      const resultList = [];\r\n      for (const item of temp_list) {\r\n        resultList.push([item[0], item[1] / num, item[2]]);\r\n      }\r\n      return resultList;\r\n    } else if (closest_class === undefined || closest_class > 3) {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  computeGenealogyInheritance = (person_id: number) => {\r\n    this.survivor_inheritance_sum = Math.min(\r\n      this.state.netWealth,\r\n      Math.max(\r\n        this.minimum_surviving_inheritance,\r\n        this.surviving_fraction * this.state.netWealth\r\n      )\r\n    );\r\n    // const genealogy_inheritance: any = [];\r\n    this.genealogy_inheritance_sum =\r\n      this.state.netWealth - this.survivor_inheritance_sum;\r\n    if (this.genealogy_inheritance_sum !== 0) {\r\n      this.splits_with_chains =\r\n        this.compute_default_genealogy_splits_with_chains(person_id);\r\n      const genealogy_splits = this.reportUtils.combine_duplicates(\r\n        this.splits_with_chains\r\n      );\r\n      console.log(genealogy_splits);\r\n\r\n      genealogy_splits.map((genealogy_split: any) => {\r\n        return this.genealogy_inheritance.push([\r\n          genealogy_split.person,\r\n          genealogy_split.frac * this.genealogy_inheritance_sum,\r\n          genealogy_split.chains,\r\n        ]);\r\n      });\r\n      // for (const genealogy_split of genealogy_splits) {\r\n      //   genealogy_inheritance.push([\r\n      //     genealogy_split.person,\r\n      //     genealogy_split.frac * this.genealogy_inheritance_sum,\r\n      //     genealogy_split.chains,\r\n      //   ]);\r\n      // }\r\n    } else {\r\n      this.splits_with_chains = [];\r\n      this.genealogy_splits = [];\r\n      this.genealogy_inheritance = [];\r\n    }\r\n    return this.genealogy_inheritance;\r\n  };\r\n}\r\n","import { StyleSheet, Font} from \"@react-pdf/renderer\";\r\n\r\nFont.register({\r\n    family: 'Open Sans',\r\n    fonts: [\r\n    { src: 'https://cdn.jsdelivr.net/npm/open-sans-all@0.1.3/fonts/open-sans-regular.ttf' },\r\n    { src: 'https://cdn.jsdelivr.net/npm/open-sans-all@0.1.3/fonts/open-sans-600.ttf', fontWeight: 600 }\r\n    ]\r\n    });\r\n\r\n\r\nexport const styles = StyleSheet.create({\r\n    page: {\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n        fontFamily: \"Open Sans\"\r\n    },\r\n    section: {\r\n        margin: 10,\r\n        padding: 10,\r\n    },\r\n    viewer: {\r\n        width: window.innerWidth, //the pdf viewer will take up all of the width and height\r\n        height: window.innerHeight,\r\n    },\r\n    header: {\r\n        fontSize: 12,\r\n        marginBottom: 20,\r\n        textAlign: 'center',\r\n        color: 'grey',\r\n        fontFamily: \"Open Sans\"\r\n    },\r\n    heading: {\r\n        fontSize: \"26px\",\r\n        color: '#1976d2'\r\n    },\r\n    subheading: {\r\n        fontsize: \"18px\",\r\n        color: \"#2979ff\",\r\n        fontFamily: \"Open Sans\"\r\n    },\r\n    paragraph: {\r\n        fontSize: \"12px\",\r\n        fontFamily: \"Open Sans\"\r\n    },\r\n    pageNumber: {\r\n        position: 'absolute',\r\n        fontSize: 12,\r\n        bottom: 30,\r\n        left: 0,\r\n        right: 0,\r\n        textAlign: 'center',\r\n        color: 'grey',\r\n    },\r\n    boldValue: {\r\n        fontFamily: \"Open Sans\",\r\n        fontWeight: 600\r\n    }\r\n});\r\n","import ChartNode, { NodeData } from \"./Classes/ChartNode\";\r\nimport Person from \"../../ChatbotComponent/Helper/Classes/Person\";\r\nimport { ParentChildSelector } from \"../../ChatbotComponent/Helper/Enums/ParentChildSelector\";\r\nimport { NodeEntity } from \"../../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport ChartConnector from \"./Classes/ChartConnector\";\r\nimport { Bubble } from \"./Classes/Bubble\";\r\n\r\n\r\nlet maxLevel = -999999, minLevel = 999999;\r\nconst xLevelArray = [[1], [-1, 1], [-1, 0, 1], [-2, -1, 1, 2]];\r\nlet chartNodeMap = new Map<number, ChartNode>()\r\nlet connectorArray = new Array<ChartConnector>()\r\nlet xDiff: number;\r\nlet yDiff: number;\r\nconst nodeSize = 123;\r\nlet partnerBubbleLevelMap: Map<number, Array<number>>;\r\nexport const processData = (data: any): any => {\r\n    maxLevel = -999999, minLevel = 999999;\r\n    chartNodeMap = new Map<number, ChartNode>()\r\n    connectorArray = new Array<ChartConnector>()\r\n    partnerBubbleLevelMap = new Map<number, Array<number>>();\r\n    xDiff = 180;\r\n    yDiff = 100;\r\n\r\n    // // divide nodeMap into levels\r\n    const levelMap = getLevelMap(data);\r\n    const maxLevelData = levelMap.get(maxLevel);\r\n    if (data.nodeMap.length === 0 || maxLevelData === undefined) {\r\n        return [];\r\n    }\r\n    setxLevelForMaxLevel(maxLevelData)\r\n    setxLevel(levelMap, data.nodeMap);\r\n    setNodePosition(levelMap, data.nodeMap)\r\n    return getChartNodeConnectorArray(data.nodeMap)\r\n    // const node1 = new ChartNode(\"1\", 'specialNode', new NodeData(\"a\", { right: \"right\" }), { x: 0, y: 0 }, 0)\r\n    // const node2 = new ChartNode(\"2\", 'specialNode', new NodeData(\"afasfasfas\", { left: \"left\" }), { x: 200, y: 0 }, 0)\r\n    // const connector = new ChartConnector(`1-2`, 'straight', \"1\", \"2\", '', 's_right', \"t_left\")\r\n    // return [node1, node2, connector]\r\n}\r\n\r\n\r\nconst setxLevel = (levelMap: Map<number, Array<ChartNode>>, nodeMap: Map<number, NodeEntity>) => {\r\n    const processedNodes = new Array<string>();\r\n\r\n    for (let i = maxLevel; i >= minLevel; i--) {\r\n        const currentLevelChartNodes = levelMap.get(i);\r\n\r\n        if (currentLevelChartNodes !== undefined) {\r\n            for (const node of currentLevelChartNodes) {\r\n\r\n                if (!processedNodes.includes(node.id)) {\r\n                    processedNodes.push(node.id);\r\n                }\r\n                const currentNode = NodeEntity.getNode(parseInt(node.id), nodeMap)\r\n\r\n                if (i !== maxLevel) {\r\n                    let avgXlevel = 0;\r\n                    const parentsCurrentNode = currentNode._parents;\r\n                    parentsCurrentNode.map((parent_id) => {\r\n                        const n = chartNodeMap.get(parent_id);\r\n                        if (n !== undefined) {\r\n                            avgXlevel += n.xLevel;\r\n                        }\r\n                    });\r\n                    if (parentsCurrentNode.length !== 0)\r\n                        node.xLevel = avgXlevel / parentsCurrentNode.length;\r\n                }\r\n                const partnerNodeId = currentNode._spouse ? currentNode._spouse : currentNode._cohabitant ? currentNode._cohabitant : null;\r\n                if (partnerNodeId !== null) {\r\n                    if (!processedNodes.includes(`${partnerNodeId}`)) {\r\n                        processedNodes.push(`${partnerNodeId}`);\r\n                    }\r\n\r\n                    const partnerChartNode = getChartNode(`${partnerNodeId}`);\r\n                    if (!partnerChartNode.data.pos) {\r\n                        partnerChartNode.data.pos = {};\r\n                    }\r\n                    if (!node.data.pos) {\r\n                        node.data.pos = {};\r\n                    }\r\n                    if (!partnerBubbleLevelMap.has(i)) {\r\n                        partnerBubbleLevelMap.set(i, new Array<number>())\r\n                    }\r\n                    const partnerBubbleArray = partnerBubbleLevelMap.get(i)\r\n\r\n                    if (currentNode._undividedEstateSpouse) {\r\n                        if (partnerBubbleArray) {\r\n                            if (!partnerBubbleArray.includes(partnerNodeId)) {\r\n                                partnerBubbleArray.push(partnerNodeId, currentNode._id)\r\n                            }\r\n                        }\r\n                        partnerChartNode.xLevel = node.xLevel - 0.01;\r\n                        partnerChartNode.data.pos.right = \"right\"\r\n                        node.data.pos.left = \"left\"\r\n                        if (connectorArray.filter(connector => {\r\n                            return connector.id === `e${partnerNodeId}-${currentNode._id}`\r\n                        }).length === 0) {\r\n                            const newConnector = new ChartConnector(`e${partnerNodeId}-${currentNode._id}`, 'straight', `${partnerNodeId}`, `${currentNode._id}`, '', \"s_right\", \"t_left\")\r\n                            connectorArray.push(newConnector);\r\n                        }\r\n                    } else {\r\n                        if (partnerBubbleArray) {\r\n                            if (!partnerBubbleArray.includes(partnerNodeId)) {\r\n                                partnerBubbleArray.push(currentNode._id, partnerNodeId)\r\n                            }\r\n                        }\r\n                        partnerChartNode.xLevel = node.xLevel + 0.01;\r\n                        partnerChartNode.data.pos.left = \"left\"\r\n                        node.data.pos.right = \"right\"\r\n                        if (connectorArray.filter(connector => {\r\n                            return connector.id === `e${currentNode._id}-${partnerNodeId}`\r\n                        }).length === 0) {\r\n                            const newConnector = new ChartConnector(`e${currentNode._id}-${partnerNodeId}`, 'straight', `${currentNode._id}`, `${partnerNodeId}`, '', \"s_right\", \"t_left\")\r\n                            connectorArray.push(newConnector);\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                if (currentNode._undividedEstateSpouse !== null) {\r\n                    if (!processedNodes.includes(`${currentNode._undividedEstateSpouse}`)) {\r\n                        processedNodes.push(`${currentNode._undividedEstateSpouse}`);\r\n                    }\r\n                    const partnerChartNode = getChartNode(`${currentNode._undividedEstateSpouse}`);\r\n                    if (!partnerChartNode.data.pos) {\r\n                        partnerChartNode.data.pos = {};\r\n                    }\r\n                    if (!node.data.pos) {\r\n                        node.data.pos = {};\r\n                    }\r\n                    if (!partnerBubbleLevelMap.has(i)) {\r\n                        partnerBubbleLevelMap.set(i, new Array<number>())\r\n                    }\r\n                    const partnerBubbleArray = partnerBubbleLevelMap.get(i)\r\n                    if (partnerBubbleArray) {\r\n                        if (!partnerBubbleArray.includes(currentNode._undividedEstateSpouse)) {\r\n                            if (!partnerBubbleArray.includes(currentNode._id)) {\r\n                                partnerBubbleArray.push(currentNode._id)\r\n\r\n                            }\r\n                            partnerBubbleArray.push(currentNode._undividedEstateSpouse)\r\n                        }\r\n                    }\r\n                    partnerChartNode.xLevel = node.xLevel + 0.01;\r\n                    partnerChartNode.data.pos.left = \"left\"\r\n                    node.data.pos.right = \"right\"\r\n                    if (connectorArray.filter(connector => {\r\n                        return connector.id === `e${currentNode._id}-${currentNode._undividedEstateSpouse}`\r\n                    }).length === 0) {\r\n                        const newConnector = new ChartConnector(`e${currentNode._id}-${currentNode._undividedEstateSpouse}`, 'straight', `${currentNode._id}`, `${currentNode._undividedEstateSpouse}`, '', \"s_right\", \"t_left\")\r\n                        connectorArray.push(newConnector);\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                const currentNodePath = currentNode._path;\r\n                for (let j = currentNodePath.length - 2; j >= 0; j--) {\r\n                    if (currentNodePath[j][0] === ParentChildSelector.testator &&\r\n                        (currentNodePath[j + 1][0] === ParentChildSelector.spouse ||\r\n                            currentNodePath[j + 1][0] === ParentChildSelector.cohabitant ||\r\n                            currentNodePath[j + 1][0] === ParentChildSelector.undividedSpouse)) {\r\n                        break;\r\n                    }\r\n                    processedNodes.push(currentNodePath[j][1].toString())\r\n                    let source = '', target = '';\r\n                    if (currentNodePath[j + 1][0] <= currentNodePath[j][0] || (currentNodePath[j + 1][0] === ParentChildSelector.child && currentNodePath[j][0] === ParentChildSelector.testator)) {\r\n                        source = currentNodePath[j][1].toString();\r\n                        target = currentNodePath[j + 1][1].toString();\r\n\r\n                    } else {\r\n                        source = currentNodePath[j + 1][1].toString();\r\n                        target = currentNodePath[j][1].toString();\r\n\r\n                    }\r\n                    const sourceNode = getChartNode(source)\r\n                    if (!sourceNode.data.pos) {\r\n                        sourceNode.data.pos = {};\r\n                    }\r\n                    sourceNode.data.pos.bottom = 'bottom'\r\n                    const targetNode = getChartNode(target)\r\n                    if (!targetNode.data.pos) {\r\n                        targetNode.data.pos = {};\r\n                    }\r\n                    targetNode.data.pos.top = 'top'\r\n\r\n                    if (connectorArray.filter(connector => {\r\n                        return connector.id === `e${source}-${target}`\r\n                    }).length === 0) {\r\n                        const newConnector = new ChartConnector(`e${source}-${target}`, 'straight', source, target, '', \"s_bottom\", \"t_top\")\r\n                        connectorArray.push(newConnector);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getLevelMap = (data: any) => {\r\n    const levelMap = new Map<number, Array<ChartNode>>();\r\n    // eslint-disable-next-line\r\n    data.nodeMap.forEach(function (node: NodeEntity, key: number) {\r\n        const nodeDetails = Person.getPerson(node._id, data.personsMap)\r\n\r\n        if (node._level > maxLevel) {\r\n            maxLevel = node._level;\r\n        }\r\n        if (node._level < minLevel) {\r\n            minLevel = node._level\r\n        }\r\n        if (!levelMap.has(node._level)) {\r\n            levelMap.set(node._level, new Array<ChartNode>());\r\n        }\r\n        const nodeLabel = nodeDetails._deceased ? `\\u2020 ${nodeDetails._personName}` : nodeDetails._personName\r\n        const newNode = new ChartNode(node._id.toString(), 'specialNode', new NodeData(nodeLabel,), { x: 0, y: 0 }, 0)\r\n        levelMap.get(node._level)?.push(newNode)\r\n        chartNodeMap.set(node._id, newNode)\r\n    })\r\n\r\n    return levelMap;\r\n}\r\n\r\n\r\nconst setNodePosition = (levelMap: Map<number, Array<ChartNode>>, nodeMap: any) => {\r\n    let ypos = 0;\r\n    for (let i = maxLevel; i >= minLevel; i--) {\r\n        const currentLevelChartNodes = levelMap.get(i);\r\n        // let xpos = 0;\r\n        if (currentLevelChartNodes !== undefined) {\r\n            const sortedLevelChartNode = currentLevelChartNodes.sort((a, b) => a.xLevel >= b.xLevel ? 1 : -1)\r\n            // create bubbles\r\n            const bubbles = createLevelBubble(sortedLevelChartNode, partnerBubbleLevelMap.get(i), nodeMap);\r\n\r\n            processBubbles(bubbles, ypos)\r\n        }\r\n        ypos += yDiff;\r\n    }\r\n\r\n}\r\nconst processBubbles = (bubbles: Array<Bubble>, ypos: number) => {\r\n    let xleft = 0;\r\n    const xgap = xDiff - nodeSize\r\n    let previousXRight = -10000000;\r\n\r\n    for (const bubble of bubbles) {\r\n        //\r\n        const n = bubble.elements.length;\r\n        if (bubble.parent) {\r\n            // find relative pos with parent\r\n\r\n            const parentChartNode = getChartNode(bubble.parent.toString());\r\n            let relativeXleft = parentChartNode.position.x + nodeSize / 2 - (n * nodeSize + (n - 1) * xgap) / 2;\r\n            const relativeXRight = parentChartNode.position.x + nodeSize / 2 + (n * nodeSize + (n - 1) * xgap) / 2;\r\n\r\n            if (previousXRight > relativeXleft) {\r\n                relativeXleft = previousXRight;\r\n            }\r\n            previousXRight = relativeXRight + xgap;\r\n            for (const eleID of bubble.elements) {\r\n                const element = getChartNode(eleID.toString());\r\n                element.position = { x: relativeXleft, y: ypos };\r\n                relativeXleft += xDiff;\r\n                xleft = relativeXleft;\r\n            }\r\n\r\n        } else {\r\n            // x will start from xleft\r\n            const relativeXRight = xleft + n * (xDiff);\r\n            previousXRight = relativeXRight;\r\n            for (const eleID of bubble.elements) {\r\n                const element = getChartNode(eleID.toString());\r\n                element.position = { x: xleft, y: ypos };\r\n                xleft += xDiff;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst createLevelBubble = (chartNodes: Array<ChartNode>, partnerBubble: Array<number> | undefined, nodeMap: any) => {\r\n    const bubbles = new Array<Bubble>();\r\n    let isPartnerProcessed = false;\r\n    for (const chartNode of chartNodes) {\r\n        const node = NodeEntity.getNode(parseInt(chartNode.id), nodeMap);\r\n        // check in partnerMap\r\n\r\n        if (partnerBubble && partnerBubble.includes(node._id)) {\r\n            if (isPartnerProcessed) {\r\n                continue;\r\n            }\r\n            isPartnerProcessed = true;\r\n            let partnerParent: number | undefined;\r\n            let isExistingBubble = false;\r\n            for (const partner of partnerBubble) {\r\n                const partnerNode = NodeEntity.getNode(partner, nodeMap);\r\n                const existingBubbles = bubbles.filter(bubble => {\r\n                    if (bubble.parent) {\r\n                        return partnerNode._parents.includes(bubble.parent)\r\n                    }\r\n                    return false;\r\n                });\r\n                if (existingBubbles.length !== 0) {\r\n                    // return that there is an existing bubble which will include bubble\r\n                    existingBubbles[0].elements = existingBubbles[0].elements.concat(partnerBubble);\r\n                    isExistingBubble = true;\r\n                    break;\r\n                } else {\r\n                    if (partnerNode._parents.length !== 0)\r\n                        partnerParent = partnerNode._parents[0]\r\n                }\r\n            }\r\n            if (!isExistingBubble)\r\n                bubbles.push(new Bubble(partnerBubble, partnerParent));\r\n\r\n        } else {\r\n            const existingBubble = bubbles.filter(bubble => {\r\n                if (bubble.parent) {\r\n                    return node._parents.includes(bubble.parent)\r\n                }\r\n                return false;\r\n            })\r\n            let bubble: Bubble;\r\n            if (existingBubble.length !== 0) {\r\n                bubble = existingBubble[0]\r\n                bubble.elements.push(node._id)\r\n            } else {\r\n                if (node._parents.length !== 0) bubble = new Bubble([node._id], node._parents[0]);\r\n                else bubble = new Bubble([node._id]);\r\n                bubbles.push(bubble);\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    return bubbles;\r\n}\r\nconst getChartNodeConnectorArray = (nodeMap: Map<number, NodeEntity>): Array<ChartNode | ChartConnector> => {\r\n    const finalArray = new Array<ChartNode | ChartConnector>()\r\n    // eslint-disable-next-line\r\n    chartNodeMap.forEach((value, key) => {\r\n        if (NodeEntity.getNode(parseInt(value.id), nodeMap)._path.length !== 0)\r\n            finalArray.push(value)\r\n    })\r\n    return finalArray.concat(connectorArray)\r\n}\r\n\r\nconst setxLevelForMaxLevel = (nodeArray: Array<ChartNode>) => {\r\n    const xlevelDefault = xLevelArray[nodeArray.length - 1]\r\n    for (let i = 0; i < nodeArray.length; i++) {\r\n        nodeArray[i].xLevel = xlevelDefault[i]\r\n    }\r\n\r\n}\r\nconst getChartNode = (id: string) => {\r\n    const chartNode: ChartNode | undefined = chartNodeMap.get(parseInt(id));\r\n    if (chartNode == undefined) {\r\n        throw new Error(\"Person not found with given id:\" + id);\r\n    }\r\n    return chartNode;\r\n}\r\n\r\n","import { Popper } from \"@mui/material\";\r\nimport { Handle, Position } from \"react-flow-renderer\";\r\nimport { Textfit } from 'react-textfit';\r\n\r\nenum HandleType {\r\n  source = \"source\",\r\n  target = \"target\"\r\n}\r\n\r\nconst customHandleData = [\r\n  {\r\n    type: \"source\",\r\n    position: Position.Right,\r\n    id: \"s_right\",\r\n    style: { top: \"50%\", background: '#555' },\r\n  },\r\n  {\r\n    type: \"source\",\r\n    position: Position.Bottom,\r\n    id: \"s_bottom\",\r\n    style: { left: \"50%\", background: '#555' },\r\n  },\r\n  {\r\n    type: \"target\",\r\n    position: Position.Left,\r\n    id: \"t_left\",\r\n    style: { top: \"50%\", background: '#555' },\r\n  },\r\n  {\r\n    type: \"target\",\r\n    position: Position.Top,\r\n    id: \"t_top\",\r\n    style: { left: \"50%\", background: '#555' },\r\n  },\r\n];\r\n\r\nconst partnerNodeStyles = {\r\n  background: \"#fff\",\r\n  color: \"#000\",\r\n  padding: \"5px\",\r\n  width: \"7rem\",\r\n  height: \"1.8rem\",\r\n  borderRadius: \"3px\",\r\n  borderColor: \"midnightblue\",\r\n  borderStyle: \"solid\",\r\n  borderWidth: \"1px\",\r\n  letterSpacing: \"0.5px\",\r\n  lineHeight: 1.5,\r\n  display: \"flex\"\r\n}\r\n\r\n\r\nconst CustomNode = (totalData: any) => {\r\n  const data = totalData.data;\r\n\r\n  const isConnectable = data.isConnectable;\r\n  // eslint-disable-next-line\r\n  const handles = customHandleData.map((v, k) => {\r\n    if (check(data.pos, v.position)) {\r\n      return (\r\n        <Handle\r\n          key={v.id}\r\n          type={v.type === \"source\" ? HandleType.source : HandleType.target}\r\n          position={v.position}\r\n          id={v.id}\r\n          style={v.style}\r\n          isConnectable={isConnectable}\r\n        />\r\n      )\r\n    }\r\n  });\r\n  const labelString = deceasedFormatter(data.label)\r\n  return (\r\n    <div>\r\n      <div id={`detail_${totalData.id}`} style={partnerNodeStyles}>\r\n        <div style={{ width: \"6.8rem\", display: \"contents\" }}><Textfit style={{ margin: \"auto\", width: \"6.8rem\", textAlign: \"center\" }} max={20} mode=\"single\" forceSingleModeWidth={false}>{labelString}</Textfit></div>\r\n        {/* <Typography align=\"center\" variant=\"subtitle2\" style={{ textTransform: \"uppercase\", fontFamily: \"Helvetica\", padding: \"0 5px\" }}></Typography> */}\r\n        {handles}\r\n      </div>\r\n      <Popper style={{ position: \"absolute\", display: data.showDialog ? \"block\" : \"none\" }}\r\n        open={data.showDialog}\r\n        anchorEl={document.getElementById(`detail_${totalData.id}`)}\r\n      >{`Hi popover ${data.label}`}</Popper>\r\n    </div >\r\n  );\r\n}\r\nconst check = (data: any, pos: string): boolean => {\r\n  if (data && (\r\n    data.left === pos ||\r\n    data.right === pos ||\r\n    data.top === pos ||\r\n    data.bottom === pos\r\n  ))\r\n    return true;\r\n\r\n  return false;\r\n};\r\n\r\nconst deceasedFormatter = (personString: string) => {\r\n  // const tempArray = personString.split(\"†\");\r\n\r\n  // if (tempArray.length === 2) {\r\n  //   const spanElement = document.createElement(\"span\");\r\n  //   spanElement.innerHTML = `tempArray[0] <p style=\"color: red\">tempArray[1]</p>`\r\n  //   return spanElement\r\n  // }\r\n  return personString\r\n}\r\n\r\n\r\nexport default CustomNode","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const Genealogy = () => {\r\n  return (\r\n    <View style={styles.section} break>\r\n      <Text style={styles.subheading}>Genealogy</Text>\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const Summary = () => {\r\n  return (\r\n    <View style={styles.section} break>\r\n      <Text style={styles.subheading}>Summary</Text>\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const SurvivingPartner = () => {\r\n  const value = useContext(UserContext);\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.subheading}>Surviving Partner</Text>\r\n      <Text style={styles.paragraph}>{value.state.stepID}</Text>\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../FinalDocument\";\r\nimport { styles } from \"../../styles\";\r\nimport { Genealogy } from \"../common/genealogy/Genealogy\";\r\nimport { Summary } from \"../common/summary/Summary\";\r\nimport { SurvivingPartner } from \"../common/survivingPartner/SurvivingPartner\";\r\n\r\nexport const FirstSection = () => {\r\n  const value = useContext(UserContext);\r\n  return (\r\n    <View style={styles.section} break>\r\n      <Text style={styles.subheading}>Beregnet arv i fravær av testament</Text>\r\n      <Text style={styles.paragraph}>{value.state.stepID}</Text>\r\n      <SurvivingPartner />\r\n      <Genealogy />\r\n      <Summary />\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\n\r\nexport const SecondSection = () => {\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.subheading}>Uskiftearv</Text>\r\n      <Text style={styles.paragraph}>Legg til introduksjon her</Text>\r\n      <Text style={styles.paragraph}>Ingen uskiftesituasjon</Text>\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { Genealogy } from \"../common/genealogy/Genealogy\";\r\nimport { Summary } from \"../common/summary/Summary\";\r\nimport { SurvivingPartner } from \"../common/survivingPartner/SurvivingPartner\";\r\n\r\nexport const ThirdSection = () => {\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.subheading}>Pliktdelsarv</Text>\r\n      <SurvivingPartner />\r\n      <Genealogy />\r\n      <Summary />\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const GeneralReservations = () => {\r\n  return (\r\n    <View style={styles.section} break>\r\n      <Text style={styles.subheading}>General Reservations</Text>\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const NationalInsurance = () => {\r\n  return (\r\n    <View style={styles.section} break>\r\n      <Text style={styles.subheading}>National Insurance</Text>\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { GeneralReservations } from \"./generalReservations/GeneralReservations\";\r\nimport { NationalInsurance } from \"./nationalInsurance/NationalInsurance\";\r\n\r\nexport const FourthSection = () => {\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.subheading}>Merknader og forbehold</Text>\r\n      <NationalInsurance />\r\n      <GeneralReservations />\r\n    </View>\r\n  );\r\n};\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\ntype BoldProps = {\r\n  children: React.ReactNode; // 👈️ type children\r\n};\r\n\r\nexport const Bold = (props: BoldProps) => (\r\n  <Text style={styles.boldValue}>{props.children}</Text>\r\n);\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../FinalDocument\";\r\nimport { IntroductionUtils } from \"./IntroductionUtils\";\r\nimport { Bold } from \"../common/text-styles/Bold\";\r\n\r\nexport const IntroductionPage = () => {\r\n  const value = useContext(UserContext);\r\n\r\n  const calculatedValues = IntroductionUtils(value);\r\n  console.log(calculatedValues);\r\n\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.heading}>Beregning av arv</Text>\r\n      <Text style={styles.paragraph}>\r\n        Dette dokumentet inneholder en beregning av arv etter arvelater med\r\n        person-id <Bold>{calculatedValues.testatorName}</Bold>. Boet har en\r\n        total verdi på <Bold>{calculatedValues.currencyFormatted}</Bold>.\r\n      </Text>\r\n    </View>\r\n  );\r\n};\r\n","import { InheritanceCalculation } from \"../../../InheritanceCalculation\";\r\n\r\nexport const IntroductionUtils = (value: InheritanceCalculation) => {\r\n  const currencyFormatted = Intl.NumberFormat(\"no-NO\", {\r\n    style: \"currency\",\r\n    currency: \"NOK\",\r\n    useGrouping: true,\r\n  }).format(value.state.netWealth);\r\n\r\n  const testatorName = value.actionProvider.getPerson(\r\n    1,\r\n    value.state.personsMap\r\n  )._personName;\r\n\r\n  return {\r\n    currencyFormatted: currencyFormatted,\r\n    testatorName: testatorName,\r\n  };\r\n};\r\n","import {\r\n    Text,\r\n} from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\n\r\nexport const Footer = () => {\r\n    return (<Text style={styles.pageNumber} render={({ pageNumber, totalPages }) => (\r\n        `${pageNumber} / ${totalPages}`\r\n    )} fixed />)\r\n}","import {\r\n    Text,\r\n} from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\n\r\nexport const Header = () => {\r\n    return (<Text style={styles.header} fixed>\r\n        Arvebot\r\n    </Text>)\r\n}","import { Document, Page } from \"@react-pdf/renderer\";\r\nimport { FirstSection } from \"./Sections/firstSection/FirstSection\";\r\nimport { SecondSection } from \"./Sections/secondSection/SecondSection\";\r\nimport { ThirdSection } from \"./Sections/thirdSection/ThirdSection\";\r\nimport { FourthSection } from \"./Sections/fourthSection/FourthSection\";\r\nimport { styles } from \"./styles\";\r\nimport { IntroductionPage } from \"./Sections/introSection/IntroductionPage\";\r\nimport { Footer } from \"./Sections/common/Footer\";\r\nimport { Header } from \"./Sections/common/Header\";\r\nimport { createContext } from \"react\";\r\nimport { InheritanceCalculation } from \"../InheritanceCalculation\";\r\n\r\nexport const UserContext = createContext({} as InheritanceCalculation);\r\n// Create Document Component\r\nconst FinalDocument = (props: any) => {\r\n  console.log(props.inputData);\r\n\r\n  return (\r\n    <Document>\r\n      {/*render a single page*/}\r\n      <Page size=\"A4\" style={styles.page}>\r\n        <UserContext.Provider value={props.inputData}>\r\n          <Header />\r\n          <IntroductionPage />\r\n          <FirstSection />\r\n          <SecondSection />\r\n          <ThirdSection />\r\n          <FourthSection />\r\n          <Footer />\r\n        </UserContext.Provider>\r\n      </Page>\r\n    </Document>\r\n  );\r\n  // }\r\n  // else return <div>hello</div>\r\n};\r\nexport default FinalDocument;\r\n","import QuestionConsts from \"./Helper/Methods/QuestionConstants\";\r\nimport InheritanceConstants from \"./Helper/Methods/InheritanceConstants\";\r\nimport Person from \"./Helper/Classes/Person\";\r\nimport Family from \"./Helper/Classes/Family\";\r\nimport { ParentChildSelector } from \"./Helper/Enums/ParentChildSelector\";\r\nimport { ChatbotInterface, InitialChatbotState } from \"./Generics\";\r\nimport { ChatStepTypes, QuestionType } from \"./Helper/Enums/ChatStepTypes\";\r\nimport { ReactElement } from \"react\";\r\nimport {\r\n  CurrencyOutput,\r\n  ParseCurrencyStringForOutput,\r\n} from \"./Helper/Methods/HandleCurrency\";\r\nimport InfoMessagesWidget from \"./Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget\";\r\nimport { NodeEntity } from \"./Helper/Classes/NodeEntity\";\r\nimport chartSelector from \"../../../store/chartSelector\";\r\nimport { messageService } from \"./services/ChatbotCommunicator\";\r\nimport { InheritanceCalculation } from \"../Reports/InheritanceCalculation\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\n// import ReactPDF from '@react-pdf/renderer';\r\nimport FinalDocument from \"../Reports/PDF/FinalDocument\";\r\nimport Delayed from \"../../hooks/delayedRender\";\r\n// import _ from \"lodash\";\r\n\r\nclass ActionProvider {\r\n  createChatBotMessage: (\r\n    questionElement: ReactElement,\r\n    widget?: Record<string, unknown>\r\n  ) => ReactElement;\r\n  setState: (state: unknown) => ChatbotInterface;\r\n  createClientMessage: (messageElement: ReactElement) => ReactElement<any, any>;\r\n  QuestionConsts: QuestionConsts;\r\n  InheritanceConstants: InheritanceConstants;\r\n  family: Family;\r\n  stateRef: any;\r\n  checkstate: any = null;\r\n  isStarted = true;\r\n  glb_state: any = null;\r\n  GRANDCHILDREN_PATH_LIMIT = 4;\r\n  constructor(\r\n    createChatBotMessage: (\r\n      questionElement: ReactElement,\r\n      widget?: Record<string, unknown>\r\n    ) => ReactElement,\r\n    setStateFunc: (state: any) => any,\r\n    createClientMessage: (messageElement: ReactElement) => any,\r\n    stateRef: any\r\n  ) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n    this.QuestionConsts = new QuestionConsts();\r\n    this.InheritanceConstants = new InheritanceConstants();\r\n    this.family = new Family();\r\n    this.stateRef = stateRef;\r\n    // this.setRevertListeners()\r\n  }\r\n\r\n  setRevertListeners() {\r\n    messageService.clearAllInternalSubscription();\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    const subscription = messageService\r\n      .getMessageInChatbot()\r\n      .subscribe((message) => {\r\n        this.revertState();\r\n      });\r\n    messageService.addInternalSubscription(subscription);\r\n  }\r\n  revertState = () => {\r\n    const revertCount = localStorage.getItem(\"revertCount\");\r\n    let lastState: any;\r\n    if (revertCount) {\r\n      lastState = messageService.getPreviousState(parseInt(revertCount));\r\n    } else {\r\n      lastState = messageService.getPreviousState(0);\r\n    }\r\n\r\n    if (lastState) {\r\n      if (revertCount) {\r\n        localStorage.setItem(\r\n          \"revertCount\",\r\n          (parseInt(revertCount) + 1).toString()\r\n        );\r\n      } else {\r\n        localStorage.setItem(\"revertCount\", \"1\");\r\n      }\r\n      this.setState((state: any) => {\r\n        state = lastState;\r\n        return this.returnState(state);\r\n      });\r\n    }\r\n  };\r\n  // setPreviousStateData = (currentState: any, lastState: any) => {\r\n  //\r\n  // }\r\n\r\n  handleTestator = (testatorResponse: string): void => {\r\n    /**\r\n     *  * function for handling personID replies.\r\n     *  * stepID is updated to 2 and then proceed to wealth question.\r\n     *  * open reply, no conditions for now.\r\n     */\r\n\r\n    const undividedEstateQuestion = this.createChatBotMessage(\r\n      this.QuestionConsts.UndividedEstateQuestion,\r\n      this.QuestionConsts.YesNoWidgetOptions\r\n    );\r\n    this.setState((state: ChatbotInterface) => ({\r\n      ...state,\r\n      stepID: ChatStepTypes.testatorStep,\r\n      testator: this.createTestator(testatorResponse, state),\r\n    }));\r\n    this.setState((state: ChatbotInterface) => ({\r\n      ...state,\r\n    }));\r\n\r\n    this.addMessageToBotState(undividedEstateQuestion);\r\n  };\r\n\r\n  handleUndividedEstateChoice = (\r\n    undividedEstateChoiceResponse: boolean\r\n  ): void => {\r\n    // TODO: implement Yes/No conditions for undivided states.\r\n    // TODO: need to fix the values in object and correctly implement the whole algorithm\r\n    // TODO: check for correct text for the questions. (last step, the format of questions already available)\r\n    this.setState((state: ChatbotInterface) => {\r\n      // if (state.yesNoClickedFlag) {\r\n      // const undividedEstateResponseModifiedResult =\r\n      //   this.QuestionConsts.UndividedEstateResultText(`${undividedEstateChoiceResponse}`);\r\n      //   const undividedEstateClientMessage = this.createClientMessage(\r\n      //     undividedEstateResponseModifiedResult\r\n      //   );\r\n      //   this.addMessageToBotState(undividedEstateClientMessage);\r\n      // }\r\n      if (undividedEstateChoiceResponse) {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.undividedEstateStep,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part1,\r\n            undividedEstateChoice: undividedEstateChoiceResponse,\r\n          },\r\n        };\r\n        const totalEstateNetValueQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.TotalEstateNetValueQuestion\r\n        );\r\n        this.addMessageToBotState(totalEstateNetValueQuestion);\r\n        return this.returnState(state);\r\n      } else {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.netWealthStep,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: \"none\",\r\n            undividedEstateChoice: undividedEstateChoiceResponse,\r\n          },\r\n        };\r\n        const netWealthQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.NetWealthQuestion\r\n        );\r\n        this.addMessageToBotState(netWealthQuestion);\r\n        return this.returnState(state);\r\n      }\r\n    });\r\n  };\r\n\r\n  handleTotalEstateValueResponse = (totalEstateValueResponse: string): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const totalEstateValueQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.TotalEstateNetValueQuestion\r\n      );\r\n      const currencyIntResponse = CurrencyOutput(totalEstateValueResponse);\r\n      const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1]\r\n      );\r\n      const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n      if (currencyIntResponse[0] === 5) {\r\n        const ownershipTypeQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.OwnershipTypeQuestion,\r\n          this.QuestionConsts.OwnershipQuestionWidgetOptions\r\n        );\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part2,\r\n            totalEstateValue: parseInt(currencyIntResponse[1]),\r\n          },\r\n        };\r\n        const currencyCustom = this.createClientMessage(currencyJSX);\r\n        this.addMessageToBotState(currencyCustom);\r\n        this.addMessageToBotState(ownershipTypeQuestion);\r\n      } else {\r\n        const totalEstateWarning = this.createChatBotMessage(\r\n          this.QuestionConsts.TotalEstateNetValueWarning\r\n        );\r\n\r\n        this.addMessageToBotState(totalEstateWarning);\r\n        this.addMessageToBotState(totalEstateValueQuestion);\r\n      }\r\n\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleOwnershipResponse = (ownershipResponse: string): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (ownershipResponse === \"FELLESEIE\") {\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part6,\r\n            undividedEstateSeparateWealth:\r\n              state.undividedEstate.totalEstateValue / 2,\r\n          },\r\n\r\n          netWealth: state.undividedEstate.totalEstateValue / 2,\r\n        };\r\n        if (state.undividedEstate.undividedEstateSeparateWealth > 0) {\r\n          const undividedEstateSpouseQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.UndividedEstateSpouseQuestion\r\n          );\r\n          this.addMessageToBotState(undividedEstateSpouseQuestion);\r\n        } else {\r\n          if (\r\n            state.person !== state.testator &&\r\n            state.person._undividedEstateSpouse\r\n          ) {\r\n            const temp_class_undivided_spouse =\r\n              this.get_class_and_distance_closest_surviving_relative(\r\n                this.getNode(\r\n                  state.person._undividedEstateSpouse,\r\n                  state.nodeMap\r\n                ),\r\n                state\r\n              )[0];\r\n            if (temp_class_undivided_spouse === undefined) {\r\n              state.netWealth =\r\n                state.netWealth +\r\n                state.undividedEstate.undividedEstateSeparateWealth;\r\n              state.undividedEstate.undividedEstateSeparateWealth = 0;\r\n            }\r\n\r\n            if (state.netWealth <= 0) {\r\n              this.askFinalQuestion();\r\n            } else {\r\n              this.setState((state: ChatbotInterface) => {\r\n                state.stepID = ChatStepTypes.underAgeStep;\r\n              });\r\n              const underAgeQuestion = this.createChatBotMessage(\r\n                this.QuestionConsts.UnderAgeQuestion,\r\n                this.QuestionConsts.YesNoWidgetOptions\r\n              );\r\n              this.addMessageToBotState(underAgeQuestion);\r\n              return this.returnState(state);\r\n            }\r\n          }\r\n        }\r\n      } else if (ownershipResponse === \"DELVIS SÆREIE\") {\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part3,\r\n          },\r\n        };\r\n        const delvisFirstQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.DelvisFirstQuestion\r\n        );\r\n        this.addMessageToBotState(delvisFirstQuestion);\r\n      } else if (ownershipResponse === \"FULLT SÆREIE\") {\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part5,\r\n          },\r\n        };\r\n        const fulltSaereieQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.FulltSaereieQuestion\r\n        );\r\n        this.addMessageToBotState(fulltSaereieQuestion);\r\n      } else {\r\n        const ownershipTypeWarning = this.createChatBotMessage(\r\n          this.QuestionConsts.OwnershipTypeWarning\r\n        );\r\n        const ownershipTypeQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.OwnershipTypeQuestion,\r\n          this.QuestionConsts.OwnershipQuestionWidgetOptions\r\n        );\r\n        this.addMessageToBotState(ownershipTypeWarning);\r\n        this.addMessageToBotState(ownershipTypeQuestion);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleDelvisFirstResponse = (delvisFirstResponse: string): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const currencyIntResponse = CurrencyOutput(delvisFirstResponse);\r\n      const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1]\r\n      );\r\n      const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n      if (currencyIntResponse[0] === 5) {\r\n        const currencyCustom = this.createClientMessage(currencyJSX);\r\n        this.addMessageToBotState(currencyCustom);\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part4,\r\n            temp_first: parseInt(currencyIntResponse[1]),\r\n          },\r\n        };\r\n        const delvisSecondQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.DelvisSecondQuestion\r\n        );\r\n        this.addMessageToBotState(delvisSecondQuestion);\r\n      } else {\r\n        const netWealthWarning = this.createChatBotMessage(\r\n          this.QuestionConsts.NetWealthWarning\r\n        );\r\n        const delvisFirstQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.DelvisFirstQuestion\r\n        );\r\n        this.addMessageToBotState(netWealthWarning);\r\n        this.addMessageToBotState(delvisFirstQuestion);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleDelvisSecondResponse = (delvisSecondResponse: string): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const currencyIntResponse = CurrencyOutput(delvisSecondResponse);\r\n      const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1]\r\n      );\r\n      const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n      if (currencyIntResponse[0] === 5) {\r\n        const currencyCustom = this.createClientMessage(currencyJSX);\r\n        this.addMessageToBotState(currencyCustom);\r\n        state.undividedEstate.temp_last = parseInt(currencyIntResponse[1]);\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part6,\r\n            undividedEstateSeparateWealth:\r\n              (state.undividedEstate.totalEstateValue -\r\n                state.undividedEstate.temp_last -\r\n                state.undividedEstate.temp_first) /\r\n                2 +\r\n              state.undividedEstate.temp_first,\r\n          },\r\n          netWealth:\r\n            (state.undividedEstate.totalEstateValue -\r\n              state.undividedEstate.temp_last -\r\n              state.undividedEstate.temp_first) /\r\n              2 +\r\n            state.undividedEstate.temp_last,\r\n        };\r\n        const undividedEstateSpouseQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.UndividedEstateSpouseQuestion\r\n        );\r\n        this.addMessageToBotState(undividedEstateSpouseQuestion);\r\n      } else {\r\n        const netWealthWarning = this.createChatBotMessage(\r\n          this.QuestionConsts.NetWealthWarning\r\n        );\r\n        const delvisSecondQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.DelvisSecondQuestion\r\n        );\r\n        this.addMessageToBotState(netWealthWarning);\r\n        this.addMessageToBotState(delvisSecondQuestion);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleFulltSaereieResponse = (fulltSaereieResponse: string): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const currencyIntResponse = CurrencyOutput(fulltSaereieResponse);\r\n      const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1]\r\n      );\r\n      const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n      if (currencyIntResponse[0] === 5) {\r\n        const currencyCustom = this.createClientMessage(currencyJSX);\r\n        this.addMessageToBotState(currencyCustom);\r\n        state = {\r\n          ...state,\r\n          undividedEstate: {\r\n            ...state.undividedEstate,\r\n            undivided_flag: QuestionType.part6,\r\n            undividedEstateSeparateWealth:\r\n              state.undividedEstate.totalEstateValue -\r\n              parseInt(fulltSaereieResponse),\r\n          },\r\n          netWealth: parseInt(fulltSaereieResponse),\r\n        };\r\n        if (state.undividedEstate.undividedEstateSeparateWealth > 0) {\r\n          const undividedEstateSpouseQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.UndividedEstateSpouseQuestion\r\n          );\r\n          this.addMessageToBotState(undividedEstateSpouseQuestion);\r\n        }\r\n      } else {\r\n        const netWealthWarning = this.createChatBotMessage(\r\n          this.QuestionConsts.NetWealthWarning\r\n        );\r\n        const fulltSaereieQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.FulltSaereieQuestion\r\n        );\r\n        this.addMessageToBotState(netWealthWarning);\r\n        this.addMessageToBotState(fulltSaereieQuestion);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleUndividedEstateSpouse = (\r\n    undividedEstateSpouseResponse: string\r\n  ): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const undividedSpouseID = undividedEstateSpouseResponse;\r\n      if (undividedEstateSpouseResponse !== \"\") {\r\n        const newUndividedSpouse = this.createNewPerson(\r\n          undividedSpouseID,\r\n          state\r\n        );\r\n        state.person = newUndividedSpouse;\r\n        state.testator._undividedEstateSpouse = newUndividedSpouse._id;\r\n        state.testator.setPathforPartner(\r\n          ParentChildSelector.undividedSpouse,\r\n          newUndividedSpouse\r\n        );\r\n        const newUndividedSpouseDetail = Person.getPerson(\r\n          newUndividedSpouse._id,\r\n          state.personsMap\r\n        );\r\n        newUndividedSpouseDetail._deceased = true;\r\n        const textBeforeSucsrUndvdSpouse = this.createChatBotMessage(\r\n          this.QuestionConsts.TextBeforeSucsrUndvdSpouse\r\n        );\r\n        this.addMessageToBotState(textBeforeSucsrUndvdSpouse);\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.undividedEstateStep,\r\n          successor_flag: QuestionType.part3,\r\n          temp_person: newUndividedSpouse,\r\n        };\r\n\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorCount(\r\n            newUndividedSpouseDetail._personName\r\n          )\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n        return this.returnState(state);\r\n      } else {\r\n        const spouseChoiceQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.SpouseChoiceQuestion,\r\n          this.QuestionConsts.YesNoWidgetOptions\r\n        );\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.spouseChoice,\r\n        };\r\n        this.addMessageToBotState(spouseChoiceQuestion);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleNetWealth(currencyResponse: string): void {\r\n    /**\r\n     *  * function for handling wealth replies.\r\n     *  * stepID is updated to 3 and then proceed to underage question.\r\n     *  * conditions for reply in currencyDisplayValue function.\r\n     */\r\n    this.setState((state: ChatbotInterface) => {\r\n      const netWealthQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.NetWealthQuestion\r\n      );\r\n      const currencyIntResponse = CurrencyOutput(currencyResponse);\r\n      const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1]\r\n      );\r\n      const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n      if (currencyIntResponse[0] === 5) {\r\n        const underAgeQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.UnderAgeQuestion,\r\n          this.QuestionConsts.YesNoWidgetOptions\r\n        );\r\n        const currencyCustom = this.createClientMessage(currencyJSX);\r\n        this.addMessageToBotState(currencyCustom);\r\n\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.underAgeStep,\r\n          netWealth: parseInt(currencyIntResponse[1]),\r\n        };\r\n        if (state.netWealth <= 0) {\r\n          this.askFinalQuestion();\r\n        }\r\n        this.addMessageToBotState(underAgeQuestion);\r\n      } else {\r\n        const netWealthWarning = this.createChatBotMessage(\r\n          this.QuestionConsts.NetWealthWarning\r\n        );\r\n\r\n        this.addMessageToBotState(netWealthWarning);\r\n        this.addMessageToBotState(netWealthQuestion);\r\n      }\r\n\r\n      return this.returnState(state);\r\n    });\r\n  }\r\n\r\n  handleUnderAge = (selectedOption: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      state.person = state.testator;\r\n      state.temp_person = state.testator;\r\n      this.getPerson(state.person._id, state.personsMap)._underAge =\r\n        selectedOption;\r\n      if (selectedOption) {\r\n        const cohabitantChoiceQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.CohabitantChoiceQuestion,\r\n          this.QuestionConsts.YesNoWidgetOptions\r\n        );\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.cohabitantChoice,\r\n        };\r\n        this.addMessageToBotState(cohabitantChoiceQuestion);\r\n\r\n        return this.returnState(state);\r\n      }\r\n\r\n      const spouseChoiceQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.SpouseChoiceQuestion,\r\n        this.QuestionConsts.YesNoWidgetOptions\r\n      );\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.spouseChoice,\r\n      };\r\n      this.addMessageToBotState(spouseChoiceQuestion);\r\n\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleSpouseChoice = (spouseChoice: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      // Spouse present\r\n      if (spouseChoice) {\r\n        state.stepID = ChatStepTypes.spouseStep;\r\n\r\n        const spouseQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.SpouseQuestion\r\n        );\r\n        this.addMessageToBotState(spouseQuestion);\r\n      }\r\n      // No spouse\r\n      else {\r\n        const testator = Person.getPerson(state.person._id, state.personsMap);\r\n        // is Adult, then ask for cohabitant\r\n        if (!testator._underAge && testator.spouse === undefined) {\r\n          state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.cohabitantChoice,\r\n          };\r\n          const cohabitantChoiceQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.CohabitantChoiceQuestion,\r\n            this.QuestionConsts.YesNoWidgetOptions\r\n          );\r\n          this.addMessageToBotState(cohabitantChoiceQuestion);\r\n        } else {\r\n          state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.successorStep,\r\n            successor_flag: QuestionType.part3,\r\n          };\r\n          const newSuccessorQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.addSuccessorCount(testator._personName)\r\n          );\r\n          this.addMessageToBotState(newSuccessorQuestion);\r\n        }\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleSpouseInput = (spouseResponse: string): void => {\r\n    /**\r\n     *  * function for handling spouseID replies.\r\n     *  * stepID is updated to 6 and then further conditions are evaluated next.\r\n     *  * open reply, no conditions for now.\r\n     */\r\n    const spouseID = spouseResponse;\r\n    this.setState((state: ChatbotInterface) => {\r\n      const testator = Person.getPerson(state.person._id, state.personsMap);\r\n      const newSpouse = this.createNewPerson(spouseID, state);\r\n      state.person._spouse = newSpouse._id;\r\n      state.person.setPathforPartner(ParentChildSelector.spouse, newSpouse);\r\n      if (\r\n        state.netWealth <=\r\n        this.InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN\r\n      ) {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.rearChildrenStep,\r\n        };\r\n        this.askFinalQuestion();\r\n        return this.returnState(state);\r\n      }\r\n\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.successorStep,\r\n        successor_flag: QuestionType.part3,\r\n      };\r\n      const newSuccessorQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.addSuccessorCount(testator._personName)\r\n      );\r\n      this.addMessageToBotState(newSuccessorQuestion);\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleCohabitantChoice = (cohabitantChoiceResponse: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      // if cohabitant choice is yes\r\n      if (cohabitantChoiceResponse) {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.cohabitantStep,\r\n        };\r\n        const cohabitantQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.CohabitantQuestion\r\n        );\r\n        this.addMessageToBotState(cohabitantQuestion);\r\n      }\r\n      // if cohabitant choice is no\r\n      else {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.successorStep,\r\n          successor_flag: QuestionType.part3,\r\n        };\r\n        const testator = Person.getPerson(state.person._id, state.personsMap);\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorCount(testator._personName)\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleCohabitantInput = (cohabitantResponse: string): void => {\r\n    /**\r\n     *  * function for handling cohabitant replies.\r\n     *  * stepID is updated to 7 and then further conditions are evaluated next.\r\n     *  * open reply, no conditions for now.\r\n     */\r\n    // NodeEntity.setPathforPartner(ParentChildSelector.cohabitant, state.person._cohabitant)\r\n    const cohabitantID = cohabitantResponse;\r\n    this.setState((state: ChatbotInterface) => {\r\n      const testator = Person.getPerson(state.person._id, state.personsMap);\r\n      const newCohabitant = this.createNewPerson(cohabitantID, state);\r\n      state.person._cohabitant = newCohabitant._id;\r\n      state.person.setPathforPartner(\r\n        ParentChildSelector.cohabitant,\r\n        newCohabitant\r\n      );\r\n\r\n      if (\r\n        state.netWealth <=\r\n        this.InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN\r\n      ) {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.rearChildrenStep,\r\n        };\r\n        this.askFinalQuestion();\r\n        return this.returnState(state);\r\n      }\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.successorStep,\r\n        successor_flag: QuestionType.part3,\r\n      };\r\n      const newSuccessorQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.addSuccessorCount(testator._personName)\r\n      );\r\n      this.addMessageToBotState(newSuccessorQuestion);\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleSuccessorCount(message: string): void {\r\n    const successorCount = parseInt(message);\r\n    this.setState((state: ChatbotInterface) => {\r\n      state.temp_person._childCount = successorCount;\r\n      if (successorCount === 0) {\r\n        const parentID = state.temp_person.getParentId(state.nodeMap);\r\n        if (parentID) {\r\n          const parent = this.getNode(parentID, state.nodeMap);\r\n          state.temp_person = parent;\r\n          const successorProcessArray = state.successorProcessArray;\r\n          this.handleNoSuccessorCase(state, successorProcessArray);\r\n        } else {\r\n          this.handleClosingStep(state);\r\n        }\r\n        return this.returnState(state);\r\n      }\r\n\r\n      const questionType = state.temp_person._children.length === 0;\r\n      let itr_id = state.id;\r\n      for (let i = 0; i < state.temp_person._childCount; i++) {\r\n        const child = this.createEmptyNode(state, itr_id++);\r\n        state.temp_person.add_child(child, true);\r\n      }\r\n      state.id = itr_id;\r\n      if (\r\n        state.successorProcessArray.filter(\r\n          (t) => t[0] === state.temp_person._level\r\n        ).length === 0\r\n      ) {\r\n        state.successorProcessArray.push([state.temp_person._level, 1]);\r\n      }\r\n\r\n      state.successor_flag = QuestionType.part1;\r\n      const personName = this.getPerson(\r\n        state.temp_person._id,\r\n        state.personsMap\r\n      )._personName;\r\n      if (questionType) {\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorQuestion1(personName)\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n      } else {\r\n        const allChildrenID = this.getParentChildrenIDStrings(\r\n          state.temp_person._children,\r\n          state\r\n        );\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorQuestion2(personName, allChildrenID)\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n      }\r\n\r\n      return this.returnState(state);\r\n    });\r\n  }\r\n  handleSuccessorInput = (successorResponse: string): void => {\r\n    const child_name = successorResponse;\r\n    this.setState((state: ChatbotInterface) => {\r\n      const childID = state.temp_person.getChildUnprocessedNode();\r\n      if (childID) {\r\n        const child = this.getNode(childID, state.nodeMap);\r\n        const childDetail = this.getPerson(childID, state.personsMap);\r\n        childDetail._personName = child_name;\r\n        state = {\r\n          ...state,\r\n          successor_flag: QuestionType.part2,\r\n          temp_child: child,\r\n        };\r\n\r\n        const personId: any = Person.getPerson(\r\n          child._id,\r\n          state.personsMap\r\n        )?._personName;\r\n        const aliveQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.AliveQuestion(personId),\r\n          this.QuestionConsts.YesNoWidgetOptions\r\n        );\r\n        this.addMessageToBotState(aliveQuestion);\r\n        // }\r\n        return this.returnState(state);\r\n      } else {\r\n        // error case\r\n        console.log(\"Count of children exceeded\");\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChildAliveOption = (alive: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const child = state.temp_child;\r\n      const childDetail = this.getPerson(child._id, state.personsMap);\r\n      // const temp_person: NodeEntity = state.temp_person\r\n      const successorProcessArray = state.successorProcessArray;\r\n      if (alive) {\r\n        childDetail._deceased = false;\r\n        this.handleNoSuccessorCase(state, successorProcessArray);\r\n      } else {\r\n        // not alive\r\n        childDetail._deceased = true;\r\n        if (state.stepID === ChatStepTypes.grandParentStep) {\r\n          const generationCount = child.getGenerationCount();\r\n          if (generationCount === 2) {\r\n            this.handleNoSuccessorCase(state, successorProcessArray);\r\n            return this.returnState(state);\r\n          }\r\n        }\r\n        state = {\r\n          ...state,\r\n          successor_flag: QuestionType.part3,\r\n          temp_person: child,\r\n        };\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorCount(childDetail._personName)\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n        return this.returnState(state);\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleNoSuccessorCase = (\r\n    state: ChatbotInterface,\r\n    successorProcessArray: Array<[number, number]>\r\n  ) => {\r\n    const childItrPos =\r\n      successorProcessArray[successorProcessArray.length - 1][1];\r\n    if (childItrPos) {\r\n      if (state.temp_person._childCount > childItrPos) {\r\n        successorProcessArray[successorProcessArray.length - 1][1] =\r\n          childItrPos + 1;\r\n        // ask childid question\r\n        state.successor_flag = QuestionType.part1;\r\n        const allChildrenID = this.getParentChildrenIDStrings(\r\n          state.temp_person._children,\r\n          state\r\n        );\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorQuestion2(\r\n            this.getPerson(state.temp_person._id, state.personsMap)._personName,\r\n            allChildrenID\r\n          )\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n        return this.returnState(state);\r\n      } else if (state.temp_person._childCount === childItrPos) {\r\n        let currentParentID = state.temp_person._id;\r\n        let currentParent = NodeEntity.getNode(currentParentID, state.nodeMap);\r\n\r\n        let isCurrentParentID = true;\r\n        while (\r\n          successorProcessArray[successorProcessArray.length - 1][1] ===\r\n          currentParent._childCount\r\n        ) {\r\n          successorProcessArray.pop();\r\n          // current parent update\r\n          const currentId = currentParent.getParentId(state.nodeMap);\r\n          if (currentId) {\r\n            currentParentID = currentId;\r\n            currentParent = NodeEntity.getNode(currentParentID, state.nodeMap);\r\n          } else {\r\n            isCurrentParentID = false;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!isCurrentParentID) {\r\n          // exit case\r\n          this.handleClosingStep(state);\r\n        } else {\r\n          successorProcessArray[successorProcessArray.length - 1][1] =\r\n            successorProcessArray[successorProcessArray.length - 1][1] + 1;\r\n          // ask childid question\r\n          state.temp_person = currentParent;\r\n          const currentParentDetail = this.getPerson(\r\n            currentParentID,\r\n            state.personsMap\r\n          );\r\n          state.successor_flag = QuestionType.part1;\r\n          const allChildrenID = this.getParentChildrenIDStrings(\r\n            currentParent._children,\r\n            state\r\n          );\r\n          const newSuccessorQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.addSuccessorQuestion2(\r\n              currentParentDetail._personName,\r\n              allChildrenID\r\n            )\r\n          );\r\n          this.addMessageToBotState(newSuccessorQuestion);\r\n          return this.returnState(state);\r\n        }\r\n      } else {\r\n        throw new Error(\"state.temp_person._childCount < childItrPos case\");\r\n      }\r\n    } else {\r\n      throw new Error(\"childItrPos is null\");\r\n    }\r\n  };\r\n\r\n  handleSecondParentExists = (secondParentChoice: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (secondParentChoice) {\r\n        const temp_person = state.temp_person;\r\n        state = {\r\n          ...state,\r\n          parent_flag: QuestionType.part1,\r\n        };\r\n        const allParentsID = this.getParentChildrenIDStrings(\r\n          temp_person._parents,\r\n          state\r\n        );\r\n        const temp_person_detail = this.getPerson(\r\n          temp_person._id,\r\n          state.personsMap\r\n        );\r\n        const newParentQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addParentsQuestion2(\r\n            temp_person_detail._personName,\r\n            allParentsID\r\n          )\r\n        );\r\n        this.addMessageToBotState(newParentQuestion);\r\n      } else {\r\n        if (state.stepID !== ChatStepTypes.grandParentStep) {\r\n          this.closestSurvivingRelativeParents(false);\r\n        } else {\r\n          this.closestSurvivingRelativeGrandParents(false);\r\n        }\r\n      }\r\n      return state;\r\n    });\r\n  };\r\n\r\n  handleParentsInput = (parentResponse: string): void => {\r\n    const predecessor_id = parentResponse;\r\n    this.setState((state: ChatbotInterface) => {\r\n      const predecessor = this.createNewPerson(predecessor_id, state);\r\n      state = {\r\n        ...state,\r\n        parent_flag: QuestionType.part2,\r\n        temp_parent: predecessor,\r\n      };\r\n\r\n      state.temp_person.add_parent(predecessor, true);\r\n\r\n      const aliveQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.AliveQuestion(\r\n          Person.getPerson(predecessor._id, state.personsMap)._personName\r\n        ),\r\n        this.QuestionConsts.YesNoWidgetOptions\r\n      );\r\n      this.addMessageToBotState(aliveQuestion);\r\n\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleParentAliveOption = (alive: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const temp_parent = state.temp_parent;\r\n      const temp_parent_detail = Person.getPerson(\r\n        temp_parent._id,\r\n        state.personsMap\r\n      );\r\n      if (!alive) {\r\n        temp_parent_detail._deceased = true;\r\n        state = {\r\n          ...state,\r\n          temp_person: temp_parent,\r\n          successor_flag: QuestionType.part3,\r\n        };\r\n        temp_parent._processChildNodePos += 1;\r\n        const allChildrenID = this.getParentChildrenIDStrings(\r\n          temp_parent._children,\r\n          state\r\n        );\r\n        const newSuccessorQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addSuccessorOfParentCount(\r\n            temp_parent_detail._personName,\r\n            allChildrenID\r\n          )\r\n        );\r\n        this.addMessageToBotState(newSuccessorQuestion);\r\n        return this.returnState(state);\r\n      } else {\r\n        temp_parent_detail._deceased = false;\r\n        if (state.stepID !== ChatStepTypes.grandParentStep) {\r\n          this.closestSurvivingRelativeParents();\r\n        } else {\r\n          this.closestSurvivingRelativeGrandParents();\r\n        }\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  grandParentFirst = () => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const testatorNode = NodeEntity.getNode(state.person._id, state.nodeMap);\r\n      if (!state.deceasedParentsArray) state.deceasedParentsArray = [];\r\n\r\n      for (const parent_id of testatorNode._parents) {\r\n        if (Person.getPerson(parent_id, state.personsMap)._deceased) {\r\n          const temp_class =\r\n            this.get_class_and_distance_closest_surviving_relative(\r\n              NodeEntity.getNode(parent_id, state.nodeMap),\r\n              state\r\n            )[0];\r\n          if (temp_class !== 1) {\r\n            if (!state.deceasedParentsArray.includes(parent_id))\r\n              state.deceasedParentsArray.push(parent_id);\r\n          }\r\n        }\r\n      }\r\n      if (state.deceasedParentsArray.length !== 0) {\r\n        const temp_person = this.getNode(\r\n          state.deceasedParentsArray[0],\r\n          state.nodeMap\r\n        );\r\n        const temp_person_detail = this.getPerson(\r\n          state.deceasedParentsArray[0],\r\n          state.personsMap\r\n        );\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.grandParentStep,\r\n          parent_flag: QuestionType.part1,\r\n          temp_person: temp_person,\r\n          successor_flag: QuestionType.initialQuestion,\r\n        };\r\n        const newParentQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addParentsQuestion1(\r\n            temp_person_detail._personName\r\n          )\r\n        );\r\n        this.addMessageToBotState(newParentQuestion);\r\n      } else {\r\n        console.log(\"check situation if it arrives here\");\r\n        this.askFinalQuestion();\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n  askForNextGrandParent = () => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (state.deceasedParentsArray.length !== 0) {\r\n        const temp_person = this.getNode(\r\n          state.deceasedParentsArray[0],\r\n          state.nodeMap\r\n        );\r\n        const temp_person_detail = this.getPerson(\r\n          state.deceasedParentsArray[0],\r\n          state.personsMap\r\n        );\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.grandParentStep,\r\n          parent_flag: QuestionType.part1,\r\n          temp_person: temp_person,\r\n          successor_flag: QuestionType.initialQuestion,\r\n        };\r\n        const newParentQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.addParentsQuestion1(\r\n            temp_person_detail._personName\r\n          )\r\n        );\r\n        this.addMessageToBotState(newParentQuestion);\r\n      } else {\r\n        this.askFinalQuestion();\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  // TODO check options\r\n  handleMarriedParents = (marriedParentsResponse: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (marriedParentsResponse) {\r\n        this.set_spouse(\r\n          state.person._parents[0],\r\n          state.person._parents[1],\r\n          true\r\n        );\r\n        this.askFinalQuestion();\r\n      } else {\r\n        this.grandParentFirst();\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n  // eslint-disable-next-line\r\n  handleFinalQuestion = (finalOption: boolean): any => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (finalOption) {\r\n        const inheritanceCalculation = new InheritanceCalculation(\r\n          state.person._id,\r\n          this,\r\n          state\r\n        );\r\n        inheritanceCalculation.computeGenealogyInheritance(state.testator._id);\r\n        console.log(inheritanceCalculation);\r\n\r\n        const document = <FinalDocument inputData={inheritanceCalculation} />;\r\n        const pdfDownloadLink = (\r\n          <div>\r\n            <PDFDownloadLink document={document} fileName=\"somename.pdf\">\r\n              {({ blob, url, loading, error }) =>\r\n                loading ? \"Loading document...\" : \"Download now!\"\r\n              }\r\n            </PDFDownloadLink>\r\n          </div>\r\n        );\r\n        const pdfLink = this.createChatBotMessage(pdfDownloadLink);\r\n\r\n        this.addMessageToBotState(pdfLink);\r\n\r\n        console.log(\"prepare report and download\");\r\n      } else {\r\n        console.log(\"retry\");\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleRearChildrenResult = (rearChildrenResponse: boolean): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      state = {\r\n        ...state,\r\n        rearChildrenResponse: rearChildrenResponse,\r\n      };\r\n      this.askFinalQuestion();\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n  handleClosingStep = (state: ChatbotInterface) => {\r\n    switch (state.stepID) {\r\n      case ChatStepTypes.successorStep:\r\n        this.closestSurvivingRelativeChildren();\r\n        break;\r\n      case ChatStepTypes.parentsStep:\r\n        state.temp_person = state.person;\r\n        this.closestSurvivingRelativeParents();\r\n        break;\r\n      case ChatStepTypes.undividedEstateStep:\r\n        state.temp_person = state.person;\r\n        if (!state.isUndividedParent) {\r\n          this.closestSurvivingRelativeChildren();\r\n        } else {\r\n          this.closestSurvivingRelativeParents();\r\n        }\r\n\r\n        break;\r\n      case ChatStepTypes.grandParentStep:\r\n        state.temp_person = this.getNode(\r\n          state.deceasedParentsArray[0],\r\n          state.nodeMap\r\n        );\r\n        this.closestSurvivingRelativeGrandParents();\r\n        break;\r\n    }\r\n  };\r\n\r\n  closestSurvivingRelativeChildren = () => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      const testator = state.person;\r\n      const testatorDetail = Person.getPerson(testator._id, state.personsMap);\r\n      const temp_class_testator =\r\n        this.get_class_and_distance_closest_surviving_relative(\r\n          state.testator,\r\n          state\r\n        )[0];\r\n\r\n      if (\r\n        state.person !== state.testator &&\r\n        state.testator._undividedEstateSpouse\r\n      ) {\r\n        const temp_class_undivided_spouse =\r\n          this.get_class_and_distance_closest_surviving_relative(\r\n            this.getNode(state.testator._id, state.nodeMap),\r\n            state\r\n          )[0];\r\n        if (!(temp_class_testator && temp_class_testator !== 1)) {\r\n          state = {\r\n            ...state,\r\n            parent_flag: QuestionType.part1,\r\n            successor_flag: QuestionType.initialQuestion,\r\n            isUndividedParent: true,\r\n          };\r\n          const newParentQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.addParentsQuestion1(testatorDetail._personName)\r\n          );\r\n          this.addMessageToBotState(newParentQuestion);\r\n          return this.returnState(state);\r\n        }\r\n        if (temp_class_undivided_spouse === undefined) {\r\n          state.netWealth =\r\n            state.netWealth +\r\n            state.undividedEstate.undividedEstateSeparateWealth;\r\n          state.undividedEstate.undividedEstateSeparateWealth = 0;\r\n        }\r\n\r\n        if (state.netWealth <= 0) {\r\n          this.askFinalQuestion();\r\n        } else {\r\n          state.stepID = ChatStepTypes.underAgeStep;\r\n          const underAgeQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.UnderAgeQuestion,\r\n            this.QuestionConsts.YesNoWidgetOptions\r\n          );\r\n          this.addMessageToBotState(underAgeQuestion);\r\n          return this.returnState(state);\r\n        }\r\n      }\r\n\r\n      if (temp_class_testator === 1) {\r\n        state = {\r\n          ...state,\r\n          stepID: ChatStepTypes.rearChildrenStep,\r\n        };\r\n        // const possiblyChildrenRearing = this.createChatBotMessage(this.QuestionConsts.RearChildrenQuestion, this.QuestionConsts.RearChildrenWidgetOptions)\r\n        // this.addMessageToBotState(possiblyChildrenRearing)\r\n        this.askFinalQuestion();\r\n        return this.returnState(state);\r\n      }\r\n\r\n      if (\r\n        testator._spouse !== null &&\r\n        state.netWealth <=\r\n          this.InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS\r\n      ) {\r\n        this.askFinalQuestion();\r\n        return this.returnState(state);\r\n      }\r\n\r\n      if (\r\n        testator._cohabitant !== null &&\r\n        state.netWealth <=\r\n          this.InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS\r\n      ) {\r\n        this.askFinalQuestion();\r\n        return this.returnState(state);\r\n      }\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.parentsStep,\r\n        parent_flag: QuestionType.part1,\r\n        temp_person: state.testator,\r\n        successor_flag: QuestionType.initialQuestion,\r\n      };\r\n      const newParentQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.addParentsQuestion1(testatorDetail._personName)\r\n      );\r\n      this.addMessageToBotState(newParentQuestion);\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  getParentChildrenIDStrings = (\r\n    collection: Array<number>,\r\n    state: ChatbotInterface\r\n  ): ReactElement => {\r\n    return (\r\n      <strong>{`{{ ${collection\r\n        .map(\r\n          (child_id) => Person.getPerson(child_id, state.personsMap)._personName\r\n        )\r\n        .filter((name) => name !== \"\")\r\n        .join(\", \")} }}`}</strong>\r\n    );\r\n  };\r\n\r\n  askFinalQuestion = (): void => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.finalStep,\r\n      };\r\n      const finalQuestion = this.createChatBotMessage(\r\n        this.QuestionConsts.FinalQuestion,\r\n        this.QuestionConsts.YesNoWidgetOptions\r\n      );\r\n      this.addMessageToBotState(finalQuestion);\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  closestSurvivingRelativeParents = (isTwoParent = true) => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (isTwoParent && state.temp_person._parents.length < 2) {\r\n        // TODO\r\n        state.successor_flag = QuestionType.initialQuestion;\r\n        state.parent_flag = QuestionType.part3;\r\n        const personName = this.getPerson(\r\n          state.temp_person._id,\r\n          state.personsMap\r\n        )._personName;\r\n        const secondParentChoiceQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.askSecondParentChoiceQuestion(`${personName}`),\r\n          this.QuestionConsts.YesNoWidgetOptions\r\n        );\r\n        this.addMessageToBotState(secondParentChoiceQuestion);\r\n        return this.returnState(state);\r\n      }\r\n\r\n      if (state.person._spouse !== null) {\r\n        this.askFinalQuestion();\r\n        return this.returnState(state);\r\n      }\r\n      const temp_class = this.get_class_and_distance_closest_surviving_relative(\r\n        state.person,\r\n        state\r\n      )[0];\r\n      const eitherParentsDeceased =\r\n        state.person._parents.filter((p_id) => {\r\n          return Person.getPerson(p_id, state.personsMap)._deceased;\r\n        }).length !== 0;\r\n      const personDetail = Person.getPerson(state.person._id, state.personsMap);\r\n\r\n      // TODO change condition to stepID\r\n      if (\r\n        state.person !== state.testator &&\r\n        state.testator._undividedEstateSpouse !== null\r\n      ) {\r\n        const temp_class_undivided_spouse =\r\n          this.get_class_and_distance_closest_surviving_relative(\r\n            this.getNode(state.testator._undividedEstateSpouse, state.nodeMap),\r\n            state\r\n          )[0];\r\n        if (temp_class_undivided_spouse === undefined) {\r\n          state.netWealth =\r\n            state.netWealth +\r\n            state.undividedEstate.undividedEstateSeparateWealth;\r\n          state.undividedEstate.undividedEstateSeparateWealth = 0;\r\n        }\r\n\r\n        if (state.netWealth <= 0) {\r\n          this.askFinalQuestion();\r\n          return state;\r\n        } else {\r\n          state.stepID = ChatStepTypes.underAgeStep;\r\n          const underAgeQuestion = this.createChatBotMessage(\r\n            this.QuestionConsts.UnderAgeQuestion,\r\n            this.QuestionConsts.YesNoWidgetOptions\r\n          );\r\n          this.addMessageToBotState(underAgeQuestion);\r\n          return this.returnState(state);\r\n        }\r\n      }\r\n      if (\r\n        state.person._parents.length === 2 &&\r\n        eitherParentsDeceased &&\r\n        temp_class === 2\r\n      ) {\r\n        const parent1Detail = Person.getPerson(\r\n          state.person._parents[0],\r\n          state.personsMap\r\n        );\r\n        const parent2Detail = Person.getPerson(\r\n          state.person._parents[1],\r\n          state.personsMap\r\n        );\r\n        if (!personDetail._underAge) {\r\n          this.askFinalQuestion();\r\n          return this.returnState(state);\r\n        }\r\n        if (state.person._parents.length !== 2) {\r\n          this.askFinalQuestion();\r\n          return this.returnState(state);\r\n        }\r\n\r\n        if (parent1Detail._deceased) {\r\n          state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.marriedParentsStep,\r\n          };\r\n          const marriedParentsQn = this.createChatBotMessage(\r\n            this.QuestionConsts.MarriedParents1(\r\n              parent1Detail._personName,\r\n              parent2Detail._personName\r\n            )\r\n          );\r\n          this.addMessageToBotState(marriedParentsQn);\r\n          return this.returnState(state);\r\n        } else {\r\n          state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.marriedParentsStep,\r\n          };\r\n          const marriedParentsQn = this.createChatBotMessage(\r\n            this.QuestionConsts.MarriedParents2(\r\n              parent1Detail._personName,\r\n              parent2Detail._personName\r\n            )\r\n          );\r\n          this.addMessageToBotState(marriedParentsQn);\r\n          return this.returnState(state);\r\n        }\r\n      } else {\r\n        this.grandParentFirst();\r\n        return this.returnState(state);\r\n      }\r\n    });\r\n  };\r\n\r\n  closestSurvivingRelativeGrandParents = (isTwoParent = true) => {\r\n    this.setState((state: ChatbotInterface) => {\r\n      if (isTwoParent && state.temp_person._parents.length < 2) {\r\n        // TODO\r\n        state.successor_flag = QuestionType.initialQuestion;\r\n        state.parent_flag = QuestionType.part3;\r\n\r\n        const secondParentChoiceQuestion = this.createChatBotMessage(\r\n          this.QuestionConsts.askSecondParentChoiceQuestion(\r\n            `${state.temp_person._id}`\r\n          ),\r\n          this.QuestionConsts.YesNoWidgetOptions\r\n        );\r\n        this.addMessageToBotState(secondParentChoiceQuestion);\r\n        return this.returnState(state);\r\n      }\r\n      state.deceasedParentsArray = state.deceasedParentsArray.filter(\r\n        (item) => item !== state.deceasedParentsArray[0]\r\n      );\r\n      this.askForNextGrandParent();\r\n      return state;\r\n    });\r\n  };\r\n\r\n  // Generic functions\r\n  addMessageToBotState = (messages: any): void => {\r\n    this.setState((state: any) => {\r\n      if (Array.isArray(messages)) {\r\n        state.messages = [...state.messages, ...messages];\r\n      } else {\r\n        state.messages = [...state.messages, messages];\r\n      }\r\n      // const messageCopy = _.cloneDeep(state.messages)\r\n      // state.tempMessages = messageCopy;\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  handleDefault = (): void => {\r\n    const message = this.createChatBotMessage(this.QuestionConsts.DefaultText, {\r\n      withAvatar: true,\r\n    });\r\n\r\n    this.addMessageToBotState(message);\r\n  };\r\n\r\n  createNewPerson = (personID: string, state: any) => {\r\n    const newPerson = new Person(personID, this.generateNextID(state.id));\r\n    state.personsMap.set(newPerson._id, newPerson);\r\n    const newNode = new NodeEntity(newPerson._id, 0);\r\n    state.nodeMap.set(newNode._id, newNode);\r\n    return newNode;\r\n  };\r\n  createEmptyNode = (state: any, id: number) => {\r\n    const newPerson = new Person(\"\", id);\r\n    state.personsMap.set(newPerson._id, newPerson);\r\n    const newNode = new NodeEntity(newPerson._id, 0);\r\n    state.nodeMap.set(newNode._id, newNode);\r\n    return newNode;\r\n  };\r\n  createTestator = (personID: string, state: any) => {\r\n    const newPerson = new Person(personID, this.generateNextID(state.id));\r\n    newPerson._deceased = true;\r\n    state.personsMap.set(newPerson._id, newPerson);\r\n    const newNode = new NodeEntity(newPerson._id, 0);\r\n    newNode._path.push([ParentChildSelector.testator, newPerson._id]);\r\n    state.nodeMap.set(newNode._id, newNode);\r\n    return newNode;\r\n  };\r\n\r\n  public getPerson = (id: number, personMap: Map<number, Person>) => {\r\n    const person: Person | undefined = personMap.get(id);\r\n    if (person == undefined) {\r\n      throw new Error(\"Person not found with given id:\" + id);\r\n    }\r\n    return person;\r\n  };\r\n\r\n  getNode = (id: number, nodeMap: Map<number, NodeEntity>) => {\r\n    const node: NodeEntity | undefined = nodeMap.get(id);\r\n    if (node == undefined) {\r\n      throw new Error(\"Node not found with given id:\" + id);\r\n    }\r\n    return node;\r\n  };\r\n\r\n  generateNextID = (id: number) => {\r\n    this.setState((state: any) => {\r\n      state.id = state.id + 1;\r\n      return this.returnState(state);\r\n    });\r\n    return id;\r\n  };\r\n\r\n  set_spouse = (\r\n    firstSpouse_id: number,\r\n    secondSpouse_id: number,\r\n    add_for_both: boolean\r\n  ): void => {\r\n    this.setState((state: any) => {\r\n      NodeEntity.getNode(firstSpouse_id, state.nodeMap)._spouse =\r\n        secondSpouse_id;\r\n      if (add_for_both) {\r\n        NodeEntity.getNode(secondSpouse_id, state.nodeMap)._spouse =\r\n          firstSpouse_id;\r\n      }\r\n      return this.returnState(state);\r\n    });\r\n  };\r\n\r\n  surviving_successor_distance = (\r\n    node: NodeEntity,\r\n    state: any\r\n  ): number | undefined => {\r\n    const nodeDetail: Person = Person.getPerson(node._id, state.personsMap);\r\n\r\n    if (nodeDetail._deceased === false) return 0;\r\n    else if (node._children.length === 0) return undefined;\r\n    else {\r\n      const possible_distances: Array<number> = [];\r\n      for (const child_id of node._children) {\r\n        const temp = this.surviving_successor_distance(\r\n          NodeEntity.getNode(child_id, state.nodeMap),\r\n          state\r\n        );\r\n        if (temp != undefined) {\r\n          possible_distances.push(1 + temp);\r\n        }\r\n      }\r\n      if (possible_distances.length === 0) return undefined;\r\n      else return Math.min(...possible_distances);\r\n    }\r\n  };\r\n\r\n  get_class_and_distance_closest_surviving_relative = (\r\n    testatorNode: NodeEntity,\r\n    state: any\r\n  ): [number | undefined, number | undefined] => {\r\n    const distance = this.surviving_successor_distance(testatorNode, state);\r\n    if (distance !== undefined) return [1, distance];\r\n    else if (testatorNode._parents.length == 0) return [undefined, undefined];\r\n    else {\r\n      const alternatives: Array<Array<number | undefined>> = [];\r\n      for (const parent_id of testatorNode._parents) {\r\n        alternatives.push(\r\n          this.get_class_and_distance_closest_surviving_relative(\r\n            NodeEntity.getNode(parent_id, state.nodeMap),\r\n            state\r\n          )\r\n        );\r\n      }\r\n\r\n      alternatives.sort((a, b) => {\r\n        if (a[0] != undefined && b[0] != undefined) return a[0] - b[0];\r\n        if (a[0] == undefined && b[0] != undefined) return 1;\r\n        return -1;\r\n      });\r\n      const [closest_alternative_class, closest_alternative_distance] =\r\n        alternatives[0];\r\n\r\n      if (closest_alternative_class == undefined) {\r\n        return [undefined, undefined];\r\n      }\r\n      return [closest_alternative_class + 1, closest_alternative_distance];\r\n    }\r\n  };\r\n  check = () => {\r\n    const self = this;\r\n    if (this.isStarted) {\r\n      this.checkstate = setInterval(() => {\r\n        if (self.glb_state !== null) {\r\n          self.isStarted = false;\r\n          messageService.sendMessageFromChatbot({ detail: self.glb_state });\r\n          // close the interval\r\n          self.glb_state = null;\r\n          clearInterval(this.checkstate);\r\n        }\r\n      }, 200);\r\n    }\r\n  };\r\n  returnState = (state: any) => {\r\n    this.check();\r\n    this.glb_state = chartSelector(state);\r\n    return state;\r\n  };\r\n  handleValidation = (tempMessages: any) => {\r\n    this.setState((state: any) => {\r\n      if (tempMessages && tempMessages.length !== 0) {\r\n        state.messages = tempMessages;\r\n        return state;\r\n      }\r\n      return state;\r\n    });\r\n  };\r\n  resetChatbot = () => {\r\n    this.setState((state: any) => {\r\n      state = InitialChatbotState;\r\n      console.log(InitialChatbotState);\r\n\r\n      return this.returnState(state);\r\n    });\r\n    const initialQuestion = this.createChatBotMessage(\r\n      this.QuestionConsts.TestatorQuestion\r\n    );\r\n    this.addMessageToBotState(initialQuestion);\r\n  };\r\n\r\n  delay = (n: number) => {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, n * 1000);\r\n    });\r\n  };\r\n}\r\n\r\nexport default ActionProvider;\r\n","export default function chartSelector(state) {\r\n  return {\r\n    nodeMap: state.nodeMap,\r\n    personsMap: state.personsMap,\r\n    testator: state.testator,\r\n  };\r\n}\r\n\r\nexport function messageSelector(state) {\r\n  return {\r\n    messages: state.messages,\r\n  };\r\n}\r\n","class ChartNode {\r\n  id: string;\r\n  type: string;\r\n  data: NodeData;\r\n  position: { x: number; y: number };\r\n  xLevel: number;\r\n  draggable = false;\r\n  connectable = false;\r\n  constructor(\r\n    id: string,\r\n    type: string,\r\n    data: NodeData,\r\n    position: { x: number; y: number },\r\n    xLevel: number\r\n  ) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.data = data;\r\n    this.position = position;\r\n    this.xLevel = xLevel;\r\n  }\r\n}\r\nexport class NodeData {\r\n  label = \"\";\r\n  showDialog: boolean;\r\n  pos: {\r\n    left?: null | string;\r\n    right?: null | string;\r\n    top?: null | string;\r\n    bottom?: null | string;\r\n  };\r\n\r\n  constructor(label: string, data?: any) {\r\n    this.label = label;\r\n    this.pos = data;\r\n    this.showDialog = false;\r\n  }\r\n}\r\nexport default ChartNode;\r\n","class ChartConnector {\r\n  id: string;\r\n  type = \"smoothstep\";\r\n  source: string;\r\n  target: string;\r\n  label: string;\r\n  animated = false;\r\n  // arrowHeadType = \"arrowclosed\";\r\n  sourceHandle: string;\r\n  targetHandle: string;\r\n\r\n  constructor(\r\n    id: string,\r\n    type: string,\r\n    source: string,\r\n    target: string,\r\n    label: string,\r\n    sourceHandle = \"\",\r\n    targetHandle = \"\"\r\n  ) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.source = source;\r\n    this.target = target;\r\n    this.label = label;\r\n    this.sourceHandle = sourceHandle;\r\n    this.targetHandle = targetHandle;\r\n  }\r\n}\r\n\r\nexport default ChartConnector;\r\n","export class Bubble {\r\n  parent: number | undefined;\r\n  elements: Array<number>;\r\n  constructor(elements: Array<number>, parent?: number) {\r\n    this.elements = elements;\r\n    this.parent = parent;\r\n  }\r\n}\r\n","import { Subject, Subscription } from 'rxjs';\r\n\r\nconst chatBotDataSubject = new Subject();\r\nconst chatbotMessageSubscriptionList = new Array<Subscription>()\r\nexport const componentCommunicatorService = {\r\n\r\n    sendChatbotMessage: (message: any) => chatBotDataSubject.next(message),\r\n\r\n\r\n    getChatbotMessage: () => chatBotDataSubject.asObservable(),\r\n\r\n    addSubscription: (subscription: Subscription) => chatbotMessageSubscriptionList.push(subscription),\r\n\r\n\r\n    clearAllSubscription: () => {\r\n        chatbotMessageSubscriptionList.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        })\r\n    },\r\n\r\n\r\n};","import ReactFlow, { Background, BackgroundVariant, Controls } from \"react-flow-renderer\";\r\nimport { processData } from \"./ProcessDataForChart\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useZoomPanHelper, useUpdateNodeInternals } from \"react-flow-renderer\";\r\nimport CustomNode from \"./CustomNode\";\r\nimport ChartNode from \"./Classes/ChartNode\";\r\nimport ChartConnector from \"./Classes/ChartConnector\";\r\nimport { componentCommunicatorService } from \"../../ChatbotComponent/services/ComponentCommunicatorService\";\r\n\r\n\r\n// import { CustomDetailDialog } from \"./Classes/CustomDetailDialog\";\r\n\r\nconst flowStyles = { height: \"80vh\", width: \"60%\" };\r\nlet isHandleChange = true;\r\nconst OrgChartTree = () => {\r\n  // const result = useSelector(chartSelector);\r\n  const [result, setResult] = useState({ nodeMap: new Map(), personMap: new Map(), testator: null })\r\n  const [chartContent, setChartContent] = useState([]);\r\n  const componentWillUnmount = useRef(false)\r\n  const updateNodeInternals = useUpdateNodeInternals();\r\n\r\n  const getNodeData = () => chartContent.forEach((chartData: ChartNode | ChartConnector) => {\r\n    //\r\n    if (chartData instanceof ChartNode) {\r\n      updateNodeInternals(chartData.id)\r\n    }\r\n  })\r\n  useEffect(() => {\r\n    return () => {\r\n      componentWillUnmount.current = true\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    componentCommunicatorService.clearAllSubscription();\r\n    const subscription = componentCommunicatorService.getChatbotMessage().subscribe((data: any) => setResult(data))\r\n    componentCommunicatorService.addSubscription(subscription);\r\n    if (componentWillUnmount.current) {\r\n      componentCommunicatorService.clearAllSubscription();\r\n    }\r\n  }, [1])\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      getNodeData()\r\n    }, 500);\r\n\r\n  }, [chartContent]);\r\n  useEffect(() => {\r\n    setChartContent(processData(result))\r\n    isHandleChange = true;\r\n  }, [result])\r\n  const { fitView } = useZoomPanHelper();\r\n  const nodeTypes = {\r\n    specialNode: CustomNode,\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (isHandleChange) {\r\n      fitView();\r\n    }\r\n  });\r\n\r\n  // const onNodeMouseEnter = (event: any, node: any) => {\r\n  //   // setHoverNode(node);\r\n  //   console.log(event);\r\n\r\n  //   const dialog = new CustomDetailDialog(node, event.currentTarget, chartContent)\r\n  //   dialog.showDialog();\r\n  //   const newChartContent = [...chartContent]\r\n  //   setChartContent(newChartContent)\r\n  //   isHandleChange = false;\r\n  //   // getNodeData()\r\n  //   // setRerender(!rerender)\r\n  //   // highlightPath()\r\n\r\n  // }\r\n\r\n  // const onNodeMouseLeave = (event: any, node: any) => {\r\n  //   const dialog = new CustomDetailDialog(node, event.currentTarget, chartContent)\r\n  //   dialog.hideDialog();\r\n  //   const newChartContent = [...chartContent]\r\n  //   setChartContent(newChartContent)\r\n  //   isHandleChange = false;\r\n  //   // getNodeData()\r\n\r\n  //   // setRerender(!rerender)\r\n\r\n  // }\r\n\r\n\r\n  return (\r\n    <div id=\"ChartContainer\" style={{ height: \"100%\", paddingTop: \"3rem\" }}>\r\n      <ReactFlow\r\n        elements={chartContent}\r\n        style={flowStyles}\r\n        nodeTypes={nodeTypes}\r\n        nodesConnectable={false}\r\n        paneMoveable={false}\r\n        selectNodesOnDrag={false}\r\n        elementsSelectable={false}\r\n        nodesDraggable={false}\r\n      // onNodeMouseEnter={onNodeMouseEnter}\r\n      // onNodeMouseLeave={onNodeMouseLeave}\r\n      >\r\n        <Background variant={BackgroundVariant.Dots} gap={1} size={2} />\r\n        <Controls />\r\n\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrgChartTree;\r\n","export default __webpack_public_path__ + \"static/media/chat_button_logo.6fc97b77.svg\";","import { useEffect, useRef } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Chatbot } from \"react-chatbot-kit\";\r\nimport Config from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/Config.js\";\r\nimport MessageParser from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/MessageParser\";\r\nimport ActionProvider from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProvider\";\r\nimport OrgChartTree from \"../Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/ChartComponent\";\r\nimport \"../Components/InheritanceCalculatorComponents/OtherComponent/ChatbotToggleButton/ChatbotToggleButton.scss\";\r\nimport botIcon from \"../assets/images/chat_button_logo.svg\";\r\nimport { ReactFlowProvider } from \"react-flow-renderer\";\r\nimport { messageService } from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/services/ChatbotCommunicator.tsx\";\r\nimport { componentCommunicatorService } from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/services/ComponentCommunicatorService.tsx\";\r\n\r\nconst InheritanceCalculatorPage = () => {\r\n  let prev = \"block\";\r\n  const componentWillUnmount = useRef(false);\r\n  useEffect(() => {\r\n    messageService.clearAllExternalSubscription();\r\n    const subscription = messageService\r\n      .getMessageOutChatbot()\r\n      .subscribe(({ detail }) => {\r\n        componentCommunicatorService.sendChatbotMessage(detail);\r\n        // dispatch({\r\n        //   type: \"UPDATE_GENERIC\",\r\n        //   payload: detail,\r\n        // });\r\n      });\r\n    messageService.addExternalSubscription(subscription);\r\n    setWarningDiv();\r\n    // setRevertDiv();\r\n    addListenerToChatInputField();\r\n  }, [1]);\r\n  // useEffect(() => {\r\n  //   return () => {\r\n  //     componentWillUnmount.current = true;\r\n  //   };\r\n  // }, []);\r\n  // useEffect(() => {\r\n  //   if (componentWillUnmount.current) {\r\n  //     messageService.clearAllExternalSubscription();\r\n  //     messageService.clearAllInternalSubscription();\r\n  //   }\r\n  // }, [1]);\r\n\r\n  // localStorage.setItem(\"isRevertListenerSet\", \"false\");\r\n  // document.removeEventListener(\"revert\");\r\n  const toggleBot = () => {\r\n    const divChatBot = document.getElementsByClassName(\r\n      \"react-chatbot-kit-chat-container\"\r\n    )[0];\r\n    if (prev === \"block\") {\r\n      divChatBot.style.display = \"none\";\r\n      prev = \"none\";\r\n    } else {\r\n      divChatBot.style.display = \"block\";\r\n      prev = \"block\";\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"InheritanceCalculatorMain\" style={{ height: \"100%\" }}>\r\n      <Typography variant=\"h2\" align=\"center\">\r\n        Inheritance Calculator\r\n      </Typography>\r\n      <ReactFlowProvider>\r\n        <OrgChartTree />\r\n      </ReactFlowProvider>\r\n      {\r\n        <div className=\"chatbotContainer\">\r\n          <Chatbot\r\n            config={Config}\r\n            actionProvider={ActionProvider}\r\n            messageParser={MessageParser}\r\n          />\r\n        </div>\r\n      }\r\n      <button className=\"ChatbotToggleButton\" onClick={toggleBot}>\r\n        <img src={botIcon} />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst setRevertDiv = () => {\r\n  const chatParentElement = document.getElementsByClassName(\r\n    \"react-chatbot-kit-chat-input-container\"\r\n  )[0];\r\n  if (!document.getElementById(\"revert-div\")) {\r\n    const chatContainer = document.getElementsByClassName(\r\n      \"react-chatbot-kit-chat-container\"\r\n    )[0];\r\n    chatContainer.id = \"chat_container\";\r\n    const newDiv = document.createElement(\"div\");\r\n    newDiv.id = \"revert-div\";\r\n    const revertButton = document.createElement(\"button\");\r\n    revertButton.innerText = \"Revert\";\r\n    newDiv.appendChild(revertButton);\r\n    chatParentElement.prepend(newDiv);\r\n    revertButton.addEventListener(\"click\", ({ event }) => {\r\n      messageService.sendMessageToChatbot(\"ON CLICK\");\r\n    });\r\n  }\r\n};\r\nconst setWarningDiv = () => {\r\n  // const chatParentElement = document.getElementsByClassName(\r\n  //   \"react-chatbot-kit-chat-container\"\r\n  // )[0];\r\n\r\n  const chatParentElement = document.getElementsByClassName(\r\n    \"react-chatbot-kit-chat-input-form\"\r\n  )[0];\r\n  const newDiv = document.createElement(\"div\");\r\n  newDiv.id = \"chatbot-warning-div\";\r\n  newDiv.innerHTML = \"warning\";\r\n  newDiv.style.backgroundColor = \"red\";\r\n  newDiv.style.position = \"absolute\";\r\n  newDiv.style.bottom = \"2.5rem\";\r\n  newDiv.style.width = \"100%\";\r\n  newDiv.style.display = \"none\";\r\n  chatParentElement.prepend(newDiv);\r\n};\r\n\r\nconst addListenerToChatInputField = () => {\r\n  const chatInputField = document.getElementsByClassName(\r\n    \"react-chatbot-kit-chat-input\"\r\n  )[0];\r\n  chatInputField.addEventListener(\"input\", () => {\r\n    const warningDiv = document.getElementById(\"chatbot-warning-div\");\r\n    if (warningDiv) {\r\n      if (warningDiv.style.display === \"block\") {\r\n        warningDiv.style.display = \"none\";\r\n      }\r\n    }\r\n  });\r\n};\r\nexport default InheritanceCalculatorPage;\r\n","import { ReactElement } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// import LangButton from \"./LangButton/LangButton\";\r\n\r\ninterface propsTypes {\r\n  description: string;\r\n  title: string;\r\n}\r\n\r\nconst Copyright = (): ReactElement => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Arvebot\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  footer: {\r\n    // backgroundColor: theme.palette.background.paper,\r\n    padding: useTheme().spacing(6),\r\n    backgroundColor: \"silver\"\r\n  },\r\n}));\r\n\r\nconst Footer = (props: propsTypes): ReactElement => {\r\n  const classes = useStyles();\r\n  const { description, title } = props;\r\n\r\n  return (\r\n    <Paper className={classes.footer}>\r\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <Typography\r\n        variant=\"subtitle1\"\r\n        align=\"center\"\r\n        color=\"textSecondary\"\r\n        component=\"p\"\r\n      >\r\n        {description}\r\n      </Typography>\r\n      <Copyright />\r\n\r\n      {/* {Object.keys(props.langValue).map((lang) => (\r\n        <LangButton\r\n          key={lang}\r\n          langButtonValue={props.langValue[lang]}\r\n          sendDataToParent={props.sendDataToParent}\r\n        />\r\n      ))} */}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nFooter.propTypes = {\r\n  description: PropTypes.string,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Footer;\r\n","import { ReactElement } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst ResourcesPage = (): ReactElement => {\r\n  return (\r\n    <Typography variant=\"h2\" align=\"center\">\r\n      ResourcesPage\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default ResourcesPage;\r\n","import { ChatbotState } from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/Generics\";\r\n\r\nconst initialState = ChatbotState;\r\n\r\nconst genericReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_GENERIC\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default genericReducer;\r\n","import { createStore } from \"redux\";\r\nimport genericReducer from \"./genericReducer\";\r\n\r\nconst store = createStore(genericReducer);\r\nexport default store;\r\n","// React\r\nimport { ReactElement } from \"react\";\r\n// material-ui\r\nimport { Paper } from \"@mui/material\";\r\nimport { createTheme, ThemeProvider, StyledEngineProvider } from \"@mui/material/styles\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\n// react-router\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { IntlProvider } from \"react-intl\";\r\n// local - check in newer chrome version and remove. added polyfill because nb locale not supported in chromium>92\r\n// https://github.com/formatjs/formatjs/issues/3066\r\nimport \"@formatjs/intl-datetimeformat/polyfill-force\";\r\nimport \"@formatjs/intl-datetimeformat/locale-data/nb\";\r\nimport \"@formatjs/intl-numberformat/polyfill-force\";\r\nimport \"@formatjs/intl-numberformat/locale-data/nb\";\r\nimport \"@formatjs/intl-numberformat/locale-data/en\";\r\n//\r\n// import theme from \"./theme\";\r\nimport Header from \"./Components/Generic/Header/Header\";\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport AboutPage from \"./Pages/AboutPage\";\r\nimport InheritanceCalculatorPage from \"./Pages/InheritanceCalculatorPage.js\";\r\nimport Footer from \"./Components/Generic/Footer/Footer\";\r\n// import HomePageImage from \"./assets/images/homepage-image.jpg\";\r\nimport ResourcesPage from \"./Pages/ResourcesPage\";\r\n\r\nimport Norsk from \"./languages/translationNO.json\";\r\n// import English from \"./languages/translationEN.json\";\r\nimport store from './store/store'\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst theme = createTheme();\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // backgroundImage: `url(${HomePageImage})`,\r\n    // backgroundPosition: \"center\",\r\n    // backgroundSize: \"cover\",\r\n    // backgroundRepeat: \"no-repeat\",\r\n    height: \"100vh\",\r\n  },\r\n  rootPaper: {\r\n    marginTop: \"5rem\",\r\n    minHeight: \"100vh\",\r\n    background:\r\n      \"radial-gradient( circle farthest-corner at 10% 20%,  #FCCABD 0%, #4151C9 45.5% )\",\r\n    opacity: \"1\",\r\n  },\r\n});\r\n\r\nconst menuItems = (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={HomePage} />\r\n    <Route path=\"/about\" component={AboutPage} />\r\n    <Route path=\"/calculator\" component={InheritanceCalculatorPage} />\r\n    <Route path=\"/resources\" component={ResourcesPage} />\r\n  </Switch>\r\n);\r\n\r\nconst App = (): ReactElement => {\r\n  const classes = useStyles();\r\n  const lang = \"nb-NO\";\r\n  const langMessages = Norsk;\r\n  // const [lang, setLang] = useState(\"nb-NO\");\r\n  // const [langMessages, setLangMessages] = useState(Norsk);\r\n  // const sendDataToParent = (index) => {\r\n  //   setLang(index.code);\r\n  //   if (index.code === \"nb-NO\") {\r\n  //     setLangMessages(Norsk);\r\n  //   } else {\r\n  //     setLangMessages(English);\r\n  //   }\r\n  // };\r\n\r\n  // const LangValue = {\r\n  //   no: {\r\n  //     code: \"nb-NO\",\r\n  //     name: \"Norsk\",\r\n  //   },\r\n  //   en: {\r\n  //     code: \"en-US\",\r\n  //     name: \"English\",\r\n  //   },\r\n  // };\r\n  return (\r\n\r\n    <StyledEngineProvider injectFirst>\r\n      <ThemeProvider theme={theme}>\r\n        <IntlProvider locale={lang} messages={langMessages}>\r\n\r\n          <Paper\r\n            role=\"img\"\r\n            // className={classes.root}\r\n            aria-label=\"Image by Free-Photos from Pixabay\"\r\n          >\r\n            <Header />\r\n            <Provider store={store}>\r\n              <Paper className={classes.rootPaper}>{menuItems}</Paper>\r\n            </Provider>\r\n          </Paper>\r\n          {/* <Footer langValue={LangValue} sendDataToParent={sendDataToParent} /> */}\r\n          <Footer description=\"Arvebot\" title=\"Arvebot\" />\r\n\r\n          {/* Route components are rendered if the path prop matches the current URL */}\r\n\r\n        </IntlProvider>\r\n      </ThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// react-spring -> animations\r\n// nivo for visualisation\r\n// primary - 003049   , 264653 , 031d44\r\n// secondary - EAE2B7   ,e76f51 , d5896f\r\n","// import { StrictMode } from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./index.scss\";\r\n// import * as Sentry from \"@sentry/react\";\r\n// import { BrowserTracing } from \"@sentry/tracing\";\r\nimport App from \"./App\";\r\nimport { render } from \"react-dom\";\r\n\r\n/***\r\n** Uncomment for sentry logging\r\nSentry.init({\r\n  dsn: \"https://4ee9eb855a3d475eba0981e5e96f4090@o1245495.ingest.sentry.io/6402725\",\r\n  integrations: [new BrowserTracing()],\r\n\r\n  tracesSampleRate: 1.0,\r\n});\r\n*/\r\nrender(\r\n  // <StrictMode>\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  // </StrictMode>,\r\n  document.getElementById(\"app\")\r\n);\r\n"],"sourceRoot":""}