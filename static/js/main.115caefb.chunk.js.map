{"version":3,"sources":["Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/ChatStepTypes.ts","Components/Generic/Header/HeaderTitle/HeaderTitle.tsx","Components/Generic/Header/HeaderMenu/MenuLink/MenuLink.tsx","Components/Generic/Header/HeaderMenu/NavLinks.ts","Components/Generic/Header/HeaderMenu/HeaderMenu.tsx","Components/Generic/Header/Header.tsx","Components/HomeComponents/HomeDetail/HomeDetail.tsx","Pages/HomePage.tsx","Pages/AboutPage.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/services/ChatbotCommunicator.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/OptionSelector/OptionSelector.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/RearChildrenOptionSelector/RearChildrenOptionSelector.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/UndividedEstateWidget/UndividedEstateWidget.tsx","Components/InheritanceCalculatorComponents/OtherComponent/ChatHeader/ChatHeader.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/ParentChildSelector.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Classes/NodeEntity.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Generics.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/ValidationType.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Config.js","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Enums/BinaryAnswerTypes.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/ChatbotValidation.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/NumberInput.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/MessageParser.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Classes/Person.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/HandleCurrency.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Custom/Widgets/ShowInfoWidget/ShowInfoWidget.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/QuestionConstants.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/Helper/Methods/InheritanceConstants.ts","Components/InheritanceCalculatorComponents/Reports/ReportUtils.ts","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/ProcessDataForChart.tsx","Components/InheritanceCalculatorComponents/Reports/ReportCalculationBase.ts","Components/InheritanceCalculatorComponents/Reports/InheritanceCalculation.ts","Components/InheritanceCalculatorComponents/Reports/PDF/styles.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/text-styles/Bold.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/text-styles/Italic.tsx","Components/InheritanceCalculatorComponents/Reports/pdf_utils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/genealogy/Genealogy.utils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/genealogy/GenealogyPlikt.utils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/genealogy/Genealogy.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/introSection/IntroductionPlikt.utils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/introSection/IntroductionPage.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/introSection/Introduction.utils.ts","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/react-pdf-table/Table.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/summary/Summary.utils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/summary/Summary.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/survivingPartner/SurvivingPartner.utils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/survivingPartner/SurvivingPartner.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/firstSection/FirstSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/secondSection/UndividedEstateCalculation/UndividedEstateCalculationUtils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/secondSection/UndividedEstateCalculation/UndividedEstateCalculation.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/secondSection/SecondSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/thirdSection/ThirdSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/generalReservations/GeneralReservationsUtils.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/generalReservations/GeneralReservations.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/nationalInsurance/NationalInsurance.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fourthSection/FourthSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/fixedSection/Footer.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/common/fixedSection/Header.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/Sections/fifthSection/fifthSection.tsx","Components/InheritanceCalculatorComponents/Reports/PDF/FinalDocument.tsx","Components/InheritanceCalculatorComponents/Reports/PliktdelsarvCalculation.ts","Components/InheritanceCalculatorComponents/Reports/UndividedCalculation.ts","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProviderMethods/OtherChatbotMethods.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProviderMethods/UndividedEstateMethods.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProviderMethods/RelativeMethods.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProvider.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProviderMethods/TestatorInformationMethods.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProviderMethods/PartnerMethods.tsx","store/chartSelector.js","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/Classes/ChartNode.ts","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/Classes/ChartConnector.ts","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/Classes/Bubble.ts","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/CustomNode.tsx","Components/InheritanceCalculatorComponents/ChatbotComponent/services/ComponentCommunicatorService.tsx","Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/ChartComponent.tsx","assets/images/chat_button_logo.svg","Pages/InheritanceCalculatorPage.js","Components/Generic/Footer/Footer.tsx","Pages/ResourcesPage.tsx","store/genericReducer.js","store/store.js","App.tsx","index.tsx"],"names":["ChatStepTypes","QuestionType","undividedOwnershipType","useStyles","makeStyles","root","fontFamily","color","HeaderTitle","classes","Typography","variant","className","noWrap","fontSize","padding","textDecoration","textAlign","backgroundColor","fontWeight","rootActive","MenuLink","props","to","href","exact","activeClassName","name","navLinks","id","title","path","HeaderMenu","Grid","container","direction","justifyContent","alignItems","NavLinks","map","item","header","height","paddingLeft","drawerContainer","menuIconRoot","Header","useState","mobileView","drawerOpen","state","setState","useEffect","setResponsiveness","window","innerWidth","prevState","addEventListener","AppBar","Toolbar","IconButton","edge","onClick","size","Drawer","anchor","open","onClose","Link","component","RouterLink","style","key","MenuItem","sm","highLightText","HomeDetail","Box","align","typeSpeed","strings","HomePage","AboutPage","inSubject","Subject","outSubject","internalSubscriptionList","Array","externalSubscriptionList","previousStates","messageService","message","next","asObservable","subscription","push","data","stateCopy","_","cloneDeep","filter","previousState","Object","entries","length","pop","reverseCount","forEach","unsubscribe","handleOptions","option","actionProvider","hideWarning","curStep","stepID","yesNoClickedFlag","testatorStep","handleUndividedEstateChoice","undividedEstateStep","successor_flag","part2","handleChildAliveOption","parent_flag","handleParentAliveOption","part3","handleSecondParentExists","underAgeStep","handleUnderAge","spouseChoice","handleSpouseChoice","cohabitantChoice","handleCohabitantChoice","successorStep","parentsStep","marriedParentsStep","handleMarriedParents","grandParentStep","finalStep","handleFinalQuestion","console","log","warningDiv","document","getElementById","display","OptionSelector","setOption","e","InfoMessagesWidget","PropTypes","string","label","sx","RearChildrenOptionSelector","a","rearChildren","handleRearChildrenOptionWidget","UndividedEstateWidget","handleOwnershipResponse","onClickHandler","thisButton","target","currentParent","parentElement","hasChildNodes","values","childNodes","childEl","pointerEvents","disabled","background","ChatHeader","setOpen","handleCloseNo","restartBot","resetChatbot","flexGrow","position","Button","RestartAlt","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","ParentChildSelector","NodeEntity","level","_id","_level","_path","_partnerPath","_parents","_children","_spouse","_cohabitant","_undividedEstateSpouse","_relationshipMap","_childCount","_processChildNodePos","_partnerNode","_getRelationshipMap","Map","add_child","child","add_for_both","isPartner","children_array","child_id","find","obj","getLevel","add_parent","parent","parents_array","parent_id","grandParent","getLatestPathKey","Error","x","setPathforPartner","partnerSelector","partner","has_surviving_spouse","has_surviving_cohabitant","this","prevPath","nodeMap","currId","currNode","getNode","includes","parentCount","i","node","get","undefined","ValidationType","DefaultWarningMessage","ChatbotState","initalStep","person","testator","netWealth","initialQuestion","temp_person","temp_child","temp_parent","personsMap","undividedSpouseId","deceasedParentsArray","grandParent_flag","rearChildrenResponse","undividedEstate","undividedEstateChoice","undivided_flag","totalEstateValue","undividedEstateSeparateWealth","temp_first","temp_last","ownershipType","none","tempMessages","successorProcessArray","isUndividedParent","InitialChatbotState","messages","cache","createIntlCache","value","createIntl","locale","Norsk","formatMessage","config","botName","lang","customStyles","botMessageBox","chatButton","initialMessages","createChatBotMessage","customComponents","widgets","widgetName","widgetFunc","BinaryAnswerTypeYes","BinaryAnswerTypeNo","ChatbotValidation","chatbotState","validate","validationTypes","warningMessage","validationType","getDefaultWarningMessage","validationResult","emptyValue","validateEmpty","invalidAmount","validateAmount","onlyDigit","validateDigit","incorrectValueForBoolean","validateValueForBoolean","error","showWarning","messageCopy","handleValidation","match","test","innerHTML","emptyValueMessage","numberInputTypesObject","MessageParser","chatbotValidator","disableButtons","buttonElements","getElementsByClassName","currentElement","setRevertListeners","subscribe","revertState","lastState","flagSwitch","curState","part1","handleSuccessorInput","handleSuccessorCount","trim","chosenValue","handleTestator","toLowerCase","alert","handleTotalEstateValueResponse","handleDelvisFirstResponse","part4","handleDelvisSecondResponse","part5","handleFulltSaereieResponse","part6","part7","handleSuccessor","part8","handleParentsInput","testatorOtherChildStep","netWealthStep","handleNetWealth","spouseStep","handleSpouseInput","cohabitantStep","handleCohabitantInput","convertedMessage","keys","messageParser","handleUndividedEstateSpouse","Person","personid","_personName","_deceased","_childrenRearing","_underAge","set_spouse","spouse","hasSurvivingSpouse","set_cohabitant","cohabitant","getPerson","personMap","ParseCurrencyStringForOutput","unformattedCurrency","Intl","NumberFormat","currency","currencyDisplay","minimumFractionDigits","maximumFractionDigits","format","Number","replace","concat","CurrencyOutput","inputCurrency","initialCurrencyValue","beginningValue","endValue","matchesStart","matchStartResult","substring","matchesEnd","matchEndResult","removeTextFromCurrencyString","digitsBeforeSeparatorValue","separatorCount","checkSeparatorCount","digitsBeforeSymbol","checkDigitsBeforeSeparatorValue","popover","paper","useTheme","spacing","ShowInfoWidget","anchorEl","setAnchorEl","containerRef","useRef","handlePopoverClose","Boolean","ref","onMouseEnter","event","currentTarget","onMouseLeave","Popover","anchorOrigin","vertical","horizontal","transformOrigin","disableRestoreFocus","current","text","QuestionConstants","TestatorQuestion","UndividedEstateQuestion","YesNoWidgetOptions","widget","withAvatar","loading","terminateLoading","UndividedEstateResultText","selectedOption","undividedEstateResultText","undvdSpouseOtherSuccessorQuestion","testatorOtherSuccessorQuestion","NetWealthQuestion","NetWealthWarning","UnderAgeQuestion","UnderAgeResultText","underAgeResultText","SpouseChoiceQuestion","SpouseQuestion","CohabitantChoiceQuestion","CohabitantQuestion","addSuccessorQuestion1","person_id","person_ID","addSuccessorQuestion2","child_id_string","children_IDs","AliveQuestion","child_ID","AliveResultText","aliveResultText","addParentsQuestion1","askSecondParentChoiceQuestion","addParentsQuestion2","parent_id_string","parents_IDs","MarriedParents1","first_parent_id","second_parent_id","parent1_ID","parent2_ID","MarriedParents2","addGrandParentsQuestion1","addGrandParentsQuestion2","grandparent_id_string","grandParents_IDs","FinalQuestion","EmptyQuestion","DefaultText","TotalEstateNetValueQuestion","TotalEstateNetValueWarning","OwnershipTypeQuestion","OwnershipQuestionWidgetOptions","OwnershipTypeWarning","DelvisFirstQuestion","DelvisSecondQuestion","FulltSaereieQuestion","UndividedEstateSpouseQuestion","TextBeforeSucsrUndvdSpouse","addSuccessorCount","undividedChildrenTogetherCount","addSuccessorOfParentCount","existing_child_id","existing_child_ID","InheritanceConstants","DESC_COHABITANT_WITHOUT_COMMON_CHILD","DESC_NO_SPOUSE_OR_COHABITANT","DESC_COHABITANT_NO_CLOSE_RELATIVES_2","DESC_COHABITANT_NO_CLOSE_RELATIVES","DESC_SPOUSE_NO_CLOSE_RELATIVES_2","DESC_SPOUSE_NO_CLOSE_RELATIVES","G","MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN","FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN","MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS","FRACTION_INHERITANCE_SPOUSE_VS_PARENTS","MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN","FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN","MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS","FRACTION_INHERITANCE_COHABITANT_VS_PARENTS","FRACTION_PLIKTDEL","LINE_MAXIMUM_PLIKTDEL","LAW_LINKS","CODE_PARAGRAPHS","xDiff","yDiff","partnerBubbleLevelMap","combine_duplicates","inheritance_fraction_list","duplicateArrayPersonMap","combinedArray","inheritance_fraction","has","tempInheritanceFractionList","set","duplicatedMapArray","currentValue","frac","reduce","accumulator","chains","arr","curr","split_evenly_between_lines","person_list","maximum_distance","allow_parents","split_fraction_list","split_frac","personDetail","personNode","get_class_and_distance_closest_surviving_relative","temp_list","level_sum","interm_temp_list","temp_split_fraction_list","temp_fraction_list","temp_list_item","isEqual","intl","ReportCalculationBase","inheritanceType","will","survivor","survivor_type","class_closest","distance_closest","old_surviving_reference_paragraphs","surviving_reference_paragraphs","minimum_surviving_inheritance","surviving_fraction","descriptive_text","survivor_inheritance_sum","genealogy_inheritance_sum","splits_with_chains","genealogy_inheritance","genealogy_splits","initializeInheritance","initializeInheritanceVariablesCommon","initializePliktInheritance","initializeUndividedInheritance","computeMethod","inheritanceOption","computeGenealogyInheritance","Math","min","max","compute_default_genealogy_splits_with_chains","genealogy_split","computeGenealogyPliktInheritance","personObject","firstParentSpouse","grandParent_splits","num","resultGrandParentSplit","grandParent_split","InheritanceCalculation","styles","StyleSheet","create","page","flexDirection","paddingRight","paddingBottom","section","margin","marginBottom","heading","subheading","paragraphHeading","paragraph","pageNumber","bottom","left","right","boldValue","italicValue","fontStyle","urlStyle","tableHeaderRow","borderWidth","tableDataRow","marginTop","redText","imageView","image","Bold","children","Italic","currencyFormatNO","currencyValue","useGrouping","add_legal_reference","code_paragraph","lovdataLink","addLovdataLink","code_paragraph_code","hyperlinkText","add_hyperlink","url_text","src","unravel_chain_to_string","chain","s","splice","link","unravel_chains_to_string","chains_unraveled","unravelOutput","n","ind","unraveled_chain","getGenealogyText","legalReference1","legalReference2","getParagraph","genealogy_inheritance_text","helpText","legalReferenceText","finalGenealogyInheritanceText","tempVar","GenealogyUtils","genealogyText","genealogyInheritanceSum","legal_reference_text","genealogyInheritanceText","GenealogyPliktUtils","Genealogy","inheritanceMode","useContext","UserContext","inheritanceCalculation","genealogyParagraph","wrap","pliktdelsarvCalculation","genealogyPliktParagraph","getPliktIntroString","person_name","net_wealth_NOK","available_for_will","IntroductionPage","calculatedValues","currencyFormatted","testatorName","IntroductionUtils","pliktIntroText","IntroductionPliktUtils","TableElement","summaryVal","summaryValue","getContent","r","survivorName","survivorType","belopAmount","SummaryUtils","summaryValues","getSummaryValues","table","emptyTableCase","survivor_name","gen_inherit","summaryCell","Summary","summaryTable","summaryPliktTable","getInheritanceDescriptiveText","valueType","inheritanceSpecificTextIf","pliktSpecificTextIf","inheritanceSpecificTextElse","pliktSpecificTextElse","SurvivingPartnerUtils","inheritanceDescriptiveText","legalReferenceTextArray","code_paragraphs","add_legal_references","pliktSpecificText","indexOf","SurvivingPartner","survivingPartnerParagraph","FirstSection","belop_amount","UndividedEstateCalculation","undividedResult","undividedCalculation","addUndividedEstateRelatives","add_undivided_estate_relatives","addUndividedEstateSummary","add_undivided_estate_summary","break","UndividedRelativeText","returnValue","endSentence","unraveledText","genealogy_inheritance_unit","getUndividedRelativeText","UndividedSummaryTable","getUndividedSummaryTable","SecondSection","undividedStateElement","ThirdSection","getUskifteText","getTestamentText","getavkortingText","lovdata_link","getBarnText","generalReservationsUtils","uskifteText","testamentText","avkortingText","barnText","GeneralReservations","generalReservationsText","NationalInsurance","NationalInsuranceText","getNationalInsuranceString","FourthSection","Footer","render","totalPages","fixed","FifthSection","url","setUrl","querySelector","domtoimage","toPng","classList","contains","then","dataUrl","catch","createContext","FinalDocument","Provider","inputData","PliktdelsarvCalculation","UndividedCalculation","computeInheritances","handleClosingStep","isSecondParent","closestSurvivingRelativeChildren","closestSurvivingRelativeParents","handleUndividedStep","closestSurvivingRelativeGrandParents","askUnderAgeQuestion","handleClosestSurvivingRelativeParents","personName","secondParentChoiceQuestion","addMessageToBotState","returnState","askFinalQuestion","temp_class","eitherParentsDeceased","p_id","parent1Detail","parent2Detail","marriedParentsQn","grandParentFirst","handleClosestSurvivingRelativeGrandParens","grandparentName","askForNextGrandParent","surviving_successor_distance","possible_distances","temp","testatorNode","distance","alternatives","sort","b","closest_alternative_class","closest_alternative_distance","createNewPerson","personID","newPerson","generateNextID","newNode","createEmptyNode","createTestator","isTwoParent","testatorDetail","newSuccessorUndvdSpouseQuestion","newParentQuestion","askTestatorOtherChildrenQuestion","handleNoSuccessorCase","childItrPos","allChildrenID","getParentChildrenIDStrings","newSuccessorQuestion","currentParentID","isCurrentParentID","currentId","getParentId","currentParentDetail","ActionProvider","setStateFunc","createClientMessage","stateRef","checkstate","isStarted","glb_state","GRANDCHILDREN_PATH_LIMIT","revertCount","localStorage","getItem","parseInt","setItem","toString","testatorResponse","res","undividedEstateQuestion","undividedEstateChoiceResponse","totalEstateNetValueQuestion","netWealthQuestion","totalEstateValueResponse","totalEstateValueQuestion","currencyIntResponse","currencyStringResponse","currencyJSX","ownershipTypeQuestion","currencyCustom","totalEstateWarning","ownershipResponse","felleseie","undividedEstateSpouseQuestion","underAgeQuestion","delvisFirstQuestion","fulltSaereieQuestion","ownershipTypeWarning","undividedOwnershipResponse","response","delvisSecondQuestion","netWealthWarning","delvisFirstResponse","delvisSecondResponse","delvisFulltResponse","newUndividedSpouse","undividedSpouse","textBeforeSucsrUndvdSpouse","newSuccessorTogetherQuestion","undividedEstateSpouse","cohabitantChoiceQuestion","spouseChoiceQuestion","spouseQuestion","handleSpouseOption","spouseResponse","spouseID","newSpouse","rearChildrenStep","cohabitantChoiceResponse","cohabitantQuestion","cohabitantResponse","cohabitantID","newCohabitant","successorResponse","childID","getChildUnprocessedNode","personId","aliveQuestion","aliveResponse","childDetail","getGenerationCount","secondParentChoice","allParentsID","temp_person_detail","parentResponse","predecessor","alive","temp_parent_detail","handleGrandParentFirst","handleAskForNextGrandParent","marriedParentsResponse","finalOption","pdfDownloadLink","fileName","blob","pdfLink","handleFinalQuestionDef","handleAskUnderAgeQuestion","temp_class_testator","handleClosestSurvivingRelativeChildren","collection","join","finalQuestion","isArray","handleDefault","firstSpouse_id","secondSpouse_id","check","self","setInterval","detail","clearInterval","chartSelector","delay","Promise","resolve","setTimeout","currencyResponse","successorCountResponse","successorCount","parentID","questionType","itr_id","currentPartnerNode","updateProcessChildNodePos","t","handleSuccessorCnt","ChartNode","type","xLevel","draggable","connectable","NodeData","showDialog","pos","ChartConnector","source","sourceHandle","targetHandle","animated","Bubble","elements","maxLevel","minLevel","xLevelArray","chartNodeMap","connectorArray","nodeSize","setxLevel","levelMap","processedNodes","currentLevelChartNodes","currentNode","avgXlevel","parentsCurrentNode","partnerNodeId","partnerChartNode","getChartNode","partnerBubbleArray","connector","newConnector","createNodesInPath","getLevelMap","nodeDetails","nodeLabel","y","setNodePosition","ypos","sortedLevelChartNode","bubbles","createLevelBubble","processBubbles","xleft","xgap","previousXRight","bubble","parentChartNode","relativeXleft","relativeXRight","eleID","chartNodes","partnerBubble","isPartnerProcessed","chartNode","partnerParent","isExistingBubble","partnerNode","existingBubbles","existingBubble","getChartNodeConnectorArray","finalArray","setxLevelForMaxLevel","nodeArray","xlevelDefault","currentNodePath","j","sourceNode","targetNode","top","HandleType","customHandleData","Position","Right","Bottom","Left","Top","partnerNodeStyles","OuterDiv","width","borderRadius","borderColor","borderStyle","letterSpacing","innerDiv1","innerDiv2","borderTop","textFitStyle","subtitle","whiteSpace","deceasedFormatter","personString","CustomNode","totalData","isConnectable","handles","v","k","labelString","mode","forceSingleModeWidth","chatBotDataSubject","chatbotMessageSubscriptionList","componentCommunicatorService","flowStyles","isHandleChange","OrgChartTree","result","setResult","chartContent","setChartContent","componentWillUnmount","updateNodeInternals","useUpdateNodeInternals","chartData","maxLevelData","processData","fitView","useZoomPanHelper","nodeTypes","specialNode","paddingTop","nodesConnectable","paneMoveable","selectNodesOnDrag","elementsSelectable","nodesDraggable","BackgroundVariant","Lines","gap","setWarningDiv","chatParentElement","newDiv","createElement","prepend","addListenerToChatInputField","InheritanceCalculatorPage","prev","Config","divChatBot","botIcon","Copyright","Date","getFullYear","footer","description","Paper","gutterBottom","ResourcesPage","initialState","genericReducer","action","payload","store","createStore","theme","createTheme","rootPaper","minHeight","opacity","menuItems","App","langMessages","StyledEngineProvider","injectFirst","ThemeProvider","role"],"mappings":"mYAAYA,EAoBAC,EAYAC,E,2OCvBNC,EAAYC,YAAW,CAAEC,KALlB,CACXC,WAAY,yBACZC,MAAO,aAcMC,EAVK,WAClB,IAAMC,EAAUN,IAEhB,OACE,cAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQJ,KAAMQ,QAAM,EAAxD,sBCJEV,EAAYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,0BAEZQ,SAAU,SACVP,MAAO,UACPQ,QAAS,SACTC,eAAgB,OAChBC,UAAW,SACX,UAAW,CACTV,MAAO,UACPW,gBAAiB,UACjBC,WAAY,SAGhBC,WAAY,CACVF,gBAAiB,UACjBX,MAAO,UACP,UAAW,CACTW,gBAAiB,UACjBX,MAAO,cAmBEc,EAdE,SAACC,GAChB,IAAMb,EAAUN,EAAUmB,GAC1B,OACE,cAAC,IAAD,CACEC,GAAID,EAAME,KACVZ,UAAWH,EAAQJ,KACnBoB,OAAK,EACLC,gBAAiBjB,EAAQW,WAJ3B,SAMGE,EAAMK,QCrBEC,EAvBE,CACf,CACEC,GAAI,EACJC,MAAO,YACPC,KAAM,KAER,CACEF,GAAI,EACJC,MAAO,kBACPC,KAAM,eAER,CACEF,GAAI,EACJC,MAAO,aACPC,KAAM,UAER,CACEF,GAAI,EACJC,MAAO,iBACPC,KAAM,e,SCMKC,EAnBI,WACjB,OACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,eAAe,eACfC,WAAW,SAJb,SAMGC,EAASC,KAAI,YAA0B,IAAvBV,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC1B,OACE,cAACE,EAAA,EAAD,CAAMO,MAAI,EAAV,SACE,cAAC,EAAD,CAAUb,KAAM,cAAC,IAAD,CAAkBE,GAAE,UAAKC,KAAaN,KAAMO,KAD9CF,SCCpB1B,EAAYC,YAAW,CAC3BqC,OAAQ,CACNvB,gBAAiB,QACjBwB,OAAQ,QAEV,4BAA6B,CAC3BC,YAAa,GAEfC,gBAAiB,CACf7B,QAAS,aAEX8B,aAAc,CACZtC,MAAO,aAoFIuC,EA3CA,WACb,MAA0BC,mBAAS,CACjCC,YAAY,EACZC,YAAY,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAIQH,EAA2BE,EAA3BF,WAAYC,EAAeC,EAAfD,WACpBG,qBAAU,WACR,IAAMC,EAAoB,WACxB,OAAOC,OAAOC,WAAa,IACvBJ,GAAS,SAACK,GAAD,mBAAC,eAAoBA,GAArB,IAAgCR,YAAY,OACrDG,GAAS,SAACK,GAAD,mBAAC,eAAoBA,GAArB,IAAgCR,YAAY,QAE3DK,IACAC,OAAOG,iBAAiB,UAAU,kBAAMJ,SACvC,IAEH,IAAM5C,EAAUN,IAoBhB,OACE,cAACuD,EAAA,EAAD,CAAQ9C,UAAWH,EAAQgC,OAA3B,SACGO,EAbD,eAACW,EAAA,EAAD,WACE,cAAC,IAAD,CAAU/C,UAAWH,EAAQoC,eAC7B,cAACe,EAAA,EAAD,CAAYC,KAAK,QAAQtD,MAAM,UAAUuD,QARpB,kBACvBX,GAAS,SAACK,GAAD,mBAAC,eAAoBA,GAArB,IAAgCP,YAAY,QAOiBc,KAAK,UACzE,cAACC,EAAA,EAAD,CAAQC,OAAO,OAAOC,KAAMjB,EAAYkB,QAPlB,kBACxBhB,GAAS,SAACK,GAAD,mBAAC,eAAoBA,GAArB,IAAgCP,YAAY,QAMnD,SACE,qBAAKrC,UAAWH,EAAQmC,gBAAxB,SAjEDN,EAASC,KAAI,YAA0B,IAAvBV,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAChC,OACE,cAACqC,EAAA,EAAD,CAEIC,UAAWC,IACX/C,GAAIQ,EACJxB,MAAO,UACPgE,MAAO,CAAEvD,eAAgB,QACzBwD,IAAK3C,EANT,SASE,cAAC4C,EAAA,EAAD,UAAW3C,aAwDX,cAAC,EAAD,OAjDJ,cAAC6B,EAAA,EAAD,UACE,eAAC1B,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,eAAe,aACfC,WAAW,WAJb,UAME,cAACJ,EAAA,EAAD,CAAMO,MAAI,EAACkC,GAAI,EAAf,SACE,cAAC,EAAD,MAEF,cAACzC,EAAA,EAAD,CAAMO,MAAI,EAACkC,GAAI,EAAf,SACE,cAAC,EAAD,c,2BCzDJvE,EAAYC,YAAW,CAC3BC,KAAM,CACJU,QAAS,cACTR,MAAO,QACPD,WAAY,2BAEdqE,cAAe,CACbrE,WAAY,yBACZQ,SAAU,OACVP,MAAO,YAoBIqE,EAhBI,WACjB,IAAMnE,EAAUN,IAEhB,OACE,cAAC0E,EAAA,EAAD,UACE,eAACnE,EAAA,EAAD,CAAYC,QAAQ,KAAKmE,MAAM,SAASlE,UAAWH,EAAQJ,KAA3D,0EACmD,uBADnD,wDAEiD,uBAFjD,sEAGsE,IACpE,uBAJF,IAIS,uBACP,sBAAMO,UAAWH,EAAQkE,cAAzB,uBALF,IAK2D,cAAC,IAAD,CAAOI,UAAW,GAAIC,QARnE,CAAC,0ECTNC,EATE,WACf,OAIE,aAHA,CAGC,EAAD,KCIWC,EAVG,WAChB,OACE,8BACE,cAACxE,EAAA,EAAD,CAAYC,QAAQ,KAAKmE,MAAM,SAA/B,2B,0BRLM9E,K,cAAAA,E,4BAAAA,E,0CAAAA,E,8BAAAA,E,4BAAAA,E,4BAAAA,E,wBAAAA,E,oCAAAA,E,gCAAAA,E,8BAAAA,E,0BAAAA,E,oCAAAA,E,wCAAAA,E,kCAAAA,E,sBAAAA,E,wCAAAA,E,iDAAAA,M,cAoBAC,K,uBAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,M,cAYAC,K,sBAAAA,E,0BAAAA,E,wBAAAA,E,SAAAA,M,mCS7BNiF,EAAY,IAAIC,IAChBC,EAAa,IAAID,IACjBE,EAA2B,IAAIC,MAC/BC,EAA2B,IAAID,MAC/BE,EAAiB,IAAIF,MACdG,EAGa,SAACC,GAAD,OAAkBN,EAAWO,KAAKD,IAH/CD,GAKU,kBAAMP,EAAUU,gBAL1BH,GAOW,kBAAML,EAAWQ,gBAP5BH,GASc,SAACI,GAAD,OACvBR,EAAyBS,KAAKD,IAVrBJ,GAYc,SAACI,GAAD,OACvBN,EAAyBO,KAAKD,IAbrBJ,GAeO,SAACM,GACjB,IAAMC,EAAYC,IAAEC,UAAUH,GAKf,IAHbP,EAAeW,QACb,SAACC,GAAD,OACEC,OAAOC,QAAQF,IAAkBC,OAAOC,QAAQN,MAClDO,QAEFf,EAAeM,KAAKE,IAvBbP,GA2BU,WACnB,OAA8B,IAA1BD,EAAee,OACV,KAEFf,EAAegB,OA/Bbf,GAkCQ,kBAAMD,GAlCdC,GAoCO,SAACgB,GACjB,OAA8B,IAA1BjB,EAAee,OAAqB,KACjCf,EAAeA,EAAee,OAAS,EAAIE,IAtCzChB,GAyCmB,WAC5BJ,EAAyBqB,SAAQ,SAACb,GAChCA,EAAac,kBA3CNlB,GA+CmB,WAC5BF,EAAyBmB,SAAQ,SAACb,GAChCA,EAAac,kBCAbC,GAAgB,SAClBC,EACAC,EACA5D,GAEA6D,KACA7D,GAAS,SAACD,GACNwC,GAAA,eAAqCxC,IACrC,IAAM+D,EAAU/D,EAAMgE,OAEtB,OADAhE,EAAMiE,kBAAmB,EACjBF,GACJ,KAAKjH,EAAcoH,aACfL,EAAeM,4BAA4BP,GAC3C,MAEJ,KAAK9G,EAAcsH,oBACf,GAAIpE,EAAMqE,iBAAmBtH,EAAauH,MAAO,CAC7CT,EAAeU,uBAAuBX,GACtC,MACG,GAAI5D,EAAMwE,cAAgBzH,EAAauH,MAAO,CACjDT,EAAeY,wBAAwBb,GACvC,MACG,GAAI5D,EAAMwE,cAAgBzH,EAAa2H,MAAO,CACjDb,EAAec,yBAAyBf,GACxC,MAEJ,MAEJ,KAAK9G,EAAc8H,aACff,EAAegB,eAAejB,GAC9B,MAEJ,KAAK9G,EAAcgI,aACfjB,EAAekB,mBAAmBnB,GAClC,MAEJ,KAAK9G,EAAckI,iBACfnB,EAAeoB,uBAAuBrB,GACtC,MAEJ,KAAK9G,EAAcoI,cACflF,EAAMqE,eAAiBtH,EAAauH,MACpCT,EAAeU,uBAAuBX,GACtC,MAEJ,KAAK9G,EAAcqI,YACf,GAAInF,EAAMqE,iBAAmBtH,EAAauH,MAAO,CAC7CT,EAAeU,uBAAuBX,GACtC,MACG,GAAI5D,EAAMwE,cAAgBzH,EAAauH,MAAO,CACjDT,EAAeY,wBAAwBb,GACvC,MACG,GAAI5D,EAAMwE,cAAgBzH,EAAa2H,MAAO,CACjDb,EAAec,yBAAyBf,GACxC,MAEJ,MAEJ,KAAK9G,EAAcsI,mBACfvB,EAAewB,qBAAqBzB,GACpC,MAEJ,KAAK9G,EAAcwI,gBACf,GAAItF,EAAMqE,iBAAmBtH,EAAauH,MAAO,CAC7CT,EAAeU,uBAAuBX,GACtC,MACG,GAAI5D,EAAMwE,cAAgBzH,EAAauH,MAAO,CACjDT,EAAeY,wBAAwBb,GACvC,MACG,GAAI5D,EAAMwE,cAAgBzH,EAAa2H,MAAO,CACjDb,EAAec,yBAAyBf,GACxC,MAEJ,MAEJ,KAAK9G,EAAcyI,UACf1B,EAAe2B,oBAAoB5B,GACnC,MAEJ,QACI6B,QAAQC,IAAI,oBAAqB1F,GAGzC,OAAOA,MAGT8D,GAAc,WAChB,IAAM6B,EAAaC,SAASC,eAAe,uBACvCF,IACAA,EAAWtE,MAAMyE,QAAU,SAIpBC,GAvIQ,SAAC3H,GACpB,IAAQyF,EAA6BzF,EAA7ByF,eAAgB5D,EAAa7B,EAAb6B,SAClB+F,EAAY,SAACpC,GACfD,GAAcC,EAAQC,EAAgB5D,IAc1C,OACI,8BACI,sBAAKvC,UAAU,mCAAf,UACI,wBACIA,UAAU,yBACVkD,QAAS,SAACqF,GAEND,GAAU,IAJlB,SAOI,cAAC,IAAD,CAAkBrH,GAAG,kBAEzB,wBACIjB,UAAU,yBACVkD,QAAS,SAACqF,GAEND,GAAU,IAJlB,SAOI,cAAC,IAAD,CAAkBrH,GAAG,uB,oBC5B1BuH,I,OAlBNC,KAAUC,OAIQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAC5B,OAAO,eAAC1E,EAAA,EAAD,CACLmE,QAAQ,OACR5G,eAAe,SACfC,WAAW,SACXgC,UAAU,OACVzD,UAAU,cACV4I,GAAI,CAAEtI,gBAAiB,WANlB,6BAQYqI,O,8BCkBNE,I,OAhCoB,SAACnI,GAClC,IAAQ6B,EAA6B7B,EAA7B6B,SAAU4D,EAAmBzF,EAAnByF,eAEZmC,EAAS,yCAAG,WAAOpC,GAAP,UAAA4C,EAAA,sDAChBvG,GAAS,SAACD,GAAD,mBAAC,eACLA,GADI,IAGPyG,aAAc7C,OAGhBC,EAAe6C,+BAA+B9C,GAP9B,2CAAH,sDASf,OACE,8BACE,sBAAKlG,UAAU,mCAAf,UACE,wBACEA,UAAU,yBACVkD,QAAS,kBAAMoF,GAAU,IAF3B,SAIE,cAAC,IAAD,CAAkBrH,GAAG,kBAEvB,wBACEjB,UAAU,yBACVkD,QAAS,kBAAMoF,GAAU,IAF3B,SAIE,cAAC,IAAD,CAAkBrH,GAAG,wBC8BhBgI,I,OAtDe,SAACvI,GAC7B,IAAQyF,EAAmBzF,EAAnByF,eAEFmC,EAAY,SAACpC,GACjBC,EAAe+C,wBAAwBhD,IAGnCiD,EAAiB,SAACZ,GACtB,IAAMa,EAAab,EAAEc,OACfC,EAAgBF,EAAWG,cACjC,UAAID,QAAJ,IAAIA,KAAeE,cAAe,CAEhC,IADA,IACA,MAD0B9D,OAAO+D,OAAOH,EAAcI,YACtD,eAAyC,CAApC,IAAMC,EAAO,KAChBA,EAAQhG,MAAMiG,cAAgB,OAC9BD,EAAQE,UAAW,EAErBT,EAAWzF,MAAMmG,WAAa,mBAGlC,OACE,8BACE,sBAAK9J,UAAU,mCAAf,UACE,wBACEA,UAAU,yBACVkD,QAAS,SAACqF,GACRY,EAAeZ,GACfD,EAAU,cAJd,SAOE,cAAC,IAAD,CAAkBrH,GAAG,8BAEvB,wBACEjB,UAAU,yBACVkD,QAAS,SAACqF,GACRY,EAAeZ,GACfD,EAAU,qBAJd,SAOE,cAAC,IAAD,CAAkBrH,GAAG,8BAEvB,wBACEjB,UAAU,yBACVkD,QAAS,SAACqF,GACRY,EAAeZ,GACfD,EAAU,oBAJd,SAOE,cAAC,IAAD,CAAkBrH,GAAG,qC,sFCxChB,SAAS8I,GAAWrJ,GACjC,MAAwByB,oBAAS,GAAjC,mBAAOmB,EAAP,KAAa0G,EAAb,KAMMC,EAAgB,WACpBD,GAAQ,IAQJE,EAAa,WACjBxJ,EAAMyF,eAAegE,gBAGvB,OACE,cAAClG,EAAA,EAAD,CAAK2E,GAAI,CAAEwB,SAAU,GAArB,SACE,cAACtH,EAAA,EAAD,CAAQuH,SAAS,SAAjB,SACE,eAACtH,EAAA,EAAD,WACE,cAACjD,EAAA,EAAD,CAAYC,QAAQ,KAAK0D,UAAU,MAAMmF,GAAI,CAAEwB,SAAU,GAAzD,uCAGA,cAACE,GAAA,EAAD,CAAQpH,QAxBQ,WACtB8G,GAAQ,IAuBgCrG,MAAO,CAAErD,gBAAiB,qBAA5D,SACE,cAACiK,GAAA,EAAD,CAAYrK,SAAS,YAEvB,eAACsK,GAAA,EAAD,CACElH,KAAMA,EACNC,QAAS0G,EACT,kBAAgB,qBAChB,mBAAiB,2BAJnB,UAME,cAACQ,GAAA,EAAD,CAAaxJ,GAAG,qBAAhB,8BAGA,cAACyJ,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAmB1J,GAAG,2BAAtB,4EAIF,eAAC2J,GAAA,EAAD,WACE,cAACN,GAAA,EAAD,CAAQpH,QAAS+G,EAAjB,gBACA,cAACK,GAAA,EAAD,CAAQpH,QAnCG,WACrBgH,IACAF,GAAQ,IAiCmCa,WAAS,EAA1C,8B,IC1DFC,G,qCAAAA,O,iBAAAA,I,mBAAAA,I,wBAAAA,I,6BAAAA,I,mBAAAA,I,2BAAAA,I,sCAAAA,Q,KCEL,IAAMC,GAAb,WAcE,WAAY9J,EAAY+J,GAAgB,IAAD,iCAbvCC,SAauC,OAZvCC,YAYuC,OAXvCC,WAWuC,OAVvCC,kBAUuC,OATvCC,cASuC,OARvCC,eAQuC,OAPvCC,aAOuC,OANvCC,iBAMuC,OALvCC,4BAKuC,OAJvCC,sBAIuC,OAHvCC,iBAGuC,OAFvCC,0BAEuC,OADvCC,kBACuC,OAevCC,oBAAsB,WACpB,OAAO,IAAIC,IAAoB,CAC7B,CAAC,IAAK,SACN,CAAC,KAAM,cACP,CAAC,IAAK,UACN,CAAC,KAAM,kBACP,CAAC,MAAO,gBACR,CAAC,OAAQ,cACT,CAAC,KAAM,eACP,CAAC,MAAO,cACR,CAAC,OAAQ,UACT,CAAC,GAAI,OA1B8B,KAmEvCC,UAAY,SACVC,GAGU,IAFVC,IAES,yDADTC,EACS,wDACHC,EAAiB,EAAKd,UACtBe,EAAWJ,EAAMhB,IAClBmB,EAAeE,MAAK,SAACC,GAAD,OAASA,IAAQF,MACxC,EAAKf,UAAUnG,KAAKkH,GAEjBF,GAKHF,EAAMb,aAAN,aAAyB,EAAKD,OAC9Bc,EAAMb,aAAajG,KAAK,CAAC2F,GAAoBmB,MAAOI,MALpDJ,EAAMd,MAAN,aAAkB,EAAKA,OACvBc,EAAMd,MAAMhG,KAAK,CAAC2F,GAAoBmB,MAAOI,IAC7CJ,EAAMf,OAAS,EAAKsB,SAASP,EAAMd,QAMjCe,IACGD,EAAMZ,SAASiB,MAAK,SAACC,GAAD,OAASA,IAAQ,EAAKtB,QAC7CgB,EAAMZ,SAASlG,KAAK,EAAK8F,OAxFQ,KA8FvCwB,WAAa,SACXC,GAGU,IAFVR,IAES,yDACHS,EAAgB,EAAKtB,SACrBuB,EAAYF,EAAOzB,IACpB0B,EAAcL,MAAK,SAACC,GAAD,OAASA,IAAQK,MACvC,EAAKvB,SAASlG,KAAKyH,GAErBF,EAAOvB,MAAP,aAAmB,EAAKA,OAExBuB,EAAOvB,MAAMhG,KAAK,CAAC2F,GAAoB4B,OAAQE,IAC/CF,EAAOxB,OAAS,EAAKsB,SAASE,EAAOvB,OACf,IAAlBuB,EAAOxB,SACTwB,EAAOvB,MAAMuB,EAAOvB,MAAMvF,OAAS,GAAG,GACpCkF,GAAoB+B,aAEpBX,IACGQ,EAAOpB,UAAUgB,MAAK,SAACC,GAAD,OAASA,IAAQ,EAAKtB,QAC/CyB,EAAOpB,UAAUnG,KAAK,EAAK8F,OAlHM,KAuHvC6B,iBAAmB,WACjB,GAAyB,GAArB,EAAK3B,MAAMvF,OACb,MAAM,IAAImH,MAAM,gBAElB,OAAO,EAAK5B,MAAM,EAAKA,MAAMvF,OAAS,GAAG,IA3HJ,KA8HvC4G,SAAW,SAACrL,GACV,IAAI6J,EAAQ,EAaZ,OAZA7J,EAAKQ,KAAI,SAACqL,GACJA,EAAE,KAAOlC,GAAoBmB,MAC/BjB,GAAgB,EAEhBgC,EAAE,KAAOlC,GAAoB4B,QAC7BM,EAAE,KAAOlC,GAAoB+B,YAE7B7B,GAAgB,EAEhBA,GAAgB,KAGbA,GA5I8B,KAuJvCiC,kBAAoB,SAACC,EAAyBC,GAC5CA,EAAQhC,MAAR,aAAoB,EAAKA,OACzBgC,EAAQhC,MAAMhG,KAAK,CAAC+H,EAAiBC,EAAQlC,OAzJR,KAqKvCmC,qBAAuB,WACrB,OAAqB,OAAjB,EAAK7B,SAtK4B,KA0KvC8B,yBAA2B,WACzB,OAAyB,OAArB,EAAK7B,aA1KT8B,KAAKrC,IAAMhK,EACXqM,KAAKpC,OAASF,EACdsC,KAAKnC,MAAQ,GACbmC,KAAKlC,aAAe,GACpBkC,KAAKjC,SAAW,GAChBiC,KAAKhC,UAAY,GACjBgC,KAAK/B,QAAU,KACf+B,KAAK9B,YAAc,KACnB8B,KAAK7B,uBAAyB,KAC9B6B,KAAK5B,iBAAmB4B,KAAKxB,sBAC7BwB,KAAK3B,YAAc,EACnB2B,KAAK1B,qBAAuB,EAC5B0B,KAAKzB,aAAe,KA3BxB,4CA6CE,SAAQ0B,GACND,KAAKnC,MAAQoC,IA9CjB,yBAiDE,SAAYC,GACV,GAAIF,KAAKnC,MAAMvF,OAAS,EAAI,EAC1B,OAAO,KAET,IAAM6H,EAASH,KAAKnC,MAAMmC,KAAKnC,MAAMvF,OAAS,GAAG,GAC3C8H,EAAW3C,EAAW4C,QAAQF,EAAQD,GAC5C,OAEIF,KAAKhC,UAAUsC,SAASN,KAAKnC,MAAMmC,KAAKnC,MAAMvF,OAAS,GAAG,KAC1D8H,EAASjC,yBAA2B6B,KAAKrC,IAItC,KADEqC,KAAKnC,MAAMmC,KAAKnC,MAAMvF,OAAS,GAAG,KA7D/C,gCAiEE,WACE,IAAIiI,EAAc,EAClB,GAAIP,KAAKnC,MAAMvF,OAAS,EAAI,EAC1B,OAAO,EAET,IAAK,IAAIkI,EAAIR,KAAKnC,MAAMvF,OAAS,EAAGkI,GAAK,EAAGA,IAAK,CAC/C,GAAIR,KAAKnC,MAAM2C,GAAG,KAAOhD,GAAoB+B,YAAa,CACxDgB,GAAe,EACf,MAEAA,GAAe,EAGnB,OAAOA,IA9EX,qCA0KE,WACE,GAAIP,KAAK1B,qBAAuB0B,KAAKhC,UAAU1F,OAC7C,OAAO0H,KAAKhC,UAAUgC,KAAK1B,0BA5KjC,uCA+KE,WACE0B,KAAK1B,2BAhLT,KAAab,GA6JJ4C,QAAU,SAAC1M,EAAYuM,GAC5B,IAAMO,EAA+BP,EAAQQ,IAAI/M,GACjD,QAAYgN,GAARF,EACF,MAAM,IAAIhB,MAAM,gCAAkC9L,GAEpD,OAAO8M,GC7HJ,ICvCKG,GAMAC,GDiCCC,GAAiC,CAC1C9H,OAAQlH,EAAciP,WACtBC,OAAQ,IAAIvD,GAAW,EAAG,GAC1BwD,SAAU,IAAIxD,GAAW,EAAG,GAC5ByD,UAAW,EACX7H,eAAgBtH,EAAaoP,gBAC7B3H,YAAazH,EAAaoP,gBAC1BC,YAAa,IAAI3D,GAAW,EAAG,GAC/B4D,WAAY,IAAI5D,GAAW,EAAG,GAC9B6D,YAAa,IAAI7D,GAAW,EAAG,GAC/B8D,WAAY,IAAI9C,IAChByB,QAAS,IAAIzB,IACb9K,GAAI,EACJ6N,kBAAmB,EACnBC,qBAAsB,GACtBC,iBAAkB3P,EAAaoP,gBAC/BQ,sBAAsB,EACtBC,gBAAiB,CACbC,uBAAuB,EACvBC,eAAgB/P,EAAaoP,gBAC7BY,iBAAkB,EAClBC,8BAA+B,EAC/BC,WAAY,EACZC,UAAW,EACXC,cAAenQ,EAAuBoQ,MAE1CC,aAAc,GACdC,sBAAuB,GACvBC,mBAAmB,EACnBtJ,kBAAkB,GAGTuJ,GAAwB,2BAC9B1B,IAD8B,IAEjC2B,SAAU,K,kBE9DRC,GAAQC,eAIRC,GAHOC,YAAW,CAAEC,OAAQ,QAASL,SAAUM,IAASL,IAG3CM,cAAc,CAAErP,GAAI,8BAqCxBsP,GApCA,CACbC,QAHc,UAIdC,KAAM,KACNC,aAAc,CACZC,cAAe,CACbrQ,gBAAiB,WAEnBsQ,WAAY,CACVtQ,gBAAiB,YAGrBgC,MAAO8L,GACPyC,gBAAiB,CAACC,+BAAqBZ,GAAO,KAC9Ca,iBAAkB,CAChBlP,OAAQ,SAACsE,GAAD,OAAoB,cAAC4D,GAAD,CAAY5D,eAAgBA,MAG1D6K,QAAS,CACP,CACEC,WAAY,uBACZC,WAAY,SAACxQ,GAAD,OAAW,cAAC,GAAD,eAAoBA,MAE7C,CACEuQ,WAAY,6BACZC,WAAY,SAACxQ,GAAD,OAAW,cAAC,GAAD,eAAgCA,MAEzD,CACEuQ,WAAY,cACZC,WAAY,SAACxQ,GAAD,OAAW,cAAC,GAAD,eAAuBA,MAEhD,CACEuQ,WAAY,wBACZC,WAAY,SAACxQ,GAAD,OAAW,cAAC,GAAD,eAA2BA,S,SDhD5CwN,O,2BAAAA,I,iCAAAA,I,yBAAAA,I,wDAAAA,Q,cAMAC,K,8CAAAA,E,6CAAAA,E,iFAAAA,E,mEAAAA,Q,SENAgD,GAKAC,G,mBALAD,O,aAAAA,I,YAAAA,Q,cAKAC,O,WAAAA,I,cAAAA,Q,KCGL,IAAMC,GAAb,WACI,WACYlL,EACAmL,GACT,IAAD,iCAFUnL,iBAEV,KADUmL,eACV,KACFC,SAAW,SACPxM,EACAyM,EACAC,GACW,IAAD,iBACmBD,GADnB,IACV,2BAA8C,CAAC,IAApCE,EAAmC,aACnBzD,IAAnBwD,IACAA,EAAiB,EAAKE,yBAAyBD,IAEnD,IAAIE,GAAmB,EACvB,OAAQF,GACJ,KAAKxD,GAAe2D,WAChBD,EAAmB,EAAKE,cAAc/M,GACtC,MACJ,KAAKmJ,GAAe6D,cAChBH,EAAmB,EAAKI,eAAejN,GACvC,MACJ,KAAKmJ,GAAe+D,UAChBL,EAAmB,EAAKM,cAAcnN,GACtC,MACJ,KAAKmJ,GAAeiE,yBAChBP,EAAmB,EAAKQ,wBAAwBrN,GAChD,MACJ,QAEI,OADAgD,QAAQsK,MAAM,4BACP,EAEf,IAAKT,GAAoB,EAAKN,aAAc,CACxC,EAAKgB,YAAYb,GACjB,IAAMc,EAAcjN,IAAEC,UAAU,EAAK+L,aAAavB,UAElD,OADA,EAAK5J,eAAeqM,iBAAiBD,IAC9B,EAEP,EAAKnM,eA7BH,8BAgCV,OAAO,GArCT,KAuCF0L,cAAgB,SAAC/M,GAEb,OAAuB,IAAnBA,EAAQa,QAzCd,KAgDFoM,eAAiB,SAACjN,GAEd,QAAgB,KAAZA,IAAkBA,EAAQ0N,MADnB,mBAjDb,KAuDFP,cAAgB,SAACnN,GAEb,QADqB,mBACJ2N,KAAK3N,IAzDxB,KA6DFqN,wBAA0B,SAACrN,GACvB,OACKA,KAAWoM,IAAuBpM,KAAWqM,OAC5CrM,IAAW,CAAC,EAAG,KAhEvB,KAuEMuN,YAAc,SAACb,GACnB,IAAMxJ,EAAaC,SAASC,eAAe,uBAC3C,GAAIF,EAGA,OAFAA,EAAW0K,UAAYlB,OACvBxJ,EAAWtE,MAAMyE,QAAU,UA3EjC,KA+EMhC,YAAc,WAClB,IAAM6B,EAAaC,SAASC,eAAe,uBACvCF,IACAA,EAAWtE,MAAMyE,QAAU,SAtFvC,6DA0FI,SAAyBsJ,GACrB,OAAQA,GACJ,KAAKxD,GAAe2D,WAChB,OAAO1D,GAAsByE,kBACjC,KAAK1E,GAAeiE,yBAChB,MAAO,wBACX,KAAKjE,GAAe6D,cAChB,MAAO,qDAEX,QACI,MAAO,+CApGvB,KCRMc,GAAyB,CAC3B,EAAG,CAAC,IAAK,OAAQ,QACjB,EAAG,CAAC,IAAK,MAAO,KAAM,MAAO,KAAM,MAAO,OAAQ,OAClD,EAAG,CAAC,IAAK,MAAO,MAChB,EAAG,CAAC,IAAK,QAAS,OAClB,EAAG,CAAC,IAAK,OAAQ,QACjB,EAAG,CAAC,IAAK,OAAQ,OACjB,EAAG,CAAC,IAAK,MAAO,QAChB,EAAG,CAAC,IAAK,QAAS,MAAO,OACzB,EAAG,CAAC,IAAK,QAAS,OAAQ,WAC1B,EAAG,CAAC,IAAK,OAAQ,MACjB,GAAI,CAAC,KAAM,MAAO,MAClB,GAAI,CAAC,KAAM,SAAU,UACrB,GAAI,CAAC,KAAM,SAAU,QACrB,GAAI,CAAC,KAAM,WAAY,WACvB,GAAI,CAAC,KAAM,WAAY,WACvB,GAAI,CAAC,KAAM,UAAW,UACtB,GAAI,CAAC,KAAM,UAAW,WACtB,GAAI,CAAC,KAAM,YAAa,SAAU,aAClC,GAAI,CAAC,KAAM,WAAY,QAAS,YAChC,GAAI,CAAC,KAAM,UAAW,UACtB,GAAI,CAAC,KAAM,SAAU,OAAQ,SCT3BC,G,WAIF,WAAY3M,EAAgC7D,GAAa,IAAD,iCAHxD6D,oBAGwD,OAFxD7D,WAEwD,OADxDyQ,sBACwD,OA8dxDC,eAAiB,WAIb,IAHA,IAAMC,EAAsB/K,SAASgL,uBACjC,0BAEKpF,EAAI,EAAGA,EAAImF,EAAerN,OAAQkI,IAAK,CAC5C,IAAMqF,EAAiBF,EAAenF,GACjCqF,EAAetJ,WAAUsJ,EAAetJ,UAAW,GACxDsJ,EAAexP,MAAMiG,cAAgB,SAreW,KAyexDwJ,mBAAqB,WACjBtO,KAEA,IAAMI,EAAeJ,KAEhBuO,WAAU,SAACtO,GACR,EAAKuO,iBAEbxO,GAAuCI,IAjfa,KAmfxDoO,YAAc,WACV,IAAMC,EAAYzO,KAClBiD,QAAQC,IAAI,kBACZD,QAAQC,IAAIuL,GAEZ,IAAM1O,EAAsBC,KAC5BiD,QAAQC,IAAI,oBACZD,QAAQC,IAAInD,GAER0O,GACA,EAAKpN,eAAe5D,UAAS,SAACD,GAK1B,OAJAA,EAAQiR,EACRxL,QAAQC,IAAI,eACZD,QAAQC,IAAI1F,GAELA,MAlgBqC,KAsgBxDkR,WAAa,SAACC,EAA4B1O,GACtC,OAAI0O,EAAS9M,iBAAmBtH,EAAaqU,MAClC,EAAKvN,eAAewN,qBAAqB5O,GACzC0O,EAAS9M,iBAAmBtH,EAAauH,MACzC,EAAKT,eAAeU,uBAAuB9B,GAC7C0O,EAAS9M,iBAAmBtH,EAAa2H,OAE1C,EAAK+L,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAe2D,WACf3D,GAAe+D,YAGZ,EAAK9L,eAAeyN,qBAAqB7O,GAMjD,MAvhBPuI,KAAKnH,eAAiBA,EACtBmH,KAAKhL,MAAQA,EACbgL,KAAKyF,iBAAmB,IAAI1B,GAAkBlL,EAAgB7D,G,0CAIlE,SAAMyC,GACFA,EAAUA,EAAQ8O,OAElB,IDAuCC,ECAjCL,EAAWnG,KAAKhL,MAItB,GAHAmR,EAASlN,kBAAmB,EAGxBkN,EAASnN,SAAWlH,EAAciP,WAClC,OACIf,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAe2D,aAGZvE,KAAKnH,eAAe4N,eAAehP,QAE9C,EAIJ,GAAI0O,EAASnN,SAAWlH,EAAcoH,eAClCzB,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,4BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeM,6BACvB,GAED,GAAI1B,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeM,6BACvB,GAGJwN,MAAM,mBAMlB,GAAIR,EAASnN,SAAWlH,EAAcsH,oBAAqB,CACvD,GACI+M,EAASvE,gBAAgBE,iBAAmB/P,EAAaqU,MAEzD,OAAOpG,KAAKnH,eAAe+N,+BACvBnP,GAGR,GACI0O,EAASvE,gBAAgBE,iBAAmB/P,EAAauH,MAEzD,OAAO0G,KAAKnH,eAAe+C,wBAAwBnE,GAEvD,GACI0O,EAASvE,gBAAgBE,iBAAmB/P,EAAa2H,MAEzD,OAAOsG,KAAKnH,eAAegO,0BAA0BpP,GAEzD,GACI0O,EAASvE,gBAAgBE,iBAAmB/P,EAAa+U,MAEzD,OAAO9G,KAAKnH,eAAekO,2BAA2BtP,GAE1D,GACI0O,EAASvE,gBAAgBE,iBAAmB/P,EAAaiV,MAEzD,OAAOhH,KAAKnH,eAAeoO,2BAA2BxP,GAE1D,GACI0O,EAASvE,gBAAgBE,iBACrB/P,EAAamV,OACjBf,EAASvE,gBAAgBE,iBAAmB/P,EAAaoV,MAEzD,OAAOC,GAAgB3P,EAAS0O,EAAUnG,MAE9C,GACImG,EAASvE,gBAAgBE,iBAAmB/P,EAAasV,MAC3D,CACE,GAAIlB,EAAS3M,cAAgBzH,EAAaqU,MACtC,OAAOpG,KAAKnH,eAAeyO,mBAAmB7P,GAC3C,GAAI0O,EAAS3M,aAAezH,EAAauH,OAE5C,GADA7B,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeY,yBACvB,GAED,GAAIhC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeY,yBACvB,GAGJkN,MAAM,yBAGX,GAAIR,EAAS3M,cAAgBzH,EAAa2H,OAEzCsG,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAec,0BACvB,GAED,GAAIlC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAec,0BACvB,GAGJgN,MAAM,qBAO1B,GAAIR,EAASnN,SAAWlH,EAAcyV,uBAClC,OAAOH,GAAgB3P,EAAS0O,EAAUnG,MAG9C,GAAImG,EAASnN,SAAWlH,EAAc0V,eAE9BxH,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAe6D,gBAGnB,OAAOzE,KAAKnH,eAAe4O,gBAAgBhQ,GAKnD,GAAI0O,EAASnN,SAAWlH,EAAc8H,eAClCnC,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,4BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAegB,gBAAe,GACvC,GAAIpC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAegB,gBAAe,GAE1C8M,MAAM,mBAMlB,GAAIR,EAASnN,SAAWlH,EAAcgI,eAClCrC,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,4BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAekB,oBAAmB,GAC3C,GAAItC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAekB,oBAAmB,GAE9C4M,MAAM,mBAIlB,GAAIR,EAASnN,SAAWlH,EAAc4V,YAE9B1H,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAe2D,aAGnB,OAAOvE,KAAKnH,eAAe8O,kBAAkBlQ,GAMrD,GAAI0O,EAASnN,SAAWlH,EAAckI,mBAClCvC,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,4BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeoB,wBAAuB,GAC/C,GAAIxC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeoB,wBAAuB,GAElD0M,MAAM,mBAKlB,GAAIR,EAASnN,SAAWlH,EAAc8V,eAClC,OAAO5H,KAAKnH,eAAegP,sBAAsBpQ,GAMrD,GAAI0O,EAASnN,SAAWlH,EAAcoI,cAAe,CACjD,GAAIiM,EAAS9M,iBAAmBtH,EAAaqU,MACzC,OAAOpG,KAAKnH,eAAewN,qBAAqB5O,GAC7C,GAAI0O,EAAS9M,iBAAmBtH,EAAauH,OAEhD,GADA7B,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeU,wBAAuB,GAC/C,GAAI9B,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeU,wBACvB,GAGJoN,MAAM,yBAGX,GAAIR,EAAS9M,iBAAmBtH,EAAa2H,MAAO,CACvD,IAAMoO,GD/OyBtB,ECgPI/O,ED/OxCW,OAAO2P,KAAKxC,IAAwBvG,MAAK,SAAC1I,GAAD,OAC3CiP,GAA+BjP,GAAKgK,SACjCkG,EAAYE,mBC8OR,OACIoB,GACA9H,KAAKyF,iBAAiBxB,SAAS6D,EAAkB,CAC7ClH,GAAe2D,WACf3D,GAAe+D,YAGZ3E,KAAKnH,eAAeyN,qBACvBwB,QAGJ,GAQZ,GAAI3B,EAASnN,SAAWlH,EAAcqI,YAAa,CAC/C,GAAIgM,EAAS9M,iBAAmBtH,EAAaqU,MACzC,OAAOpG,KAAKnH,eAAewN,qBAAqB5O,GAC7C,GAAI0O,EAAS9M,iBAAmBtH,EAAauH,OAEhD,GADA7B,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeU,wBAAuB,GAC/C,GAAI9B,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeU,wBACvB,GAGJoN,MAAM,yBAGX,GAAIR,EAAS9M,iBAAmBtH,EAAa2H,MAChD,OACIsG,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAe2D,WACf3D,GAAe+D,YAGZ3E,KAAKnH,eAAeyN,qBAAqB7O,QAEhD,EAGR,GAAI0O,EAAS3M,cAAgBzH,EAAaqU,MACtC,OAAOpG,KAAKnH,eAAeyO,mBAAmB7P,GAC3C,GAAI0O,EAAS3M,aAAezH,EAAauH,OAE5C,GADA7B,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeY,yBACvB,GAED,GAAIhC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeY,yBACvB,GAGJkN,MAAM,yBAGX,GAAIR,EAAS3M,cAAgBzH,EAAa2H,OAEzCsG,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAec,0BACvB,GAED,GAAIlC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAec,0BACvB,GAGJgN,MAAM,oBAOtB,GAAIR,EAASnN,SAAWlH,EAAcsI,qBAClC3C,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,4BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAewB,sBAAqB,GAC7C,GAAI5C,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAewB,sBAAqB,GAEhDsM,MAAM,mBAMlB,GAAIR,EAASnN,SAAWlH,EAAcwI,gBAAiB,CACnD,GAAI6L,EAAS9M,iBAAmBtH,EAAaqU,MACzC,OAAOpG,KAAKnH,eAAewN,qBAAqB5O,GAC7C,GAAI0O,EAAS9M,iBAAmBtH,EAAauH,OAEhD,GADA7B,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeU,wBAAuB,GAC/C,GAAI9B,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeU,wBACvB,GAGJoN,MAAM,wBAGX,IAAIR,EAAS9M,iBAAmBtH,EAAa2H,MAChD,OACIsG,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAe2D,WACf3D,GAAe+D,YAGZ3E,KAAKnH,eAAeyN,qBAAqB7O,QAEhD,EAID,GAAI0O,EAAS3M,cAAgBzH,EAAaqU,MAC7C,OAAOpG,KAAKnH,eAAeyO,mBAAmB7P,GAC3C,GAAI0O,EAAS3M,aAAezH,EAAauH,OAE5C,GADA7B,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAeY,yBACvB,GAED,GAAIhC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAeY,yBACvB,GAGJkN,MAAM,yBAGX,GAAIR,EAAS3M,cAAgBzH,EAAa2H,OAEzCsG,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAec,0BACvB,GAED,GAAIlC,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAec,0BACvB,GAGJgN,MAAM,qBAOtB,GAAIR,EAASnN,SAAWlH,EAAcyI,YAClC9C,EAAUA,EAAQiP,cAEd1G,KAAKyF,iBAAiBxB,SAASxM,EAAS,CACpCmJ,GAAeiE,4BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADA7D,KAAK0F,iBACE1F,KAAKnH,eAAe2B,qBAAoB,GAC5C,GAAI/C,KAAWqM,GAElB,OADA9D,KAAK0F,iBACE1F,KAAKnH,eAAe2B,qBAAoB,GAE/CmM,MAAM,wB,KAwEpBS,GAAkB,SACpB3P,EACA0O,EACA6B,GAEA,GAAI7B,EAAS9M,iBAAmBtH,EAAaqU,MACzC,OAAO4B,EAAcnP,eAAewN,qBAAqB5O,GACtD,GAAI0O,EAAS9M,iBAAmBtH,EAAauH,OAEhD,GADA7B,EAAUA,EAAQiP,cAEdsB,EAAcvC,iBAAiBxB,SAASxM,EAAS,CAC7CmJ,GAAeiE,2BAErB,CACE,GAAIpN,KAAWoM,GAEX,OADAmE,EAActC,iBACPsC,EAAcnP,eAAeU,wBAChC,GAED,GAAI9B,KAAWqM,GAElB,OADAkE,EAActC,iBACPsC,EAAcnP,eAAeU,wBAChC,GAGJoN,MAAM,yBAGX,GAAIR,EAAS9M,iBAAmBtH,EAAa2H,OAE5CsO,EAAcvC,iBAAiBxB,SAASxM,EAAS,CAC7CmJ,GAAe2D,WACf3D,GAAe+D,YAGnB,OAAOqD,EAAcnP,eAAeyN,qBAAqB7O,GAMjE,OAAOuQ,EAAcnP,eAAeoP,4BAA4BxQ,IAErD+N,MCtlBM0C,G,WAUnB,WAAYC,GAA2B,IAAD,OAARxU,EAAQ,uDAAH,EAAG,0BATtCgK,SASsC,OARtCyK,YAAc,GAQwB,KAPtCjK,4BAOsC,OANtCkK,WAAY,EAM0B,KALtCpK,aAKsC,OAJtCC,iBAIsC,OAHtCoK,sBAGsC,OAFtCC,eAEsC,OAiCtCC,WAAa,SAACC,GAA+C,IAA/B7J,IAA8B,yDACrD,EAAKX,QACL,EAAKA,QAAUwK,EADDhO,QAAQC,IAAI,EAAKuD,SAAWwK,GAE3C7J,GAAc6J,EAAOD,WAAW,GAAM,IApCN,KAuCtCE,mBAAqB,WACnB,YAAqB/H,IAAjB,EAAK1C,UAA0B,EAAKA,QAAQoK,WAxCZ,KAgDtCM,eAAiB,SAACC,GAAmD,IAA/BhK,IAA8B,yDAC7D,EAAKV,YACL,EAAKA,YAAc0K,EADDnO,QAAQC,IAAI,EAAKwD,aAAe0K,GAEnDhK,GAAcgK,EAAWD,eAAe,GAAM,IAlDlD3I,KAAKoI,YAAcD,EACnBnI,KAAKrC,IAAMhK,E,4CAGb,WACE,OAAOqM,KAAKoI,a,IAGd,SAAcxF,GACZ5C,KAAKoI,YAAcxF,I,oBAGrB,WACE,OAAO5C,KAAKqI,W,IAGd,SAAazF,GACX5C,KAAKqI,UAAYzF,I,iCAGnB,WACE,OAAO5C,KAAK7B,wB,IAGd,SAA0ByE,GACxB5C,KAAK7B,uBAAyByE,I,kBAGhC,WACE,OAAO5C,KAAK/B,U,sBAcd,WACE,OAAO+B,KAAK9B,c,sCAiBd,WACE,SAAI8B,KAAK9B,aAAgB8B,KAAK9B,YAAYmK,e,KAzEzBH,GAgEZW,UAAY,SAAClV,EAAYmV,GAC9B,IAAM9H,EAA6B8H,EAAUpI,IAAI/M,GACjD,QAAcgN,GAAVK,EACF,MAAM,IAAIvB,MAAM,kCAAoC9L,GAEtD,OAAOqN,GC7DX,IA2Da+H,GAA+B,SAACC,GACzC,OAAO,IAAIC,KAAKC,aAAa,QAAS,CAClC7S,MAAO,WACP8S,SAAU,MACVC,gBAAiB,eACjBC,sBAAuB,EACvBC,sBAAuB,IACxBC,OAAOC,OAAOR,EAAoBS,QAAQ,aAAc,MAAMA,QAAQ,KAAM,OAAOC,OAAO,OAcpFC,GAAiB,SAACC,GAE3B,GAAK,KAAMxE,KAAKwE,GAAgB,CAC5B,IAAMC,EA7CuB,SAACD,GAClC,IAAIE,EAAiB,GACjBC,EAAW,GAGTC,EAAwCJ,EAAczE,MAAM,aAClE,GAAI6E,EAAc,CACd,IAAMC,EAAmBD,EAAa,GACtCF,EAAiBF,EAAcM,UAAUD,EAAiB3R,QAI9D,IAAM6R,EAAsCL,EAAe3E,MAAM,cACjE,GAAIgF,EAAY,CACZ,IAAMC,EAAiBD,EAAW,GAClCJ,EAAWD,EAAeI,UAAU,EAAGJ,EAAexR,OAAS8R,EAAe9R,QAGlF,OAAOyR,EAASN,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IA2BtBY,CAA6BT,GAE9DU,EAA6B,UAC3BC,EAtFc,SAACV,GACzB,IADkE,EAC9DW,EAAsB,EADwC,eAElDX,GAFkD,IAElE,2BAAsC,CAAC,IAA5BrJ,EAA2B,QACzB,KAALA,GAAiB,KAALA,GAAiB,KAALA,IACxBgK,GAAuB,IAJmC,8BAOlE,OAA2B,GAAvBA,EACO,EAEFA,EAAsB,EAEpB,EAGA,EAuEgBA,CAAoBX,GAI3C,OAHuB,IAAnBU,IACAD,EApE4B,SAACT,GACrC,IAD8E,EAC1EY,EAAqB,EADqD,eAE9DZ,GAF8D,IAE9E,2BAAsC,CAAC,IAA5BrJ,EAA2B,QAClC,GAAIiK,EAAqB,EAErB,MAAO,YAEI,MAANjK,GAAmB,MAANA,GAAmB,MAANA,EAC/BiK,GAAsB,EAGtBA,EAAqB,GAXiD,8BAe9E,MAAO,UAqD8BC,CAAgCb,IAEzC,IAAnBU,GAA2C,IAAnBA,GAAwD,YAA/BD,EAK3B,IAAnBC,EACO,CAAC,EAAG,kBAEyB,cAA/BD,EACE,CAAC,EAAG,8BAGJ,CAAC,EAAG,wBAXR,CAAC,EAAGT,GAiBf,MAAO,CAAC,EAAG,K,iDC3Gb5X,GAAYC,aAAW,SAAC8F,GAAD,MAAQ,CACnC2S,QAAS,CACPrO,cAAe,QAEjBsO,MAAO,CACL/X,QAASgY,eAAWC,QAAQ,GAC5B9X,gBAAiB,eAyDN+X,GArDQ,SAAC3X,GACtB,IAAMb,EAAUN,KAKhB,EAAgC4C,mBAAS,MAAzC,mBAAOmW,EAAP,KAAiBC,EAAjB,KACMC,EAAeC,iBAAuB,MAKtCC,EAAqB,WACzBH,EAAY,OAGRjV,EAAOqV,QAAQL,GACrB,OACE,sBAAKtY,UAAU,UAAU4Y,IAAKJ,EAA9B,UACE,cAAC,KAAD,CACExY,UAAU,iBACV6Y,aAboB,SAACC,GACzBP,EAAYO,EAAMC,gBAadC,aAAcN,EACd,YAAWpV,EAAO,0BAAuB2K,EACzC,gBAAc,SAGhB,cAACgL,GAAA,EAAD,CACEhY,GAAG,qBACHjB,UAAWH,EAAQoY,QACnBpY,QAAS,CACPqY,MAAOrY,EAAQqY,OAEjB5U,KAAMA,EACNgV,SAAUA,EACVY,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,SACVC,WAAY,QAEd7V,QAASmV,EACTY,qBAAmB,EACnBhY,UAAWkX,EAAae,QAlB1B,SAoBE,cAAC,IAAD,CAAkBtY,GAAIP,EAAM8Y,aC9D9BC,G,mDAAAA,GACGC,iBACL,cAAC,IAAD,CAAkBzY,GAAG,8BAFnBwY,GAKGE,wBACL,cAAC,IAAD,CAAkB1Y,GAAG,sCANnBwY,GASGG,mBAAqB,CAC1BC,OAAQ,uBACRC,YAAY,EACZC,SAAS,EACTC,kBAAkB,GAbhBP,GAgBGQ,0BAA4B,SAACC,GAClC,IAAMC,EACe,SAAnBD,EAA4B,cAAgB,aAC9C,OAAO,cAAC,IAAD,CAAkBjZ,GAAIkZ,KAnB3BV,GAsBGW,kCAAoC,WAGzC,OAAO,8BADL,kGAxBAX,GA4BGY,+BAAiC,WAGtC,OAAO,8BADL,iGA9BAZ,GAkCGa,kBACL,gCACE,cAAC,IAAD,CAAkBrZ,GAAG,gCACrB,cAAC,GAAD,CAAgBuY,KAAK,qCArCrBC,GAyCGc,iBACL,cAAC,IAAD,CAAkBtZ,GAAG,+BA1CnBwY,GA6CGe,iBACL,cAAC,IAAD,CAAkBvZ,GAAG,+BA9CnBwY,GAiDGgB,mBAAqB,SAACP,GAC3B,IAAMQ,EAAqBR,EACvB,mBACA,sBAEJ,OAAO,cAAC,IAAD,CAAkBjZ,GAAIyZ,KAtD3BjB,GAyDGkB,qBACL,cAAC,IAAD,CAAkB1Z,GAAG,kCA1DnBwY,GA6DGmB,eAAkB,cAAC,IAAD,CAAkB3Z,GAAG,4BA7D1CwY,GA+DGoB,yBACL,cAAC,IAAD,CAAkB5Z,GAAG,sCAhEnBwY,GAmEGqB,mBACL,gCACE,cAAC,IAAD,CAAkB7Z,GAAG,gCACrB,cAAC,GAAD,CAAgBuY,KAAK,qCAtErBC,GA0EGsB,sBAAwB,SAACC,GAC9B,OACE,gCACE,cAAC,IAAD,CACE/Z,GAAG,0BACHwI,OAAQ,CAAEwR,UAAW,iCAASD,OAEhC,cAAC,GAAD,CAAgBxB,KAAK,iCAjFvBC,GAqFGyB,sBAAwB,SAC7BF,EACAG,GAEA,OACE,gCACE,cAAC,IAAD,CACEla,GAAG,0BACHwI,OAAQ,CACNwR,UAAW,iCAASD,IACpBI,aAAcD,KAGlB,cAAC,GAAD,CAAgB3B,KAAK,iCAlGvBC,GAuGG4B,cAAgB,SAAChP,GACtB,OACE,cAAC,IAAD,CACEpL,GAAG,sBACHwI,OAAQ,CAAE6R,SAAUjP,MA3GtBoN,GAgHG8B,gBAAkB,SAACrB,GACxB,IAAMsB,EAAkBtB,EAAiB,cAAgB,aAEzD,OAAO,cAAC,IAAD,CAAkBjZ,GAAIua,KAnH3B/B,GAsHGgC,oBAAsB,SAACT,GAC5B,OACE,gCACE,cAAC,IAAD,CACE/Z,GAAG,wBACHwI,OAAQ,CAAEwR,UAAW,iCAASD,OAEhC,cAAC,GAAD,CAAgBxB,KAAK,kCA7HvBC,GAkIGiC,8BAAgC,SAACV,GACtC,OACE,8BACE,cAAC,IAAD,CACE/Z,GAAG,6BACHwI,OAAQ,CAAEwR,UAAW,iCAASD,UAvIlCvB,GA6IGkC,oBAAsB,SAC3BX,EACAY,GAEA,OACE,gCACE,cAAC,IAAD,CACE3a,GAAG,wBACHwI,OAAQ,CACNwR,UAAW,iCAASD,IACpBa,YAAaD,KAGjB,cAAC,GAAD,CAAgBpC,KAAK,kCA1JvBC,GA+JGqC,gBAAkB,SACvBC,EACAC,GAEA,OACE,8BACE,cAAC,IAAD,CACE/a,GAAG,0BACHwI,OAAQ,CACNwS,WAAY,iCAASF,IACrBG,WAAY,iCAASF,UAzK3BvC,GAgLG0C,gBAAkB,SACvBJ,EACAC,GAEA,OACE,8BACE,cAAC,IAAD,CACE/a,GAAG,0BACHwI,OAAQ,CACNwS,WAAY,iCAASF,IACrBG,WAAY,iCAASF,UA1L3BvC,GAiMG2C,yBAA2B,SAACxP,GACjC,OACE,8BACE,cAAC,IAAD,CACE3L,GAAG,4BACHwI,OAAQ,CAAEmD,UAAW,iCAASA,UAtMlC6M,GA4MG4C,yBAA2B,SAChCzP,EACA0P,GAEA,OACE,8BACE,cAAC,IAAD,CACErb,GAAG,4BACHwI,OAAQ,CACNmD,UAAW,iCAASA,IACpB2P,iBAAkBD,QAtNxB7C,GA6NG+C,cAAiB,cAAC,IAAD,CAAkBvb,GAAG,2BA7NzCwY,GA+NGgD,cAAiB,sBA/NpBhD,GAgOGiD,YAAe,cAAC,IAAD,CAAkBzb,GAAG,yBAhOvCwY,GAoOGkD,4BACL,gCACE,cAAC,IAAD,CAAkB1b,GAAG,4CACrB,cAAC,GAAD,CAAgBuY,KAAK,iDAvOrBC,GA2OGmD,2BACL,cAAC,IAAD,CAAkB3b,GAAG,+BA5OnBwY,GA+OGoD,sBACL,cAAC,IAAD,CAAkB5b,GAAG,+BAhPnBwY,GAmPGqD,+BAAiC,CACtCjD,OAAQ,wBACRC,YAAY,EACZC,SAAS,EACTC,kBAAkB,GAvPhBP,GA0PGsD,qBACL,cAAC,IAAD,CAAkB9b,GAAG,qCA3PnBwY,GA8PGuD,oBACL,gCACE,cAAC,IAAD,CAAkB/b,GAAG,0CACrB,cAAC,GAAD,CAAgBuY,KAAK,+CAjQrBC,GAqQGwD,qBACL,gCACE,cAAC,IAAD,CAAkBhc,GAAG,yCACrB,cAAC,GAAD,CAAgBuY,KAAK,8CAxQrBC,GA4QGyD,qBACL,gCACE,cAAC,IAAD,CAAkBjc,GAAG,mCACrB,cAAC,GAAD,CAAgBuY,KAAK,wCA/QrBC,GAmRG0D,8BACL,8BACE,cAAC,IAAD,CAAkBlc,GAAG,wCArRrBwY,GAyRG2D,2BACL,8BACE,cAAC,IAAD,CAAkBnc,GAAG,yCA3RrBwY,GAgSG4D,kBAAoB,SAACrC,GAC1B,OACE,8BACE,cAAC,IAAD,CACE/Z,GAAG,4BACHwI,OAAQ,CAAEwR,UAAW,iCAASD,UArSlCvB,GA2SG6D,+BAAiC,WACtC,OAAO,4EA5SL7D,GA+SG8D,0BAA4B,SACjCvC,EACAwC,GAEA,OACE,8BACE,cAAC,IAAD,CACEvc,GAAG,0CACHwI,OAAQ,CACNwR,UAAW,iCAASD,IACpByC,kBAAmB,iCAASD,UAQzB/D,U,0BCrUMiE,G,mDAAAA,GACZC,qCACL,yHAFiBD,GAGZE,6BACL,wDAJiBF,GAKZG,qCACL,oMANiBH,GAOZI,mCACL,kJARiBJ,GASZK,iCACL,sLAViBL,GAWZM,+BACL,mIAZiBN,GAcZO,EAAI,OAdQP,GAeZQ,uCAAyC,EAf7BR,GAesCO,EAftCP,GAgBZS,wCAA0C,EAAI,EAhBlCT,GAiBZU,sCAAwC,EAjB5BV,GAiBqCO,EAjBrCP,GAkBZW,uCAAyC,GAlB7BX,GAmBZY,2CAA6C,EAnBjCZ,GAmB0CO,EAnB1CP,GAoBZa,4CAA8C,EApBlCb,GAqBZc,0CAA4C,EArBhCd,GAqByCO,EArBzCP,GAsBZe,2CAA6C,EAtBjCf,GAuBZgB,kBAAoB,EAAI,EAvBZhB,GAwBZiB,sBAAwB,GAxBZjB,GAwBsBO,EAxBtBP,GA0BZkB,UAAY,CACjB,EAAK,CACH,wEACA,iDAEF,EAAK,CACH,wEACA,iDAEF,EAAK,CACH,wEACA,iDAEF,EAAK,CACH,wEACA,iDAEF,EAAK,CACH,wEACA,iDAEF,EAAK,CACH,wEACA,iDAEF,GAAM,CACJ,yEACA,kDAEF,GAAM,CACJ,yEACA,kDAEF,GAAM,CACJ,2EACA,kDAEF,GAAM,CACJ,yEACA,kDAEF,GAAM,CACJ,yEACA,mDArEelB,GAyEZmB,gBAAkB,CACvB,4BACE,gfACF,oCACE,0zBACF,4BACE,wnBACF,kCACE,yGACF,EAAK,4fACL,mBACE,2MACF,mBACE,oPACF,eACE,4HACF,gBACE,yPACF,oBACE,oSACF,oBACE,yOACF,oBACE,yQACF,uCACE,yJCtFN,ICAIC,GACAC,GAEAC,GDgBSC,GAAqB,SAC9BC,GAEA,IADiC,EAC3BC,EAA0B,IAAIpT,IAI9BqT,EAAgD,GALrB,eAOEF,GAPF,IAOjC,2BAA8D,CAAC,IAApDG,EAAmD,QAC1D,GAAKF,EAAwBG,IAAID,EAAqB/Q,QAI/C,CACH,IAAMiR,EAA8BJ,EAAwBnR,IACxDqR,EAAqB/Q,QAEE,OAA3BiR,QAA2B,IAA3BA,KAA6Bpa,KAAKka,QACEpR,IAAhCsR,GACAJ,EAAwBK,IACpBH,EAAqB/Q,OACrBiR,QAXRJ,EAAwBK,IAAIH,EAAqB/Q,OAAQ,CACrD+Q,KAVqB,oCApBjCI,EAoBiC,eA0BfN,EAAwB9J,QA1BT,IA0BjC,2BAAkD,CAAC,IAAxCzR,EAAuC,QACxC8b,EAAeP,EAAwBnR,IAAIpK,QAC5BqK,IAAjByR,GACAN,EAAcja,KAtCf,CACHmJ,QAZJmR,EAiDwDC,GA/CjB,GAAGpR,OAWtCqR,KAVYF,EAAmBG,QAAO,SAACC,EAAaje,GACpD,OAAOie,EAAcje,EAAK+d,OAC3B,GASCG,OARgBL,EAAmBG,QAAO,SAACG,EAAYC,GAEvD,OADAD,EAAI5a,KAAK6a,EAAKF,QACPC,IACR,OAW8B,8BAgCjC,OAAOX,GAGEa,GAA6B,SAA7BA,EACT9Z,EACA7D,EACA4d,GAG6B,IAF7BC,EAE4B,4DAFWlS,EACvCmS,EAC4B,wDACxBC,EAAiD,GACrD,GAA2B,IAAvBH,EAAYta,OACZ,OAAOya,EAGX,IAN4B,EAMtBC,EAAa,EAAIJ,EAAYta,OANP,eAQPsa,GARO,yBAQjB5R,EARiB,QASlBiS,EAAuBpK,GAAU7H,EAAQhM,EAAMuM,YAC/C2R,EAAa7S,GAAQW,EAAQhM,EAAMkL,SACzC,GAAI+S,EAAa5K,UACb,GAAyB,IAArBwK,QAEG,GAIM,IAHTM,GACID,EACAle,GACF,GACJ,CACE,IAAI8d,EAsCA,MAAM,CAAN,EAAO,IArCP,IADe,EACXM,EACAT,EACI9Z,EACA7D,EACAke,EAAWnV,UAEfsV,EAAY,EAPD,eAQID,GARJ,IAQf,2BAA8B,CAC1BC,GAD0B,QACRhB,MATP,8BAWf,IAAMiB,EAA8C,GACpD,GAAkB,IAAdD,EAAiB,CAAC,IAAD,iBACED,GADF,IACjB,2BAA8B,CAAC,IAApB9e,EAAmB,QAC1Bgf,EAAiBzb,KAAK,CAClBmJ,OAAQ1M,EAAK0M,OACbqR,KAAM/d,EAAK+d,KAAOgB,EAClBb,OAAQle,EAAKke,UALJ,8BAQjBY,EAAYE,EAGhB,IAvBe,EAuBTC,EACF,GAxBW,eAyBIH,GAzBJ,IAyBf,2BAA8B,CAAC,IAApB9e,EAAmB,QAC1Bif,EAAyB1b,KAAK,CAC1BmJ,OAAQ1M,EAAK0M,OACbqR,KAAM/d,EAAK+d,KAAOW,EAClBR,OAAQle,EAAKke,OAAO9I,OAAO,CACvBuJ,EAAa7K,iBA9BV,8BAkCf2K,EAAsBA,EAAoBrJ,OACtC6J,OAKL,CACH,IADG,EACCH,EAAYT,EACZ9Z,EACA7D,EACAke,EAAWlV,WAETwV,EAAqD,GACvDH,EAAY,EAPb,eAQgBD,GARhB,IAQH,2BAA8B,CAAC,IAApB9e,EAAmB,QAC1B+e,GAAa/e,EAAK+d,MATnB,8BAWe,IAAdgB,IACAD,EAAU/e,KAAI,SAACof,GACXD,EAAmB3b,KAAK,CACpBmJ,OAAQyS,EAAezS,OACvBqR,KAAMoB,EAAepB,KAAOgB,EAC5Bb,OAAQiB,EAAejB,YAG/BY,EAAYI,GAEhB,IAAMD,EACF,GACJH,EAAU/e,KAAI,SAACof,GACXF,EAAyB1b,KAAK,CAC1BmJ,OAAQyS,EAAezS,OACvBqR,KAAMoB,EAAepB,KAAOW,EAC5BR,OAAQiB,EAAejB,OAAO9I,OAC1BuJ,EAAa7K,kBAKzB2K,EAAsBA,EAAoBrJ,OACtC6J,QAIRR,EAAoBlb,KAAK,CACrBmJ,OAAQiS,EAAa7K,YACrBiK,KAAMW,EACNR,OAAQ,MA7FpB,2BAAkC,CAAC,IAAD,yCARN,8BAyG5B,IAzG4B,EAyGxBa,EAAY,EAzGY,eA0GTN,GA1GS,IA0G5B,2BAAwC,CAAC,IAA9Bze,EAA6B,QACpC+e,GAAa/e,EAAK+d,MA3GM,8BA8G5B,GAAkB,IAAdgB,EAAiB,CACjB,IADiB,EACXE,EAA2D,GADhD,eAEER,GAFF,IAEjB,2BAAwC,CAAC,IAA9Bze,EAA6B,QACpCif,EAAyB1b,KAAK,CAC1BmJ,OAAQ1M,EAAK0M,OACbqR,KAAM/d,EAAK+d,KAAOgB,EAClBb,OAAQle,EAAKke,UANJ,8BASjBO,EAAsBA,EAAoBrJ,OACtC6J,GAIR,OAAIvb,IAAE0b,QAAQX,EAAqB,IAAY,GACxCA,GE3LLrQ,GAAQC,eACRgR,GAAO9Q,YAAW,CAAEC,OAAQ,QAASL,SAAUM,IAASL,IAoCjDkR,GAAb,cAqBE,WACE5S,EACAnI,EACA7D,EACA6e,GAEC,IAAD,OADAC,EACA,4DADOnT,EACP,0BA1BF3L,WA0BE,OAzBF6D,oBAyBE,OAxBFmI,YAwBE,OAvBF+S,SAA0B,KAuBxB,KAtBFC,cAAgB,GAsBd,KArBFC,mBAqBE,OApBFC,sBAoBE,OAnBFC,mCAAqC,GAmBnC,KAlBFC,+BAA2C,GAkBzC,KAjBFC,8BAAgC,EAiB9B,KAhBFC,mBAAqB,EAgBnB,KAfFC,iBAAmB,GAejB,KAdFC,yBAA2B,EAczB,KAbFC,0BAA4B,EAa1B,KAZFC,mBAAqD,GAYnD,KAXFC,sBAAwD,GAWtD,KAVFC,iBAAmD,GAUjD,KATFd,UASE,OARFD,qBAQE,OAPF3S,eAOE,OASF2T,sBAAwB,gBACFlU,IAAhB,EAAKK,SAGTvG,QAAQC,IAAI,0BACZ,EAAKoa,yCAdL,KAiBFC,2BAA6B,WAC3Bta,QAAQC,IAAI,0BADqB,MAI/ByY,GACE,EAAKne,MAAMiM,SACX,EAAKjM,OANwB,mBAGhC,EAAKif,cAH2B,KAGZ,EAAKC,iBAHO,KAS7B,EAAKlT,OAAOlB,wBACd,EAAKiU,SAAW,EAAK/S,OAAO/C,QAC5B,EAAK+V,cAAgBL,GAAK3Q,cAAc,CACtCrP,GAAI,qCAGN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,+DAGR,EAAK0gB,8BACHjE,GAAqBQ,uCACI,IAAvB,EAAKqD,cACP,EAAKM,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,4DAGN,EAAK4gB,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,8DAIR,EAAKogB,SAAW,KAChB,EAAKK,+BAAiC,GACtC,EAAKG,iBAAmBnE,GAAqBE,6BAC7C,EAAK+D,8BAAgC,IApDvC,KAwDFW,+BAAiC,WAC/Bva,QAAQC,IAAI,2CAEZ,EAAKoa,wCA3DL,KA8DFG,cAAgB,SAACC,GACf,OAAQA,GACN,KAAK,EACH,EAAKL,wBACL,MACF,KAAK,EACH,EAAKE,6BACL,MACF,KAAK,EACH,EAAKC,iCACL,MACF,QACEva,QAAQC,IAAI,iBA1EhB,KA8EFoa,qCAAuC,WAAO,IAAD,EAEzC3B,GACE,EAAKne,MAAMiM,SACX,EAAKjM,OAJkC,mBAC1C,EAAKif,cADqC,KACtB,EAAKC,iBADiB,KAMvC,EAAKlT,OAAOlB,wBACd,EAAKiU,SAAW,EAAK/S,OAAO/C,QAC5B,EAAK+V,cAAgBL,GAAK3Q,cAAc,CACtCrP,GAAI,0CAGqBgN,IAAvB,EAAKsT,eAA+B,EAAKA,cAAgB,GAC3D,EAAKE,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,kEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,8DAGR,EAAK0gB,8BAAgC,EACrC,EAAKC,mBAAqB,EAC1B,EAAKC,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,uDAE0B,IAAvB,EAAKsgB,eACd,EAAKE,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,kEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,mEAGR,EAAK0gB,8BACHjE,GAAqBQ,uCACvB,EAAK0D,mBACHlE,GAAqBS,wCACvB,EAAK0D,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,0CAE0B,IAAvB,EAAKsgB,gBACd,EAAKE,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,kEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,mEAGR,EAAK0gB,8BACHjE,GAAqBU,sCACvB,EAAKwD,mBACHlE,GAAqBW,uCACvB,EAAKwD,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,2CAGC,EAAKqN,OAAOjB,4BACrB,EAAKgU,SAAW,EAAK/S,OAAO9C,YAC5B,EAAK8V,cAAgBL,GAAK3Q,cAAc,CACtCrP,GAAI,0CAGqBgN,IAAvB,EAAKsT,eAA+B,EAAKA,cAAgB,GAC3D,EAAKE,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,oEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,oEAGR,EAAK0gB,8BAAgC,EACrC,EAAKC,mBAAqB,EAC1B,EAAKC,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,2DAE0B,IAAvB,EAAKsgB,eACd,EAAKE,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,oEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,oEAGR,EAAK0gB,8BACHjE,GAAqBY,2CACvB,EAAKsD,mBACHlE,GAAqBa,4CACvB,EAAKsD,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,4DAE0B,IAAvB,EAAKsgB,eACd,EAAKE,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,oEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,oEAGR,EAAK0gB,8BACHjE,GAAqBc,0CACvB,EAAKoD,mBACHlE,GAAqBe,2CACvB,EAAKoD,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,6DAE0B,IAAvB,EAAKsgB,gBACV,EAAKC,kBAAoB,EAAKA,kBAAoB,GACpD,EAAKC,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,oEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,oEAGR,EAAK0gB,8BAAgC,EAAIjE,GAAqBO,EAC9D,EAAK2D,mBAAqB,EAC1B,EAAKC,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,6DAGN,EAAKwgB,mCAAqCR,GAAK3Q,cAAc,CAC3DrP,GAAI,oEAEN,EAAKygB,+BAA+Bvc,KAClC8b,GAAK3Q,cAAc,CACjBrP,GAAI,oEAGR,EAAK0gB,8BAAgC,EACrC,EAAKC,mBAAqB,EAC1B,EAAKC,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,gEAKV,EAAKogB,SAAW,KAChB,EAAKK,+BAAiC,GACtC,EAAKC,8BAAgC,EACrC,EAAKC,mBAAqB,EAC1B,EAAKC,iBAAmBZ,GAAK3Q,cAAc,CACzCrP,GAAI,sDAlOR,KAuOFwhB,4BAA8B,SAC5BzH,EACA1Y,GAgCA,OA9BA,EAAKwf,yBAA2BY,KAAKC,IACnC,EAAKrgB,MAAMkM,UACXkU,KAAKE,IACH,EAAKjB,8BACL,EAAKC,mBAAqB,EAAKtf,MAAMkM,YAGzC,EAAKuT,0BACH,EAAKzf,MAAMkM,UAAY,EAAKsT,yBACS,IAAnC,EAAKC,2BACP,EAAKC,mBACH,EAAKa,6CACH7H,EACA,EAAK7U,eACL7D,GAEJ,EAAK4f,iBAAmBjD,GAAmB,EAAK+C,oBAEhD,EAAKE,iBAAiBvgB,KAAI,SAACmhB,GACzB,OAAO,EAAKb,sBAAsB9c,KAAK,CACrCmJ,OAAQwU,EAAgBxU,OACxBqR,KAAMmD,EAAgBnD,KAAO,EAAKoC,0BAClCjC,OAAQgD,EAAgBhD,cAI5B,EAAKkC,mBAAqB,GAC1B,EAAKE,iBAAmB,GACxB,EAAKD,sBAAwB,IAExB,EAAKA,uBAzQZ,KA4QFc,iCAAmC,SACjC/H,EACA1Y,GAEA,EAAKwf,yBAA2BY,KAAKC,IACnC,EAAKnU,UACL,EAAKmT,+BAGP,EAAKI,0BAA4BW,KAAKC,IACpC,EAAKnU,UAAY,EAAKsT,yBACtB,EAAKtT,UAAYkP,GAAqBgB,kBACtChB,GAAqBiB,sBAAwB,EAAKrQ,OAAOhD,UAAU1F,QAG9B,IAAnC,EAAKmc,4BACP,EAAKC,mBACH,EAAKa,6CACH7H,EACA,EAAK7U,eACL7D,GAEJ,EAAK4f,iBAAmBjD,GAAmB,EAAK+C,oBAEhD,EAAKE,iBAAiBvgB,KAAI,SAACmhB,GACzB,OAAO,EAAKb,sBAAsB9c,KAAK,CACrCmJ,OAAQwU,EAAgBxU,OACxBqR,KAAMmD,EAAgBnD,KAAO,EAAKoC,0BAClCjC,OAAQgD,EAAgBhD,cAxS9B,KA8SF+C,6CAA+C,SAC7CvU,EACAnI,EACA7D,GAEA,IAAMke,EAAa7S,GAAQW,EAAQhM,EAAMkL,SACnCwV,EAAe7M,GAAU7H,EAAQhM,EAAMuM,YACvC0S,EAAgBd,GACpBD,EACAle,GACA,GACF,GAAsB,IAAlBif,EACF,OAAOtB,GACL9Z,EACA7D,EACAke,EAAWlV,WAER,GAAsB,IAAlBiW,EAAqB,CAC9B,IAAM0B,EAAoBtV,GACxB6S,EAAWnV,SAAS,GACpB/I,EAAMkL,SACNjC,QACF,OACGyX,EAAanN,WACdoN,IAAsBzC,EAAWnV,SAAS,GAQnC4U,GACL9Z,EACA7D,EACAke,EAAWnV,cACX4C,GACA,GAXKgS,GACL9Z,EACA7D,EACAke,EAAWnV,UAWV,GAAsB,IAAlBkW,EAAqB,CAC9B,IAD8B,EACxB2B,EAAqBjD,GACzB9Z,EACA7D,EACAke,EAAWnV,SACX,GAEE8X,EAAM,EAPoB,eAQTD,GARS,IAQ9B,2BAAyC,WAErCC,GAAY,IAVc,8BAa9B,IAAMC,EAAyD,GAQ/D,OAPAF,EAAmBvhB,KAAI,SAAC0hB,GACtBD,EAAuBje,KAAK,CAC1BmJ,OAAQ+U,EAAkB/U,OAC1BqR,KAAM0D,EAAkB1D,KAAOwD,EAC/BrD,OAAQuD,EAAkBvD,YAGvBsD,EACF,MAA6D,IA3WpE9V,KAAKhL,MAAQA,EACbgL,KAAKnH,eAAiBA,EACtBmH,KAAKgB,OAASX,GAAQW,EAAOrD,IAAKqC,KAAKhL,MAAMkL,SAC7CF,KAAK8T,KAAOA,EACZ9T,KAAK6T,gBAAkBA,EACvB7T,KAAKkB,UAAYlM,EAAMkM,aC3ErBwB,GAAQC,eAGDqT,IAFAnT,YAAW,CAAEC,OAAQ,QAASL,SAAUM,IAASL,IAE9D,oDAKE,WACE1B,EACAnI,EACA7D,GAEC,IAAD,EADA8e,EACA,4DADOnT,EACP,6BACA,cAAMK,EAAQnI,EAAgB7D,EAAO,EAAG8e,IAV1C9e,WASE,IARF6D,oBAQE,IAPFmI,YAOE,IANF8S,UAME,EAEA,EAAK9e,MAAQA,EACb,EAAK6D,eAAiBA,EACtB,EAAKmI,OAASX,GAAQW,EAAOrD,IAAK,EAAK3I,MAAMkL,SAC7C,EAAK4T,KAAOA,EALZ,EAVJ,wBAA4CF,KCR/BqC,GAASC,cAAWC,OAAO,CACtCC,KAAM,CACJpjB,gBAAiB,QACjBX,MAAO,QACPD,WAAY,cACZikB,cAAe,SACf5hB,YAAa,GACb6hB,aAAc,GACdC,cAAe,IAEjBC,QAAS,CACPC,OAAQ,IAEVliB,OAAQ,CACN3B,SAAU,GACV8jB,aAAc,GACd3jB,UAAW,SACXV,MAAO,OACPD,WAAY,eAEdukB,QAAS,CACP/jB,SAAU,GACVP,MAAO,UACPqkB,aAAc,GACd5jB,eAAgB,aAElB8jB,WAAY,CACVhkB,SAAU,GACVP,MAAO,UACPD,WAAY,kBAEdykB,iBAAkB,CAChBjkB,SAAU,GACVP,MAAO,UACPD,WAAY,kBAEd0kB,UAAW,CACTlkB,SAAU,GACVR,WAAY,cACZqkB,OAAQ,IAEVM,WAAY,CACVha,SAAU,WACVnK,SAAU,GACVokB,OAAQ,GACRC,KAAM,EACNC,MAAO,EACPnkB,UAAW,SACXV,MAAO,QAET8kB,UAAW,CACT/kB,WAAY,aACZa,WAAY,KAEdmkB,YAAa,CACXhlB,WAAY,eACZilB,UAAW,UAEbC,SAAU,CACRllB,WAAY,cACZC,MAAO,WAETklB,eAAgB,CACdvkB,gBAAiB,OACjBwkB,YAAa,EACb5kB,SAAU,GACVG,UAAW,UAEb0kB,aAAc,CACZzkB,gBAAiB,QACjBwkB,YAAa,EACb5kB,SAAU,GACVG,UAAW,UAEb2kB,UAAW,CACTA,UAAW,IAEbC,QAAS,CACPtlB,MAAO,WAETulB,UAAW,CACT5kB,gBAAiB,SAEnB6kB,MAAO,CACL7kB,gBAAiB,QACjB0kB,UAAW,MChFFI,GAAO,SAAC1kB,GAAD,OAClB,cAAC,QAAD,CAAMiD,MAAO4f,GAAOkB,UAApB,SAAgC/jB,EAAM2kB,YCD3BC,GAAS,SAAC5kB,GAAD,OACpB,cAAC,QAAD,CAAMiD,MAAO4f,GAAOmB,YAApB,SAAkChkB,EAAM2kB,YCH7BE,I,OAAmB,SAACC,GAC/B,OAAOjP,KAAKC,aAAa,QAAS,CAChC7S,MAAO,WACP8S,SAAU,MACVgP,aAAa,IAEZ5O,OAAO2O,GACPzO,QAAQ,KAAM,OACdA,QAAQ,IAAK,OAiBL2O,GAAsB,SACjCC,EACA9G,EACAD,GAEA,IAAMgH,EAAcC,GAAeF,EAAgB/G,GACnD,OACE,eAAC,QAAD,WACG,OACD,eAAC,GAAD,6BAAmB+G,EAAnB,OAA2C,IAC3C,cAAC,GAAD,UAAS9G,EAAgB8G,KACxB,OACD,cAAC,QAAD,UAAOC,QAKAC,GAAiB,SAACF,EAAwB/G,GACrD,IAAMkH,EAAsBH,EAAe5O,QAAQ,UAAW,IACxDgP,EAAgBC,GAAcpH,EAAUkH,IAC9C,OACE,eAAC,QAAD,yEACwDC,EADxD,QAMEC,GAAgB,SAACC,GACrB,OACE,cAAC,QAAD,CAAMC,IAAKD,EAAS,GAApB,SACE,cAAC,QAAD,UAAOA,EAAS,QAKTE,GAA0B,SACrCC,GAEA,GAAqB,IAAjBA,EAAMxgB,OACR,OAAO,KAET,IAAIygB,EAAID,EAAME,OAAO,EAAG,GAAG,GAI3B,OAHAF,EAAMzkB,KAAI,SAAC4kB,GACTF,EAAC,UAAMA,EAAN,0DAAyDE,MAErDF,GAAQ,IAGJG,GAA2B,SACtC1G,GAEA,IADW,EACL2G,EAAkC,GAD7B,eAES3G,GAFT,IAEX,2BAA4B,CAAC,IAAlBsG,EAAiB,QACpBM,EAA+BP,GAAwBC,GACvC,OAAlBM,GAAmD,IAAzBA,EAAc9gB,QAC1C6gB,EAAiBthB,KAAKuhB,IALf,8BAQX,IAAMC,EAAIF,EAAiB7gB,OACvB4T,EAAO,GACX,OAAU,IAANmN,EAAgB,GACL,IAANA,EACPnN,EAAI,iCAA6BiN,EAAiB,KAGlDjN,EAAO,0BACPiN,EAAiB9kB,KAAI,SAACilB,EAAKC,GACrBD,GAAsB,IAAfA,EAAIhhB,OACb4T,GAAI,UAAOqN,GACFD,GAAOA,EAAIhhB,SAAW+gB,EAAI,EACnCnN,GAAI,oCAAiCqN,GAErCrN,GAAI,kCAA+BqN,MAGhCrN,ICnFLsN,GAAmB,SACvB/E,EACA7R,GAEA,GAAkC,IAA9B6R,EACF,OACE,cAAC,QAAD,CAAMpe,MAAO4f,GAAOa,UAApB,wDAIG,QACmBnW,IAAxBiC,EAAMqR,eACmB,IAAxBrR,EAAMqR,eACLrR,EAAMsR,kBACNtR,EAAMsR,iBAAmB,EAC3B,CACA,IAAImE,EAAiB,kCACfoB,EAAkBrB,GACtBC,EACAjI,GAAqBmB,gBACrBnB,GAAqBkB,WAIjBoI,EAAkBtB,GADxBC,EAAiB,uCAGfjI,GAAqBmB,gBACrBnB,GAAqBkB,WAEvB,OACE,eAAC,QAAD,WACE,cAAC,QAAD,CAAMjb,MAAO4f,GAAOa,UAApB,uDAGA,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOa,UAApB,SAAgC2C,IAChC,eAAC,QAAD,WACE,cAAC,QAAD,CAAMpjB,MAAO4f,GAAOW,WAApB,8BACA,cAAC,GAAD,UAAOqB,GAAiBrV,EAAM6R,6BAC9B,eAAC,QAAD,CAAMpe,MAAO4f,GAAOa,UAApB,UACG,IADH,iEAIA,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOa,UAApB,SAAgC4C,UAKtC,OACE,eAAC,QAAD,WACE,eAAC,QAAD,CAAMrjB,MAAO4f,GAAOa,UAApB,8BACiB,IACf,cAAC,GAAD,UAAOmB,GAAiBxD,KAF1B,mJAImE,IAChE7R,EAAMqR,cACN0F,GACC/W,EAAMqR,cACN7D,GAAqBmB,gBACrBnB,GAAqBkB,cAGzB,eAAC,QAAD,CAAMjb,MAAO4f,GAAOa,UAApB,UACG,OACA8C,GAA2BhX,UAOhC+W,GAAe,SACnB1F,EACA1C,EACAD,GAEA,IAAI+G,EAAiB,GACjBwB,EAAW,GACO,IAAlB5F,GACFoE,EAAiB,4BACjBwB,EAAW,8CACgB,IAAlB5F,GACToE,EAAiB,oCACjBwB,EAAW,iDACgB,IAAlB5F,GACToE,EAAiB,4BACjBwB,EAAW,sDAEXpf,QAAQC,IAAI,mBAEd,IAAMof,EAAqB1B,GACzBC,EACA9G,EACAD,GAEF,OACE,eAAC,QAAD,WACE,cAAC,QAAD,UAAOuI,IACP,cAAC,QAAD,UAAOC,QAKPF,GAA6B,SAAChX,GAElC,IADA,IAAImX,EACJ,MAAgB3hB,OAAOC,QAAQuK,EAAM+R,uBAArC,eAA6D,CAAxD,IACGqF,EADI,KACQ,GAClBD,EACE,eAAC,QAAD,mCACuB,cAAC,GAAD,UAAOC,EAAQhZ,SADtC,gBACkE,IAChE,eAAC,GAAD,WAAOiX,GAAiB+B,EAAQ3H,MAAhC,OACC6G,GAAyB,CAACc,EAAQxH,SAHrC,OAOJ,OAAOuH,GAGME,GAhIQ,SAACrX,GACtB,IAAM6R,EAA4B7R,EAAM6R,0BAClCyF,EAAgBV,GAAiB/E,EAA2B7R,GAClE,OACE,cAAC,QAAD,UACE,cAAC,QAAD,UAAOsX,OCOPV,GAAmB,SACvBW,EACAvX,GAEA,IAAM6R,EAA4BwD,GAAiBkC,GAE7CC,EAAuBhC,GADN,oBAGrBhI,GAAqBmB,gBACrBnB,GAAqBkB,WAEjB+I,EAA2BT,GAA2BhX,GAC5D,OAAwC,IAApCA,EAAM6R,0BAEN,cAAC,QAAD,CAAMpe,MAAO4f,GAAOa,UAApB,wDAMA,eAAC,QAAD,CAAMzgB,MAAO4f,GAAOa,UAApB,UACE,cAAC,GAAD,UAAOrC,IAAkC,IACzC,cAAC,QAAD,CAAMpe,MAAO4f,GAAOa,UAApB,2HAIA,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOa,UAApB,SAAgCsD,IAC/B,OACD,cAAC,QAAD,CAAM/jB,MAAO4f,GAAOa,UAApB,SAAgCuD,QAsClCT,GAA6B,SAAChX,GAElC,IADA,IAAImX,EACJ,MAAgB3hB,OAAOC,QAAQuK,EAAM+R,uBAArC,eAA6D,CAAxD,IACGqF,EADI,KACQ,GAClBD,EACE,eAAC,QAAD,CAAM1jB,MAAO4f,GAAOa,UAApB,kCACuB,cAAC,GAAD,UAAOkD,EAAQhZ,SADtC,gBACkE,IAChE,eAAC,GAAD,WAAOiX,GAAiB+B,EAAQ3H,MAAhC,OACC6G,GAAyB,CAACc,EAAQxH,SAHrC,OAOJ,OAAOuH,GAGMO,GA7Fa,SAAC1X,GAC3B,IAAM6R,EAA4B7R,EAAM6R,0BAClCyF,EAAgBV,GAAiB/E,EAA2B7R,GAElE,OACE,cAAC,QAAD,UACE,cAAC,QAAD,UAAOsX,OCVAK,GAAY,SAACnnB,GACxB,GAAIA,EAAMonB,gBAAiB,CACzB,IAAM5X,EAAQ6X,qBAAWC,IAAaC,uBAChCC,EAAqBX,GAAerX,GAE1C,OACE,eAAC,QAAD,CAAMvM,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOY,iBAApB,uBACC+D,KAIL,IAAMhY,EAAQ6X,qBAAWC,IAAaI,wBAChCC,EAA0BT,GAAoB1X,GACpD,OACE,eAAC,QAAD,CAAMvM,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOY,iBAApB,uBACCkE,MCdHC,GAAsB,SAACpY,GAC3B,IAAMqY,EAAcpS,GAClBjG,EAAM5B,OAAOrD,IACbiF,EAAM5N,MAAMuM,YACZ6G,YACI8S,EAAiBjD,GAAiBrV,EAAM5N,MAAMkM,WAC9CsT,EAA2ByD,GAC/BrV,EAAM4R,0BAEFC,EAA4BwD,GAChCrV,EAAM6R,2BAEF0G,EAAqBlD,GACzBrV,EAAM1B,UACJ0B,EAAM4R,yBACN5R,EAAM6R,2BAEV,OACE,eAAC,QAAD,CAAMpe,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,gGAGQ,IACR,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOkB,UAApB,SAAgC8D,IAAoB,IACpD,cAAC,QAAD,CAAM5kB,MAAO4f,GAAOa,UAApB,kDAAwE,IACxE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOkB,UAApB,SAAgC+D,IAC/B,SACD,cAAC,QAAD,CAAM7kB,MAAO4f,GAAOkB,UAApB,SAAgC3C,IAAiC,IACjE,cAAC,QAAD,CAAMne,MAAO4f,GAAOa,UAApB,yCAA+D,IAC/D,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOkB,UAApB,SAAgC1C,IAAkC,IAClE,cAAC,QAAD,CAAMpe,MAAO4f,GAAOa,UAApB,mDAAyE,IACzE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOkB,UAApB,SAAgCgE,IAA2B,IAC3D,cAAC,QAAD,CAAM9kB,MAAO4f,GAAOa,UAApB,+CClCOsE,GAAmB,SAAChoB,GAG/B,GAAIA,EAAMonB,gBAAiB,CACzB,IACMa,ECqCuB,SAACzY,GAIhC,MAAO,CACL0Y,kBAJwBrD,GAAiBrV,EAAM5N,MAAMkM,WAKrDqa,aAHmB1S,GAAU,EAAGjG,EAAM5N,MAAMuM,YAAY6G,aDxC/BoT,CADXf,qBAAWC,IAAaC,wBAEtC,OACE,eAAC,QAAD,CAAMtkB,MAAO,CAAC4f,GAAOO,SAAUqE,MAAM,EAArC,UACE,cAAC,QAAD,CAAMxkB,MAAO,CAAC4f,GAAOU,QAAS,CAAE5jB,UAAW,WAA3C,8BAGA,eAAC,QAAD,CAAMsD,MAAO4f,GAAOa,UAApB,2FAEY,cAAC,GAAD,UAAOuE,EAAiBE,eAFpC,mCAGiB,cAAC,GAAD,UAAOF,EAAiBC,oBAHzC,UAQJ,IACMG,EDtB4B,SAAC7Y,GACrC,OAAOoY,GAAoBpY,GCqBF8Y,CADTjB,qBAAWC,IAAaI,yBAEtC,OAAO,cAAC,QAAD,CAAMD,MAAM,EAAZ,SAAoBY,K,SElBlBE,GAAe,SAACvoB,GAG3B,IAAMwoB,EAAaxoB,EAAMyoB,aACzB,OACE,eAAC,SAAD,CAAO/jB,KAAM8jB,EAAb,UACE,eAAC,eAAD,WACE,cAAC,aAAD,CAAWvlB,MAAO4f,GAAOsB,eAAzB,uBACA,cAAC,aAAD,CAAWlhB,MAAO4f,GAAOsB,eAAzB,kBACA,cAAC,aAAD,CAAWlhB,MAAO4f,GAAOsB,eAAzB,yBAEF,eAAC,aAAD,WACE,cAAC,iBAAD,CACElhB,MAAO4f,GAAOwB,aACdqE,WAAY,SAACC,GAAD,OAAOA,EAAEC,gBAEvB,cAAC,iBAAD,CACE3lB,MAAO4f,GAAOwB,aACdqE,WAAY,SAACC,GAAD,OAAOA,EAAEE,gBAEvB,cAAC,iBAAD,CACE5lB,MAAO4f,GAAOwB,aACdqE,WAAY,SAACC,GAAD,OAAOA,EAAEG,sBCxBlBC,GAAe,SAC1BvZ,GAEA,IAAMwZ,EAAgBC,GAAiBzZ,GACjC0Z,EAAQ,cAAC,GAAD,CAAcT,aAAcO,IACpCG,EACJ,cAAC,QAAD,CAAMlmB,MAAO4f,GAAOa,UAApB,iCAEF,OAAOsF,EAAc9jB,OAAS,EAAIgkB,EAAQC,GAG/BF,GAAmB,SAC9BzZ,GAEA,IAAMiZ,EAAwC,GAC9C,GAAuB,OAAnBjZ,EAAMmR,SAAmB,CAC3B,IAAMyI,EAAgB3T,GACpBjG,EAAMmR,SACNnR,EAAM5N,MAAMuM,YACZ6G,YACI8T,EAAcjE,GAAiBrV,EAAM4R,0BAC3CqH,EAAa,GAAK,CAChBG,aAAcQ,EACdP,aAAcrZ,EAAMoR,cACpBkI,YAAaA,GAXW,qBAcFtZ,EAAM+R,uBAdJ,IAc5B,2BAAuD,CAAC,IAA7C8H,EAA4C,QACrD,GAAIA,EAAa,CACf,IAAMC,EAAc,CAClBV,aAAcS,EAAYzb,OAC1Bib,aAAa,WAAD,OAAarZ,EAAMqR,cAAnB,qBACZiI,YAAajE,GAAiBwE,EAAYpK,OAE5CwJ,EAAahkB,KAAK6kB,KArBM,8BAqC5B,OAZE9Z,EAAM6R,0BAA4B,SACT9T,IAAxBiC,EAAMqR,eACoB,IAAxBrR,EAAMqR,eACLrR,EAAMsR,kBACNtR,EAAMsR,iBAAmB,KAE7B2H,EAAa,GAAK,CAChBG,aAAc,IACdC,aAAc,mBACdC,YAAajE,GAAiBrV,EAAM6R,6BAGjCoH,GCzCIc,GAAU,SAACvpB,GACtB,IAAMwP,EAAQ6X,qBAAWC,IAAaC,uBACtC,GAAIvnB,EAAMonB,gBAAiB,CACzB,IAAMoC,EAAeT,GAAavZ,GAElC,OACE,eAAC,QAAD,CAAMvM,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOY,iBAApB,wBACA,cAAC,QAAD,CAAMxgB,MAAO4f,GAAOyB,UAApB,SAAgCkF,OAIpC,IAAMha,EAAQ6X,qBAAWC,IAAaI,wBAChC+B,EAAoBV,GAAavZ,GACvC,OACE,eAAC,QAAD,CAAMvM,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOY,iBAApB,wBACA,cAAC,QAAD,CAAMxgB,MAAO4f,GAAOyB,UAApB,SAAgCmF,QC+BlCC,GAAgC,SAClCvI,EACAiI,EACAhI,EACAC,EACAsI,GAEA,GACI,CACI3M,GAAqBE,6BACrBF,GAAqBC,sCACvB/P,SAASiU,GAEX,OAAO,cAAC,QAAD,CAAMle,MAAO4f,GAAOa,UAApB,SAAgCvC,IACpC,GACH,CACInE,GAAqBM,+BACrBN,GAAqBK,iCACrBL,GAAqBI,mCACrBJ,GAAqBG,sCACvBjQ,SAASiU,GACb,CACE,IAAMyI,EACF,eAAC,QAAD,CAAM3mB,MAAO4f,GAAOa,UAApB,UACKvC,EADL,gCACoD,IAChD,cAAC,GAAD,UAAOiI,IAFX,2BAEyD,IACpDhI,EAHL,OAOEyI,EACF,eAAC,QAAD,WACK1I,EADL,gCACoD,IAChD,cAAC,GAAD,UAAOiI,IAFX,iCAE+D,IAC1DhI,EAHL,OAMJ,OAAOuI,EAAYC,EAA4BC,EAE/C,IAAMC,EACF,eAAC,QAAD,CAAM7mB,MAAO4f,GAAOa,UAApB,UACK,IACAvC,EAFL,gCAEoD,IAChD,cAAC,GAAD,UAAOiI,IAHX,2BAGyD,IACrD,cAAC,GAAD,UAAOhI,IAJX,qBAI8D,IAC1D,cAAC,GAAD,UAAOC,IALX,0BAQE0I,EACF,eAAC,QAAD,CAAM9mB,MAAO4f,GAAOa,UAApB,UACK,IACAvC,EAFL,gCAEoD,IAChD,cAAC,GAAD,UAAOiI,IAHX,iCAG+D,IAC3D,cAAC,GAAD,UAAOhI,IAJX,OAOJ,OAAOuI,EAAYG,EAA8BC,GAI1CC,GArHe,SAC1Bxa,GAEA,IAAI4Z,EAAgB,YAChB5Z,EAAMmR,WACNyI,EAAgB3T,GACZjG,EAAMmR,SACNnR,EAAM5N,MAAMuM,YACd6G,aAGN,IAAMoM,EAA2ByD,GAC7BrV,EAAM4R,0BAEJC,EAA4BwD,GAC9BrV,EAAM6R,2BAGJ4I,EAA6BP,GAC/Bla,EAAM2R,iBACNiI,EACAhI,EACAC,EACA7R,aAAiBoT,IAEfsH,EVlB0B,SAClCC,EACAhM,EACAD,GAEA,IAAMgM,EAAiC,GAMvC,OALAC,EAAgB9kB,SAAQ,SAAC4f,GACvBiF,EAAwBzlB,KACtBugB,GAAoBC,EAAgB9G,EAAiBD,OAGlDgM,EUO2BE,CAC5B5a,EAAMwR,+BACNhE,GAAqBmB,gBACrBnB,GAAqBkB,WAEnBmM,EACF,eAAC,QAAD,CAAMpnB,MAAO4f,GAAOa,UAApB,mDAC2C,UAI/C,OACI,eAAC,QAAD,WACI,eAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,iDACyC,KACpCjU,aAAiBoT,GACZ,GACAyH,KAEV,cAAC,QAAD,CAAMpnB,MAAO4f,GAAOa,UAApB,SAAgCuG,IAC/BC,EAAwBjpB,KAAI,SAACylB,GAAD,OACzB,cAAC,QAAD,CAEIzjB,MAAO4f,GAAOa,UAFlB,SAIKgD,GAHIwD,EAAwBI,QAAQ5D,WClD5C6D,GAAmB,SAACvqB,GAG/B,GAAIA,EAAMonB,gBAAiB,CACzB,IAAM5X,EAAQ6X,qBAAWC,IAAaC,uBAEhCiD,EAA4BR,GAAsBxa,GAExD,OACE,cAAC,QAAD,CAAMvM,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,SACG+C,IAIL,IAAMhb,EAAQ6X,qBAAWC,IAAaI,wBAChC8C,EAA4BR,GAAsBxa,GACxD,OACE,cAAC,QAAD,CAAMvM,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,SACG+C,KCZIC,GAAe,WAC1B,OACE,eAAC,QAAD,CAAMxnB,MAAO4f,GAAOO,QAApB,UACE,cAAC,GAAD,CAAkBgE,iBAAe,IACjC,cAAC,QAAD,CAAMnkB,MAAO4f,GAAOW,WAApB,mDACA,cAAC,GAAD,CAAkB4D,iBAAe,IACjC,cAAC,GAAD,CAAWA,iBAAe,IAC1B,cAAC,GAAD,CAASA,iBAAe,QCgGxB6B,GAAmB,SACvBzZ,GAEA,IAAMiZ,EAAwC,GAC1CW,EAAgB,GAChBxI,EAAgB,GAChB8J,EAAe,GAqCnB,OApCIlb,EAAMmR,WACRyI,EAAgB3T,GACdjG,EAAMmR,SACNnR,EAAM5N,MAAMuM,YACZ6G,YAEF4L,EAAgBpR,EAAMoR,cACtB8J,EAAe7F,GAAiBrV,EAAM6R,4BAExCoH,EAAahkB,KAAK,CAChBmkB,aAAcQ,EACdP,aAAcjI,EACdkI,YAAa4B,IAGflb,EAAM+R,sBAAsBtgB,KAAI,SAACooB,GAC/BZ,EAAahkB,KAAK,CAChBmkB,aAAcS,EAAYzb,OAC1Bib,aAAa,WAAD,OAAarZ,EAAMqR,cAAnB,qBACZiI,YAAajE,GAAiBwE,EAAYpK,WAK5CzP,EAAM6R,0BAA4B,SACT9T,IAAxBiC,EAAMqR,eACoB,IAAxBrR,EAAMqR,eACLrR,EAAMsR,kBACNtR,EAAMsR,iBAAmB,IAE7B2H,EAAahkB,KAAK,CAChBmkB,aAAa,IACbC,aAAa,mBACbC,YAAajE,GAAiBrV,EAAM6R,6BAGjCoH,GCpJIkC,GAA6B,WACxC,IACIC,EADEpb,EAAQ6X,qBAAWC,IAAauD,qBAEtC,GAAIrb,EAAM5N,MAAM4M,gBAAgBC,sBAAuB,CACrD,IAAMqc,EAA8BC,GAA+Bvb,GAC7Dwb,EAA4BC,GAA6Bzb,GAC/Dob,EACE,eAAC,QAAD,WACE,cAAC,QAAD,UAAOE,IACN,KACD,cAAC,QAAD,UAAOE,YAIXJ,EACE,cAAC,QAAD,CAAM3nB,MAAO4f,GAAOa,UAApB,oCAGJ,OACE,eAAC,QAAD,CAAMzgB,MAAO4f,GAAOO,QAAS8H,OAAK,EAAlC,UACE,cAAC,QAAD,CAAMjoB,MAAO4f,GAAOW,WAApB,uCACA,cAAC,QAAD,CAAMvgB,MAAO4f,GAAOa,UAApB,SAAgCkH,QAKhCG,GAAiC,SACrCvb,GAEA,IAAM2b,EDzBgC,SACtC3b,GAEA,IAAI4b,EACJ,GAAwC,IAApC5b,EAAM6R,0BACR+J,EAAc,cAAC,QAAD,8DACT,QACmB7d,IAAxBiC,EAAMqR,eACmB,IAAxBrR,EAAMqR,eACLrR,EAAMsR,kBACNtR,EAAMsR,iBAAmB,EAC3B,CACA,IAEMuF,EAAkBrB,GAFA,kCAItBhI,GAAqBmB,gBACrBnB,GAAqBkB,WAEjBoI,EAAkBtB,GANA,uCAQtBhI,GAAqBmB,gBACrBnB,GAAqBkB,WAGvBkN,EACE,eAAC,QAAD,WACE,cAAC,QAAD,sDACA,cAAC,QAAD,UAAO/E,IACP,cAAC,QAAD,CAAMpjB,MAAO4f,GAAOY,iBAApB,8BACA,eAAC,QAAD,WACE,eAAC,GAAD,eAAQoB,GAAiBrV,EAAM6R,8BAAmC,IAClE,cAAC,QAAD,0EACA,cAAC,QAAD,UAAOiF,cAIR,CACL,IAAIrB,EAAiB,GACjBoG,EAAc,GAClB,GAA4B,IAAxB7b,EAAMqR,cACRoE,EAAiB,4BACjBoG,EAAc,kDACT,GAA4B,IAAxB7b,EAAMqR,cACfoE,EAAiB,oCACjBoG,EAAc,oDACT,IAA4B,IAAxB7b,EAAMqR,cAIf,MAAM,IAAIxU,MAAM,6BAHhB4Y,EAAiB,4BACjBoG,EAAc,qDAIhB,IAAM3E,EAAqB1B,GACzBC,EACAjI,GAAqBmB,gBACrBnB,GAAqBkB,WAGjBoN,EAAgB9b,EAAM+R,sBAAsBtgB,KAChD,SAACsqB,GACE,QACE,QACMA,EAA2B3d,OACjC,QACM2d,EAA2BtM,KACjC,QACI6G,GAAyB,CAACyF,EAA2BnM,YAOhEgM,EACE,eAAC,QAAD,WACE,cAAC,QAAD,gCAA4B,IAC5B,cAAC,GAAD,UAAOvG,GAAiBrV,EAAM6R,6BAAmC,IACjE,cAAC,QAAD,2GAGQ,IACR,eAAC,QAAD,mEAEG7R,EAAMqR,cAFT,KAE0BwK,EAF1B,OAIA,cAAC,QAAD,UAAO3E,IACP,cAAC,QAAD,UAAO4E,OAIb,OAAOF,ECjEuBI,CAAyBhc,GACvD,OACE,eAAC,QAAD,CAAMvM,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,uBACC,KACD,cAAC,QAAD,UAAO0H,QAKPF,GAA+B,SACnCzb,GAEA,IAAMic,EDuDgC,SACtCjc,GAEA,IAAMwZ,EAAgBC,GAAiBzZ,GAEvC,OADc,cAAC,GAAD,CAAciZ,aAAcO,IC3DZ0C,CAAyBlc,GACvD,OACE,eAAC,QAAD,CAAMvM,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,wBACC,KACD,cAAC,QAAD,UAAOgI,QCpDAE,GAAgB,WAC3B,IAAMnc,EAAQ6X,qBAAWC,IAAaC,uBAEhCqE,EACJ,eAAC,QAAD,CAAM3oB,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOW,WAApB,wBACA,cAAC,GAAD,OAUF,OAN6BhU,EAAM5N,MAAM4M,gBACtCC,sBACDmd,EAEA,cAAC,QAAD,KCPOC,GAAe,WAC1B,OACE,eAAC,QAAD,CAAM5oB,MAAO4f,GAAOO,QAApB,UACE,cAAC,QAAD,CAAMngB,MAAO4f,GAAOW,WAApB,0BACA,cAAC,GAAD,CAAkB4D,iBAAiB,IACnC,cAAC,GAAD,CAAkBA,iBAAiB,IACnC,cAAC,GAAD,CAAWA,iBAAiB,IAC5B,cAAC,GAAD,CAASA,iBAAiB,QCL1B0E,GAAiB,kBACrB,eAAC,QAAD,CAAM7oB,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,qBACC,KACD,cAAC,QAAD,mFAIEsI,GAAmB,kBACvB,eAAC,QAAD,CAAM9oB,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,uBACC,KACD,cAAC,QAAD,uFAMEuI,GAAmB,WACvB,IACMC,EAAe9G,GADE,oBAGrBnI,GAAqBkB,WAEvB,OACE,eAAC,QAAD,CAAMjb,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,6BACC,KACD,cAAC,QAAD,qGAIC,KACD,eAAC,QAAD,CAAMxgB,MAAO4f,GAAO0B,QAApB,yHAEwB,QAExB,cAAC,QAAD,UAAO0H,QAKPC,GAAc,WAElB,OACE,eAAC,QAAD,CAAMjpB,MAAO4f,GAAOa,UAApB,UACE,cAAC,QAAD,CAAMzgB,MAAO4f,GAAOY,iBAApB,kBACC,KACD,cAAC,QAAD,iFACA,cAAC,QAAD,UACG0B,GAPgB,IAOenI,GAAqBkB,iBAM9CiO,GAjEkB,WAC/B,MAAO,CACLC,YAAaN,KACbO,cAAeN,KACfO,cAAeN,KACfO,SAAUL,OCNDM,GAAsB,WACjC,IAAMC,EAA0BN,KAChC,OACE,eAAC,QAAD,CAAMlpB,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOY,iBAApB,iCACC,OACAgJ,EAAwBL,YACxB,OACAK,EAAwBJ,cACxB,OACAI,EAAwBH,cACxB,OACAG,EAAwBF,SACxB,WCTMG,GAAoB,WAC/B,IAAMC,EAAwBC,KAC9B,OACE,eAAC,QAAD,CAAM3pB,MAAO4f,GAAOO,QAASqE,MAAM,EAAnC,UACE,cAAC,QAAD,CAAMxkB,MAAO4f,GAAOY,iBAApB,yCACA,cAAC,QAAD,CAAMxgB,MAAO4f,GAAOa,UAApB,SAAgCiJ,QAKhCC,GAA6B,WAEjC,OACE,eAAC,QAAD,CAAMnF,MAAM,EAAZ,UACE,eAAC,QAAD,yLAGoC,OAEpC,cAAC,GAAD,UAAO5C,GAAiB7H,GAAqBO,KAN/C,QChBSsP,GAAgB,WAC3B,OACE,eAAC,QAAD,CAAM5pB,MAAO4f,GAAOO,QAApB,UACE,eAAC,QAAD,CAAMngB,MAAO4f,GAAOW,WAApB,mCAAuD,UACvD,cAAC,GAAD,IACA,cAAC,GAAD,QCPOsJ,GAAS,WACpB,OACE,cAAC,QAAD,CACE7pB,MAAO4f,GAAOc,WACdoJ,OAAQ,gBAAGpJ,EAAH,EAAGA,WAAYqJ,EAAf,EAAeA,WAAf,gBAAmCrJ,EAAnC,cAAmDqJ,IAC3DC,OAAK,KCLEzrB,GAAS,WACpB,OACE,cAAC,QAAD,CAAMyB,MAAO4f,GAAO1hB,OAAQ8rB,OAAK,EAAjC,sB,qBCASC,GAAe,WAC1B,MAAsBzrB,mBAAS,sCAA/B,mBAAO0rB,EAAP,KAAYC,EAAZ,KACM/f,EAAO7F,SAAS6lB,cAAc,eAqBpC,OApBAC,KACGC,MAAMlgB,EAAM,CACXvI,OAAQ,SAACuI,GAAyB,IAAD,IAG/B,QACE,OAACA,QAAD,IAACA,GAAD,UAACA,EAAsBmgB,iBAAvB,SAAkCC,SAAS,wBAA3C,OACCpgB,QADD,IACCA,GADD,UACCA,EAAsBmgB,iBADvB,OACA,EAAkCC,SAAS,4BAOhDC,MAAK,SAAUC,GACdP,EAAOO,MAERC,OAAM,SAAUjc,GACftK,QAAQsK,MAAM,8BAA+BA,MAG/C,cAAC,QAAD,CAAM1O,MAAO4f,GAAO2B,UAAWiD,MAAM,EAArC,SACE,cAAC,SAAD,CAAOxkB,MAAO4f,GAAO4B,MAAOe,IAAK2H,OCT1B7F,GAAcuG,wBACzB,IAiCaC,GAvBO,SAAC9tB,GACrB,OACE,cAAC,YAAD,UACE,cAAC,QAAD,CAAMyC,KAAK,KAAKQ,MAAO4f,GAAOG,KAAMyE,MAAI,EAAxC,SACE,eAACH,GAAYyG,SAAb,CACEve,MAAO,CACL+X,uBAAwBvnB,EAAMguB,UAAUzG,uBACxCG,wBAAyB1nB,EAAMguB,UAAUtG,wBACzCmD,qBAAsB7qB,EAAMguB,UAAUnD,sBAJ1C,UAOE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,YCzCJvb,GAAQC,eAGD0e,IAFAxe,YAAW,CAAEC,OAAQ,QAASL,SAAUM,IAASL,IAE9D,oDAIE,WACE1B,EACAnI,EACA7D,GAEC,IAAD,EADA8e,EACA,4DADOnT,EACP,6BACA,cAAMK,EAAQnI,EAAgB7D,EAAO,EAAG8e,IAT1C9e,WAQE,IAPF6D,oBAOE,IANFmI,YAME,EAEA,EAAKhM,MAAQA,EACb,EAAK6D,eAAiBA,EACtB,EAAKmI,OAASX,GAAQW,EAAOrD,IAAK,EAAK3I,MAAMkL,SAC7C,EAAK4T,KAAOA,EALZ,EATJ,wBAA6CF,KCAvClR,GAAQC,eAED2e,IADAze,YAAW,CAAEC,OAAQ,QAASL,SAAUM,IAASL,IAC9D,oDAGE,WACE1B,EACAnI,EACA7D,GACC,IAAD,+BACA,cAAMgM,EAAQnI,EAAgB7D,EAAO,IAPvC+e,SAA0B,KAQxB,EAAK/e,MAAQA,EACb,EAAK6D,eAAiBA,EACtB,EAAKmI,OAASX,GAAQW,EAAOrD,IAAK,EAAK3I,MAAMkL,SAJ7C,EAPJ,wBAA0C0T,KCkCpC2N,GAAsB,SACxBvsB,EACA6D,GAEA,IAAM8hB,EAAyB,IAAI3E,GAC/BhhB,EAAMgM,OACNnI,EACA7D,GAEJ2lB,EAAuB1F,cAAc,GACrC0F,EAAuBxF,4BACnBngB,EAAMiM,SAAStD,IACf3I,GAGJ,IAAM8lB,EAA0B,IAAIuG,GAChCrsB,EAAMgM,OACNnI,EACA7D,GAEJ8lB,EAAwB7F,cAAc,GACtC6F,EAAwBrF,iCACpBzgB,EAAMiM,SAAStD,IACf3I,GAGJ,IAAMipB,EAAuB,IAAIqD,GAC7BtsB,EAAMgM,OACNnI,EACA7D,GAYJ,OAVAipB,EAAqBhJ,cAAc,GAE/B,cAAC,GAAD,CACImM,UAAW,CACPzG,uBAAwBA,EACxBG,wBAAyBA,EACzBmD,qBAAsBA,MAOzBuD,GAAoB,SAC7BxsB,EACA6D,GAEE,IADF4oB,IACC,yDACD,OAAQzsB,EAAMgE,QACV,KAAKlH,EAAcoI,cACfrB,EAAe6oB,mCACf,MACJ,KAAK5vB,EAAcqI,YACfnF,EAAMoM,YAAcpM,EAAMgM,OAC1BnI,EAAe8oB,gCAAgCF,GAC/C,MACJ,KAAK3vB,EAAcsH,oBACfpE,EAAMoM,YAAcpM,EAAMgM,OAC1B4gB,GAAoB5sB,EAAO6D,EAAgB4oB,GAC3C,MACJ,KAAK3vB,EAAcwI,gBACftF,EAAMoM,YAAcf,GAChBrL,EAAMyM,qBAAqB,GAC3BzM,EAAMkL,SAEVrH,EAAegpB,sCAAqC,GACpD,MAEJ,KAAK/vB,EAAcyV,uBACf1O,EAAeipB,wBA8EdC,GAAwC,SACjDN,EACAzsB,EACA6D,GAEA,GAAI4oB,GAAkBzsB,EAAMoM,YAAYrD,SAASzF,OAAS,EAAG,CAEzDtD,EAAMqE,eAAiBtH,EAAaoP,gBACpCnM,EAAMwE,YAAczH,EAAa2H,MACjC,IAAMsoB,EAAanZ,GACf7T,EAAMoM,YAAYzD,IAClB3I,EAAMuM,YACR6G,YACI6Z,EAA6BppB,EAAe2K,qBAC9C2I,GAAkBiC,8BAAlB,UAAmD4T,IACnD7V,GAAkBG,oBAGtB,OADAzT,EAAeqpB,qBAAqBD,GAC7BppB,EAAespB,YAAYntB,GAGtC,GAA6B,OAAzBA,EAAMgM,OAAO/C,QAEb,OADApF,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAEtC,IAAMqtB,EAAalP,GACfne,EAAMgM,OACNhM,GACF,GACIstB,EAGY,IAFdttB,EAAMgM,OAAOjD,SAAS7F,QAAO,SAACqqB,GAC1B,OAAOra,GAAOW,UAAU0Z,EAAMvtB,EAAMuM,YAAY8G,aACjD/P,OACD2a,EAAe/K,GAAOW,UAAU7T,EAAMgM,OAAOrD,IAAK3I,EAAMuM,YAE9D,GACqC,IAAjCvM,EAAMgM,OAAOjD,SAASzF,QACtBgqB,GACe,IAAfD,EACF,CACE,IAAMG,EAAgBta,GAAOW,UACzB7T,EAAMgM,OAAOjD,SAAS,GACtB/I,EAAMuM,YAEJkhB,EAAgBva,GAAOW,UACzB7T,EAAMgM,OAAOjD,SAAS,GACtB/I,EAAMuM,YAEV,IAAK0R,EAAa1K,UAEd,OADA1P,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAEtC,GAAqC,IAAjCA,EAAMgM,OAAOjD,SAASzF,OAEtB,OADAO,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAGtC,GAAIwtB,EAAcna,UAAW,CACzBrT,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcsI,qBAE1B,IAAMsoB,EAAmB7pB,EAAe2K,qBACpC2I,GAAkBqC,gBACdgU,EAAcpa,YACdqa,EAAcra,cAItB,OADAvP,EAAeqpB,qBAAqBQ,GAC7B7pB,EAAespB,YAAYntB,GAElCA,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcsI,qBAE1B,IAAMsoB,EAAmB7pB,EAAe2K,qBACpC2I,GAAkB0C,gBACd2T,EAAcpa,YACdqa,EAAcra,cAItB,OADAvP,EAAeqpB,qBAAqBQ,GAC7B7pB,EAAespB,YAAYntB,GAItC,OADA6D,EAAe8pB,mBACR9pB,EAAespB,YAAYntB,IAI7B4tB,GAA4C,SACrDnB,EACAzsB,EACA6D,GAEA,GAAI4oB,GAAkBzsB,EAAMoM,YAAYrD,SAASzF,OAAS,EAAG,CAEzDtD,EAAMqE,eAAiBtH,EAAaoP,gBACpCnM,EAAMwE,YAAczH,EAAa2H,MACjC,IAAMmpB,EAAkBha,GACpB7T,EAAMoM,YAAYzD,IAClB3I,EAAMuM,YAEJ0gB,EAA6BppB,EAAe2K,qBAC9C2I,GAAkBiC,8BAAlB,UACOyU,EAAgBza,cAEvB+D,GAAkBG,oBAGtB,OADAzT,EAAeqpB,qBAAqBD,GAC7BppB,EAAespB,YAAYntB,GAMtC,OAJAA,EAAMyM,qBAAuBzM,EAAMyM,qBAAqBvJ,QACpD,SAAC5D,GAAD,OAAUA,IAASU,EAAMyM,qBAAqB,MAElD5I,EAAeiqB,wBACRjqB,EAAespB,YAAYntB,IAGhC+tB,GAA+B,SAA/BA,EACFtiB,EACAzL,GAIA,IAA6B,IAFFkT,GAAOW,UAAUpI,EAAK9C,IAAK3I,EAAMuM,YAE7C8G,UAAqB,OAAO,EACtC,GAA8B,IAA1B5H,EAAKzC,UAAU1F,OAAnB,CAED,IADC,EACK0qB,EAAoC,GADzC,eAEsBviB,EAAKzC,WAF3B,IAED,2BAAuC,CAAC,IAA7Be,EAA4B,QAC7BkkB,EAAOF,EACTtlB,GAAW4C,QAAQtB,EAAU/J,EAAMkL,SACnClL,QAEQ2L,GAARsiB,GACAD,EAAmBnrB,KAAK,EAAIorB,IARnC,8BAWD,OAAkC,IAA9BD,EAAmB1qB,YAAc,EACzB8c,KAAKC,IAAL,MAAAD,KAAY4N,KAInB7P,GAAoD,SAApDA,EACT+P,EACAluB,GAEA,IAAMmuB,EAAWJ,GAA6BG,EAAcluB,GAC5D,QAAiB2L,IAAbwiB,EAAwB,MAAO,CAAC,EAAGA,GAClC,GAAoC,GAAhCD,EAAanlB,SAASzF,OAAa,MAAO,MAACqI,OAAWA,GAE3D,IADC,EACKyiB,EAAiD,GADtD,eAEuBF,EAAanlB,UAFpC,IAED,2BAA+C,CAAC,IAArCuB,EAAoC,QAC3C8jB,EAAavrB,KACTsb,EACI1V,GAAW4C,QAAQf,EAAWtK,EAAMkL,SACpClL,KANX,8BAWDouB,EAAaC,MAAK,SAAC7nB,EAAG8nB,GAClB,YAAY3iB,GAARnF,EAAE,SAA2BmF,GAAR2iB,EAAE,GAAwB9nB,EAAE,GAAK8nB,EAAE,QAChD3iB,GAARnF,EAAE,SAA2BmF,GAAR2iB,EAAE,GAAwB,GAC3C,KAEZ,kBACIF,EAAa,GADjB,GAAOG,EAAP,KAAkCC,EAAlC,KAGA,YAAiC7iB,GAA7B4iB,EACO,MAAC5iB,OAAWA,GAEhB,CAAC4iB,EAA4B,EAAGC,IAIlCC,GAAkB,SAC3BC,EACA1uB,EACA6D,GAEA,IAAM8qB,EAAY,IAAIzb,GAClBwb,EACA7qB,EAAe+qB,eAAe5uB,EAAMrB,KAExCqB,EAAMuM,WAAW2Q,IAAIyR,EAAUhmB,IAAKgmB,GACpC,IAAME,EAAU,IAAIpmB,GAAWkmB,EAAUhmB,IAAK,GAE9C,OADA3I,EAAMkL,QAAQgS,IAAI2R,EAAQlmB,IAAKkmB,GACxBA,GAEEC,GAAkB,SAAC9uB,EAAYrB,GACxC,IAAMgwB,EAAY,IAAIzb,GAAO,GAAIvU,GACjCqB,EAAMuM,WAAW2Q,IAAIyR,EAAUhmB,IAAKgmB,GACpC,IAAME,EAAU,IAAIpmB,GAAWkmB,EAAUhmB,IAAK,GAE9C,OADA3I,EAAMkL,QAAQgS,IAAI2R,EAAQlmB,IAAKkmB,GACxBA,GAEEE,GAAiB,SAC1BL,EACA1uB,EACA6D,GAEA,IAAM8qB,EAAY,IAAIzb,GAClBwb,EACA7qB,EAAe+qB,eAAe5uB,EAAMrB,KAExCgwB,EAAUtb,WAAY,EACtBrT,EAAMuM,WAAW2Q,IAAIyR,EAAUhmB,IAAKgmB,GACpC,IAAME,EAAU,IAAIpmB,GAAWkmB,EAAUhmB,IAAK,GAG9C,OAFAkmB,EAAQhmB,MAAMhG,KAAK,CAAC2F,GAAoByD,SAAU0iB,EAAUhmB,MAC5D3I,EAAMkL,QAAQgS,IAAI2R,EAAQlmB,IAAKkmB,GACxBA,GAGEhb,GAAY,SAAClV,EAAYmV,GAClC,IAAM9H,EAA6B8H,EAAUpI,IAAI/M,GACjD,QAAcgN,GAAVK,EACA,MAAM,IAAIvB,MAAM,kCAAoC9L,GAExD,OAAOqN,GAGEX,GAAU,SAAC1M,EAAYuM,GAChC,IAAMO,EAA+BP,EAAQQ,IAAI/M,GACjD,QAAYgN,GAARF,EACA,MAAM,IAAIhB,MAAM,gCAAkC9L,GAEtD,OAAO8M,GCnDEmhB,GAAsB,SAC/B5sB,EACA6D,EACAmrB,GAEA,IAAM/iB,EAAWjM,EAAMgM,OACjBijB,EAAiB/b,GAAOW,UAAU5H,EAAStD,IAAK3I,EAAMuM,YAC5D,GAAIvM,EAAM4M,gBAAgBE,iBAAmB/P,EAAamV,MAAO,CAC7DlS,EAAM4M,gBAAgBE,eAAiB/P,EAAaoV,MACpDnS,EAAMgM,OAAOzC,aAAe,KAC5BvJ,EAAMqE,eAAiBtH,EAAa2H,MACpC,IAAMwqB,EACFrrB,EAAe2K,qBACX2I,GAAkBW,qCAE1BjU,EAAeqpB,qBAAqBgC,QACjC,GAAIlvB,EAAM4M,gBAAgBE,iBAAmB/P,EAAaoV,MAAO,CAMpE,GAAoC,IAJhCgM,GACI9S,GAAQrL,EAAMgM,OAAOrD,IAAK3I,EAAMkL,SAChClL,GACF,GACiC,CAEnCA,EAAM4M,gBAAgBE,eAAiB/P,EAAasV,MACpDrS,EAAMwE,YAAczH,EAAaqU,MACjCpR,EAAMoM,YAAcpM,EAAMgM,OAC1B,IAAMmjB,EAAoBtrB,EAAe2K,qBACrC2I,GAAkBgC,oBACd8V,EAAe7b,cAGvBvP,EAAeqpB,qBAAqBiC,QAEpCC,GAAiCpvB,EAAO6D,OAEzC,CACH,GAAImrB,GAAehvB,EAAMoM,YAAYrD,SAASzF,OAAS,EAAG,CACtDtD,EAAMqE,eAAiBtH,EAAaoP,gBACpCnM,EAAMwE,YAAczH,EAAa2H,MACjC,IAAMsoB,EAAanZ,GACf7T,EAAMoM,YAAYzD,IAClB3I,EAAMuM,YACR6G,YACI6Z,EACFppB,EAAe2K,qBACX2I,GAAkBiC,8BAAlB,UACO4T,IAEP7V,GAAkBG,oBAG1B,OADAzT,EAAeqpB,qBAAqBD,GAC7BppB,EAAespB,YAAYntB,GAEtC,GAAIA,EAAMiM,SAAS9C,uBAAwB,CAevC,QANoCwC,IAPhCwS,GACI9S,GACIrL,EAAMiM,SAAS9C,uBACfnJ,EAAMkL,SAEVlL,GACF,KAEFA,EAAMkM,UACFlM,EAAMkM,UACNlM,EAAM4M,gBAAgBI,8BAC1BhN,EAAM4M,gBAAgBI,8BAAgC,GAEtDhN,EAAMkM,WAAa,EAEnB,OADArI,EAAeupB,mBACRptB,EAEPovB,GAAiCpvB,EAAO6D,IAIpD,OAAOA,EAAespB,YAAYntB,IAGhCovB,GAAmC,SACrCpvB,EACA6D,GAEA7D,EAAMgE,OAASlH,EAAcyV,uBAC7BvS,EAAMqE,eAAiBtH,EAAa2H,MACpC1E,EAAMgM,OAAShM,EAAMiM,SACrBjM,EAAMoM,YAAcpM,EAAMiM,SAC1B,IAAM8L,EAAiClU,EAAe2K,qBAClD2I,GAAkBY,kCAEtBlU,EAAeqpB,qBAAqBnV,IC7VlCsX,GAAwB,SAC5BrvB,EACAsN,EACAzJ,GAEA,IAAMyrB,EACJhiB,EAAsBA,EAAsBhK,OAAS,GAAG,GAC1D,IAAIgsB,EAqEF,MAAM,IAAI7kB,MAAM,uBApEhB,GAAIzK,EAAMoM,YAAY/C,YAAcimB,EAAa,CAC/ChiB,EAAsBA,EAAsBhK,OAAS,GAAG,GACtDgsB,EAAc,EAEhBtvB,EAAMqE,eAAiBtH,EAAaqU,MACpC,IAAMme,EAAgB1rB,EAAe2rB,2BACnCxvB,EAAMoM,YAAYpD,UAClBhJ,GAEIyvB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkByB,sBAChB/E,GAAU7T,EAAMoM,YAAYzD,IAAK3I,EAAMuM,YAAY6G,YACnDmc,IAIJ,OADA1rB,EAAeqpB,qBAAqBuC,GAC7B5rB,EAAespB,YAAYntB,GAC7B,GAAIA,EAAMoM,YAAY/C,cAAgBimB,EAgD3C,MAAM,IAAI7kB,MAAM,oDA3ChB,IAJA,IAAIilB,EAAkB1vB,EAAMoM,YAAYzD,IACpC3B,EAAgByB,GAAW4C,QAAQqkB,EAAiB1vB,EAAMkL,SAE1DykB,GAAoB,EAEtBriB,EAAsBA,EAAsBhK,OAAS,GAAG,KACxD0D,EAAcqC,aACd,CACAiE,EAAsB/J,MAEtB,IAAMqsB,EAAY5oB,EAAc6oB,YAAY7vB,EAAMkL,SAClD,IAAI0kB,EAGG,CACLD,GAAoB,EACpB,MAJAD,EAAkBE,EAClB5oB,EAAgByB,GAAW4C,QAAQqkB,EAAiB1vB,EAAMkL,SAO9D,GAAKykB,EAGE,CACLriB,EAAsBA,EAAsBhK,OAAS,GAAG,GACtDgK,EAAsBA,EAAsBhK,OAAS,GAAG,GAAK,EAE/DtD,EAAMoM,YAAcpF,EACpB,IAAM8oB,EAAsBjc,GAC1B6b,EACA1vB,EAAMuM,YAERvM,EAAMqE,eAAiBtH,EAAaqU,MACpC,IAAMme,EAAgB1rB,EAAe2rB,2BACnCxoB,EAAcgC,UACdhJ,GAEIyvB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkByB,sBAChBkX,EAAoB1c,YACpBmc,IAIJ,OADA1rB,EAAeqpB,qBAAqBuC,GAC7B5rB,EAAespB,YAAYntB,GAtBlCwsB,GAAkBxsB,EAAO6D,IClH3BksB,G,WAcF,WACIvhB,EAIAwhB,EACAC,EACAC,GACD,IAAD,iCArBF1hB,0BAqBE,OAjBFvO,cAiBE,OAhBFgwB,yBAgBE,OAbFC,cAaE,OAZFC,WAAkB,KAYhB,KAXFC,WAAY,EAWV,KAVFC,UAAiB,KAUf,KATFC,yBAA2B,EASzB,KAkBFtf,YAAc,WACV,IACIC,EADEsf,EAAcC,aAAaC,QAAQ,gBAGrCxf,EAAYzO,GADZ+tB,EAC4CG,SAASH,GAET,MAIxCA,EACAC,aAAaG,QACT,eACCD,SAASH,GAAe,GAAGK,YAGhCJ,aAAaG,QAAQ,cAAe,KAExC,EAAK1wB,UAAS,SAACD,GAEX,OADAA,EAAQiR,EACD,EAAKkc,YAAYntB,QAtClC,KA8CFyR,eAAiB,SAACof,GACd,EAAK5wB,UAAS,SAACD,GACX,OC1GkB,SAC5B8wB,EACA9wB,EACA6D,GAQA,IAAMktB,EAA0BltB,EAAe2K,qBAC7C2I,GAAkBE,wBAClBF,GAAkBG,oBAYpB,OAVAtX,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcoH,aACtB+H,SAAU8iB,GAAe+B,EAAK9wB,EAAO6D,KAEvC7D,EAAK,eACAA,GAGL6D,EAAeqpB,qBAAqB6D,GAC7BltB,EAAespB,YAAYntB,GDiFjByR,CAAeof,EAAkB7wB,EAAO,OAhDrD,KAoDFmE,4BAA8B,SAC1B6sB,GAKA,EAAK/wB,UAAS,SAACD,GACX,OF1GyB,SACjCgxB,EACAhxB,EACA6D,GAEA,GAAImtB,EAA+B,CAC/BhxB,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcsH,oBACtBwI,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAaqU,MAC7BvE,sBAAuBmkB,MAG/B,IAAMC,EAA8BptB,EAAe2K,qBAC/C2I,GAAkBkD,6BAEtBxW,EAAeqpB,qBAAqB+D,OACjC,CACHjxB,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAc0V,cACtB5F,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB,OAChBD,sBAAuBmkB,MAG/B,IAAME,EAAoBrtB,EAAe2K,qBACrC2I,GAAkBa,mBAEtBnU,EAAeqpB,qBAAqBgE,GAExC,OAAOrtB,EAAespB,YAAYntB,GEwEnB6M,CACHmkB,EACAhxB,EACA,OA9DV,KAmEF4R,+BAAiC,SAC7Buf,GAEA,EAAKlxB,UAAS,SAACD,GACX,OFjFoB,SAC5BmxB,EACAnxB,EACA6D,GAEA,IAAMutB,EAA2BvtB,EAAe2K,qBAC5C2I,GAAkBkD,6BAEhBgX,EAAsB1c,GAAewc,GACrCG,EAAyBvd,GAC3Bsd,EAAoB,IAElBE,EAAc,cAAC,GAAD,CAAoBlrB,MAAOirB,IAC/C,GAA+B,IAA3BD,EAAoB,GAAU,CAC9B,IAAMG,EAAwB3tB,EAAe2K,qBACzC2I,GAAkBoD,sBAClBpD,GAAkBqD,gCAEtBxa,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAauH,MAC7ByI,iBAAkB2jB,SAASW,EAAoB,QAGvD,IAAMI,EAAiB5tB,EAAeosB,oBAAoBsB,GAC1D1tB,EAAeqpB,qBAAqBuE,GACpC5tB,EAAeqpB,qBAAqBsE,OACjC,CACH,IAAME,EAAqB7tB,EAAe2K,qBACtC2I,GAAkBmD,4BAGtBzW,EAAeqpB,qBAAqBwE,GACpC7tB,EAAeqpB,qBAAqBkE,GAExC,OAAOvtB,EAAespB,YAAYntB,GE4CnB+M,CAAiBokB,EAA0BnxB,EAAO,OAvE/D,KA2EF4G,wBAA0B,SAAC+qB,GACvB,EAAK1xB,UAAS,SAACD,GACX,OF/C8B,SACtC2xB,EACA3xB,EACA6D,GAEA,GAAI8tB,IAAsB30B,EAAuB40B,WAa7C,IAZA5xB,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAamV,MAC7BlF,8BACIhN,EAAM4M,gBAAgBG,iBAAmB,EAC7CI,cAAenQ,EAAuB40B,YAG1C1lB,UAAWlM,EAAM4M,gBAAgBG,iBAAmB,KAE9CH,gBAAgBI,8BAAgC,EAAG,CACzD,IAAM6kB,EACFhuB,EAAe2K,qBACX2I,GAAkB0D,+BAE1BhX,EAAeqpB,qBAAqB2E,QAEpC,GACI7xB,EAAMgM,SAAWhM,EAAMiM,UACvBjM,EAAMgM,OAAO7C,uBACf,CAgBE,QAPoCwC,IAPhCwS,GACI9S,GACIrL,EAAMgM,OAAO7C,uBACbnJ,EAAMkL,SAEVlL,GACF,KAEFA,EAAMkM,UACFlM,EAAMkM,UACNlM,EAAM4M,gBAAgBI,8BAC1BhN,EAAM4M,gBAAgBI,8BAAgC,KAGtDhN,EAAMkM,WAAa,GAEhB,CACHrI,EAAe5D,UAAS,SAACD,GACrBA,EAAMgE,OAASlH,EAAc8H,gBAEjC,IAAMktB,EACFjuB,EAAe2K,qBACX2I,GAAkBe,iBAClBf,GAAkBG,oBAG1B,OADAzT,EAAeqpB,qBAAqB4E,GAC7BjuB,EAAespB,YAAYntB,GAXlC6D,EAAeupB,yBAexB,GAA0B,qBAAtBuE,EAAuC,CAC9C3xB,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAa2H,UAGrC,IAAMqtB,EAAsBluB,EAAe2K,qBACvC2I,GAAkBuD,qBAEtB7W,EAAeqpB,qBAAqB6E,QACjC,GAA0B,oBAAtBJ,EAAsC,CAC7C3xB,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAaiV,UAGrC,IAAMggB,EAAuBnuB,EAAe2K,qBACxC2I,GAAkByD,sBAEtB/W,EAAeqpB,qBAAqB8E,OACjC,CACH,IAAMC,EAAuBpuB,EAAe2K,qBACxC2I,GAAkBsD,sBAEhB+W,EAAwB3tB,EAAe2K,qBACzC2I,GAAkBoD,sBAClBpD,GAAkBqD,gCAEtB3W,EAAeqpB,qBAAqB+E,GACpCpuB,EAAeqpB,qBAAqBsE,GAExC,OAAO3tB,EAAespB,YAAYntB,GEhDnBkyB,CAA2BP,EAAmB3xB,EAAO,OA7ElE,KAiFF6R,0BAA4B,SAACif,GACzB,EAAK7wB,UAAS,SAACD,GACX,OF6CuB,SAC/BmyB,EACAnyB,EACA6D,GAEA,IAAMwtB,EAAsB1c,GAAewd,GACrCb,EAAyBvd,GAC3Bsd,EAAoB,IAElBE,EAAc,cAAC,GAAD,CAAoBlrB,MAAOirB,IAC/C,GAA+B,IAA3BD,EAAoB,GAAU,CAC9B,IAAMI,EAAiB5tB,EAAeosB,oBAAoBsB,GAC1D1tB,EAAeqpB,qBAAqBuE,GACpCzxB,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAa+U,MAC7B7E,WAAYyjB,SAASW,EAAoB,QAGjD,IAAMe,EAAuBvuB,EAAe2K,qBACxC2I,GAAkBwD,sBAEtB9W,EAAeqpB,qBAAqBkF,OACjC,CACH,IAAMC,EAAmBxuB,EAAe2K,qBACpC2I,GAAkBc,kBAEhB8Z,EAAsBluB,EAAe2K,qBACvC2I,GAAkBuD,qBAEtB7W,EAAeqpB,qBAAqBmF,GACpCxuB,EAAeqpB,qBAAqB6E,GAExC,OAAOluB,EAAespB,YAAYntB,GEhFnBsyB,CAAoBxB,EAAK9wB,EAAO,OAnF7C,KAuFF+R,2BAA6B,SAAC+e,GAC1B,EAAK7wB,UAAS,SAACD,GACX,OF6EwB,SAChC8wB,EACA9wB,EACA6D,GAEA,IAAMwtB,EAAsB1c,GAAemc,GACrCQ,EAAyBvd,GAC3Bsd,EAAoB,IAElBE,EAAc,cAAC,GAAD,CAAoBlrB,MAAOirB,IAC/C,GAA+B,IAA3BD,EAAoB,GAAU,CAC9B,IAAMI,EAAiB5tB,EAAeosB,oBAAoBsB,GAC1D1tB,EAAeqpB,qBAAqBuE,GACpCzxB,EAAM4M,gBAAgBM,UAAYwjB,SAASW,EAAoB,IAC/DrxB,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAamV,MAC7BlF,+BACKhN,EAAM4M,gBAAgBG,iBACnB/M,EAAM4M,gBAAgBM,UACtBlN,EAAM4M,gBAAgBK,YACtB,EACJjN,EAAM4M,gBAAgBK,aAE9Bf,WACKlM,EAAM4M,gBAAgBG,iBACnB/M,EAAM4M,gBAAgBM,UACtBlN,EAAM4M,gBAAgBK,YACtB,EACJjN,EAAM4M,gBAAgBM,YAE9B,IAAM2kB,EACFhuB,EAAe2K,qBACX2I,GAAkB0D,+BAE1BhX,EAAeqpB,qBAAqB2E,OACjC,CACH,IAAMQ,EAAmBxuB,EAAe2K,qBACpC2I,GAAkBc,kBAEhBma,EAAuBvuB,EAAe2K,qBACxC2I,GAAkBwD,sBAEtB9W,EAAeqpB,qBAAqBmF,GACpCxuB,EAAeqpB,qBAAqBkF,GAExC,OAAOvuB,EAAespB,YAAYntB,GE7HnBuyB,CAAqBzB,EAAK9wB,EAAO,OAzF9C,KA6FFiS,2BAA6B,SAAC6e,GAC1B,EAAK7wB,UAAS,SAACD,GACX,OF0HuB,SAC/B8wB,EACA9wB,EACA6D,GAEA,IAAMwtB,EAAsB1c,GAAemc,GACrCQ,EAAyBvd,GAC3Bsd,EAAoB,IAElBE,EAAc,cAAC,GAAD,CAAoBlrB,MAAOirB,IAC/C,GAA+B,IAA3BD,EAAoB,GAAU,CAC9B,IAAMI,EAAiB5tB,EAAeosB,oBAAoBsB,GAY1D,GAXA1tB,EAAeqpB,qBAAqBuE,IACpCzxB,EAAK,2BACEA,GADF,IAED4M,gBAAgB,2BACT5M,EAAM4M,iBADE,IAEXE,eAAgB/P,EAAamV,MAC7BlF,8BACIhN,EAAM4M,gBAAgBG,iBAAmB2jB,SAASI,KAE1D5kB,UAAWwkB,SAASI,MAEdlkB,gBAAgBI,8BAAgC,EAAG,CACzD,IAAM6kB,EACFhuB,EAAe2K,qBACX2I,GAAkB0D,+BAE1BhX,EAAeqpB,qBAAqB2E,QAErC,CACH,IAAMQ,EAAmBxuB,EAAe2K,qBACpC2I,GAAkBc,kBAEhB+Z,EAAuBnuB,EAAe2K,qBACxC2I,GAAkByD,sBAEtB/W,EAAeqpB,qBAAqBmF,GACpCxuB,EAAeqpB,qBAAqB8E,GAExC,OAAOnuB,EAAespB,YAAYntB,GElKnBwyB,CAAoB1B,EAAK9wB,EAAO,OA/F7C,KAmGFiT,4BAA8B,SAAC6d,GAC3B,EAAK7wB,UAAS,SAACD,GACX,OF+JyB,SACjC8wB,EACA9wB,EACA6D,GAEA,IAEM4uB,EAAqBhE,GAFDqC,EAItB9wB,EACA6D,GAGJ7D,EAAMgM,OAASymB,EACfzyB,EAAMiM,SAAS9C,uBAAyBspB,EAAmB9pB,IAC3D3I,EAAMiM,SAAStB,kBACXnC,GAAoBkqB,gBACpBD,GAE6Bvf,GAAOW,UACpC4e,EAAmB9pB,IACnB3I,EAAMuM,YAEe8G,WAAY,EACrC,IAAMsf,EAA6B9uB,EAAe2K,qBAC9C2I,GAAkB2D,4BAEtBjX,EAAeqpB,qBAAqByF,GACpC3yB,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcsH,oBACtBC,eAAgBtH,EAAa2H,MAC7B0H,YAAaqmB,EACbjmB,kBAAmBimB,EAAmB9pB,MAE1C8pB,EAAmBlpB,aAAevJ,EAAMiM,SAAStD,IACjD,IAAMiqB,EAA+B/uB,EAAe2K,qBAChD2I,GAAkB6D,kCAGtB,OADAnX,EAAeqpB,qBAAqB0F,GAC7B/uB,EAAespB,YAAYntB,GEvMnB6yB,CAAsB/B,EAAK9wB,EAAO,OArG/C,KAoHF6E,eAAiB,SAAC+S,GACd,EAAK3X,UAAS,SAACD,GACX,OCzGkB,SAC5B8wB,EACA9wB,EACA6D,GAKA,GAHA7D,EAAMgM,OAAShM,EAAMiM,SACrBjM,EAAMoM,YAAcpM,EAAMiM,SAC1B4H,GAAU7T,EAAMgM,OAAOrD,IAAK3I,EAAMuM,YAAYgH,UAAYud,EACtDA,EAAK,CACP,IAAMgC,EAA2BjvB,EAAe2K,qBAC9C2I,GAAkBoB,yBAClBpB,GAAkBG,oBAQpB,OANAtX,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAckI,mBAExBnB,EAAeqpB,qBAAqB4F,GAE7BjvB,EAAespB,YAAYntB,GAGpC,IAAM+yB,EAAuBlvB,EAAe2K,qBAC1C2I,GAAkBkB,qBAClBlB,GAAkBG,oBAQpB,OANAtX,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcgI,eAExBjB,EAAeqpB,qBAAqB6F,GAE7BlvB,EAAespB,YAAYntB,GDyEjB6E,CAAe+S,EAAgB5X,EAAO,OAtHnD,KA0HF+E,mBAAqB,SAACD,GAClB,EAAK7E,UAAS,SAACD,GACX,OExLsB,SAChC8wB,EACA9wB,EACA6D,GAGA,GAAIitB,EAAK,CACP9wB,EAAMgE,OAASlH,EAAc4V,WAE7B,IAAMsgB,EAAiBnvB,EAAe2K,qBACpC2I,GAAkBmB,gBAEpBzU,EAAeqpB,qBAAqB8F,OAGjC,CACH,IAAM/mB,EAAWiH,GAAOW,UAAU7T,EAAMgM,OAAOrD,IAAK3I,EAAMuM,YAE1D,GAAKN,EAASsH,gBAAiC5H,IAApBM,EAASwH,OAU7B,CACLzT,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcoI,cACtBb,eAAgBtH,EAAa2H,QAE/B,IAAM+qB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkB4D,kBAAkB9O,EAASmH,cAE/CvP,EAAeqpB,qBAAqBuC,OAnBoB,CACxDzvB,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAckI,mBAExB,IAAM8tB,EAA2BjvB,EAAe2K,qBAC9C2I,GAAkBoB,yBAClBpB,GAAkBG,oBAEpBzT,EAAeqpB,qBAAqB4F,IAaxC,OAAOjvB,EAAespB,YAAYntB,GFgJjBizB,CAAmBnuB,EAAc9E,EAAO,OA5HrD,KAgIF2S,kBAAoB,SAACugB,GACjB,IAAMC,EAAWD,EACjB,EAAKjzB,UAAS,SAACD,GACX,OEpJqB,SAC/B8wB,EACA9wB,EACA6D,GAOA,IAAMoI,EAAWiH,GAAOW,UAAU7T,EAAMgM,OAAOrD,IAAK3I,EAAMuM,YACpD6mB,EAAY3E,GAAgBqC,EAAK9wB,EAAO6D,GAG9C,GAFA7D,EAAMgM,OAAO/C,QAAUmqB,EAAUzqB,IACjC3I,EAAMgM,OAAOrB,kBAAkBnC,GAAoBiL,OAAQ2f,GAEzDpzB,EAAMkM,WACNkP,GAAqBQ,uCAOrB,OALA5b,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcu2B,mBAExBxvB,EAAeupB,mBACRvpB,EAAespB,YAAYntB,IAGpCA,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcoI,cACtBb,eAAgBtH,EAAa2H,SAEzBuH,SAAS1C,aAAe6pB,EAAUzqB,IACxC,IAAM8mB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkB4D,kBAAkB9O,EAASmH,cAG/C,OADAvP,EAAeqpB,qBAAqBuC,GAC7B5rB,EAAespB,YAAYntB,GFgHjB2S,CAAkBwgB,EAAUnzB,EAAO,OAnIhD,KAuIFiF,uBAAyB,SAACquB,GACtB,EAAKrzB,UAAS,SAACD,GACX,OEnH0B,SACpC8wB,EACA9wB,EACA6D,GAGA,GAAIitB,EAAK,CACP9wB,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAc8V,iBAExB,IAAM2gB,EAAqB1vB,EAAe2K,qBACxC2I,GAAkBqB,oBAEpB3U,EAAeqpB,qBAAqBqG,OAGjC,CACHvzB,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcoI,cACtBb,eAAgBtH,EAAa2H,QAE/B,IAAMuH,EAAWiH,GAAOW,UAAU7T,EAAMgM,OAAOrD,IAAK3I,EAAMuM,YACpDkjB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkB4D,kBAAkB9O,EAASmH,cAE/CvP,EAAeqpB,qBAAqBuC,GAEtC,OAAO5rB,EAAespB,YAAYntB,GFsFjBiF,CACHquB,EACAtzB,EACA,OA5IV,KAiJF6S,sBAAwB,SAAC2gB,GACrB,IAAMC,EAAeD,EACrB,EAAKvzB,UAAS,SAACD,GACX,OE9FyB,SACnC8wB,EACA9wB,EACA6D,GAOA,IAAMoI,EAAWiH,GAAOW,UAAU7T,EAAMgM,OAAOrD,IAAK3I,EAAMuM,YACpDmnB,EAAgBjF,GAAgBqC,EAAK9wB,EAAO6D,GAIlD,GAHA7D,EAAMgM,OAAO9C,YAAcwqB,EAAc/qB,IACzC3I,EAAMgM,OAAOrB,kBAAkBnC,GAAoBoL,WAAY8f,GAG7D1zB,EAAMkM,WACNkP,GAAqBQ,uCAOrB,OALA5b,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcu2B,mBAExBxvB,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAEpCA,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcoI,cACtBb,eAAgBtH,EAAa2H,QAE/B,IAAM+qB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkB4D,kBAAkB9O,EAASmH,cAG/C,OADAvP,EAAeqpB,qBAAqBuC,GAC7B5rB,EAAespB,YAAYntB,GF2DjB6S,CAAsB4gB,EAAczzB,EAAO,OApJxD,KA6JFqR,qBAAuB,SAACsiB,GAEpB,EAAK1zB,UAAS,SAACD,GACX,ODrJwB,SAClC8wB,EACA9wB,EACA6D,GAEA,IAAM+vB,EAAU5zB,EAAMoM,YAAYynB,0BAClC,GAAID,EAAS,CAAC,IAAD,EACLjqB,EAAQ0B,GAAQuoB,EAAS5zB,EAAMkL,SACjB2I,GAAU+f,EAAS5zB,EAAMuM,YACjC6G,YAAc0d,EAC1B9wB,EAAK,2BACAA,GADA,IAEHqE,eAAgBtH,EAAauH,MAC7B+H,WAAY1C,IAGd,IAAMmqB,EAAa,UAAG5gB,GAAOW,UAC3BlK,EAAMhB,IACN3I,EAAMuM,mBAFW,aAAG,EAGnB6G,YACG2gB,EAAgBlwB,EAAe2K,qBACnC2I,GAAkB4B,cAAc+a,GAChC3c,GAAkBG,oBAIpB,OAFAzT,EAAeqpB,qBAAqB6G,GAE7BlwB,EAAespB,YAAYntB,GAGlCyF,QAAQC,IAAI,8BCwHG2L,CAAqBsiB,EAAmB3zB,EAAO,OAhK5D,KAoKFuE,uBAAyB,SAACyvB,GACtB,EAAK/zB,UAAS,SAACD,GACX,OD1C0B,SACpC8wB,EACA9wB,EACA6D,GAEA,IAAM8F,EAAQ3J,EAAMqM,WACd4nB,EAAcpgB,GAAUlK,EAAMhB,IAAK3I,EAAMuM,YAEzCe,EAAwBtN,EAAMsN,sBACpC,IAAIwjB,EAGG,CAGL,GADAmD,EAAY5gB,WAAY,EACpBrT,EAAMgE,SAAWlH,EAAcwI,iBAET,IADAqE,EAAMuqB,qBAG5B,OADA7E,GAAsBrvB,EAAOsN,EAAuBzJ,GAC7CA,EAAespB,YAAYntB,GAGtCA,EAAK,2BACAA,GADA,IAEHqE,eAAgBtH,EAAa2H,MAC7B0H,YAAazC,IAEf,IAAM8lB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkB4D,kBAAkBkZ,EAAY7gB,cAGlD,OADAvP,EAAeqpB,qBAAqBuC,GAC7B5rB,EAAespB,YAAYntB,GAEpC,OAvBEi0B,EAAY5gB,WAAY,EACxBgc,GAAsBrvB,EAAOsN,EAAuBzJ,GAsB/CA,EAAespB,YAAYntB,GCSjBuE,CAAuByvB,EAAeh0B,EAAO,OAtK1D,KA0KF2E,yBAA2B,SAACwvB,GACxB,EAAKl0B,UAAS,SAACD,GACX,ODZ4B,SACtC8wB,EACA9wB,EACA6D,GAEA,GAAIitB,EAAK,CACP,IAAM1kB,EAAcpM,EAAMoM,YAC1BpM,EAAK,2BACAA,GADA,IAEHwE,YAAazH,EAAaqU,QAE5B,IAAMgjB,EAAevwB,EAAe2rB,2BAClCpjB,EAAYrD,SACZ/I,GAEIq0B,EAAqBxgB,GAAUzH,EAAYzD,IAAK3I,EAAMuM,YACtD4iB,EAAoBtrB,EAAe2K,qBACvC2I,GAAkBkC,oBAChBgb,EAAmBjhB,YACnBghB,IAGJvwB,EAAeqpB,qBAAqBiC,QAEpC3C,GAAkBxsB,EAAO6D,GAAgB,GAO3C,OAAOA,EAAespB,YAAYntB,GCnBjB2E,CAAyBwvB,EAAoBn0B,EAAO,OA5KjE,KAgLFsS,mBAAqB,SAACgiB,GAClB,EAAKr0B,UAAS,SAACD,GACX,ODgBsB,SAChC8wB,EACA9wB,EACA6D,GAEA,IACM0wB,EAAc9F,GADGqC,EAC6B9wB,EAAO6D,IAC3D7D,EAAK,2BACAA,GADA,IAEHwE,YAAazH,EAAauH,MAC1BgI,YAAaioB,KAGTnoB,YAAYjC,WAAWoqB,GAAa,GAE1C,IAAMR,EAAgBlwB,EAAe2K,qBACnC2I,GAAkB4B,cAChB7F,GAAOW,UAAU0gB,EAAY5rB,IAAK3I,EAAMuM,YAAY6G,aAEtD+D,GAAkBG,oBAIpB,OAFAzT,EAAeqpB,qBAAqB6G,GAE7BlwB,EAAespB,YAAYntB,GCvCjBsS,CAAmBgiB,EAAgBt0B,EAAO,OAlLvD,KAsLFyE,wBAA0B,SAAC+vB,GACvB,EAAKv0B,UAAS,SAACD,GACX,ODoC2B,SACrC8wB,EACA9wB,EACA6D,GAEA,IAAMyI,EAActM,EAAMsM,YACpBmoB,EAAqBvhB,GAAOW,UAChCvH,EAAY3D,IACZ3I,EAAMuM,YAER,IAAKukB,EAAK,CACR2D,EAAmBphB,WAAY,EAC/BrT,EAAK,2BACAA,GADA,IAEHoM,YAAaE,EACbjI,eAAgBtH,EAAa2H,QAE/B4H,EAAYhD,sBAAwB,EACpC,IAAMimB,EAAgB1rB,EAAe2rB,2BACnCljB,EAAYtD,UACZhJ,GAEIyvB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkB8D,0BAChBwZ,EAAmBrhB,YACnBmc,IAIJ,OADA1rB,EAAeqpB,qBAAqBuC,GAC7B5rB,EAAespB,YAAYntB,GAUpC,OAREy0B,EAAmBphB,WAAY,EAC/BmZ,GAAkBxsB,EAAO6D,GAOpBA,EAAespB,YAAYntB,GC3EjByE,CAAwB+vB,EAAOx0B,EAAO,OAxLnD,KA4LF2tB,iBAAmB,WACf,EAAK1tB,UAAS,SAACD,GACX,ODwE0B,SACpCA,EACA6D,GAEA,IAAMqqB,EAAezlB,GAAW4C,QAAQrL,EAAMgM,OAAOrD,IAAK3I,EAAMkL,SAC3DlL,EAAMyM,uBAAsBzM,EAAMyM,qBAAuB,IAF3D,qBAIqByhB,EAAanlB,UAJlC,IAIH,2BAA+C,CAAC,IAArCuB,EAAoC,QACzC4I,GAAOW,UAAUvJ,EAAWtK,EAAMuM,YAAY8G,WAK7B,IAJA8K,GACjB1V,GAAW4C,QAAQf,EAAWtK,EAAMkL,SACpClL,GACA,KAEKA,EAAMyM,qBAAqBnB,SAAShB,IACvCtK,EAAMyM,qBAAqB5J,KAAKyH,KAZrC,8BAgBH,GAA0C,IAAtCtK,EAAMyM,qBAAqBnJ,OAAc,CAC3C,IAAM8I,EAAcf,GAAQrL,EAAMyM,qBAAqB,GAAIzM,EAAMkL,SAC3DmpB,EAAqBxgB,GACzB7T,EAAMyM,qBAAqB,GAC3BzM,EAAMuM,YAERvM,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcwI,gBACtBd,YAAazH,EAAaqU,MAC1BhF,YAAaA,EACb/H,eAAgBtH,EAAaoP,kBAE/B,IAAMgjB,EAAoBtrB,EAAe2K,qBACvC2I,GAAkBgC,oBAAoBkb,EAAmBjhB,cAE3DvP,EAAeqpB,qBAAqBiC,QAEpC1pB,QAAQC,IAAI,sCACZ7B,EAAeupB,mBAEjB,OAAOvpB,EAAespB,YAAYntB,GChHjB00B,CAAuB10B,EAAO,OA9L3C,KAkMF8tB,sBAAwB,WACpB,EAAK7tB,UAAS,SAACD,GACX,OD6G+B,SACzCA,EACA6D,GAEA,GAA0C,IAAtC7D,EAAMyM,qBAAqBnJ,OAAc,CAC3C,IAAM8I,EAAcf,GAAQrL,EAAMyM,qBAAqB,GAAIzM,EAAMkL,SAC3DmpB,EAAqBxgB,GACzB7T,EAAMyM,qBAAqB,GAC3BzM,EAAMuM,YAERvM,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAcwI,gBACtBd,YAAazH,EAAaqU,MAC1BhF,YAAaA,EACb/H,eAAgBtH,EAAaoP,kBAE/B,IAAMgjB,EAAoBtrB,EAAe2K,qBACvC2I,GAAkBgC,oBAAoBkb,EAAmBjhB,cAE3DvP,EAAeqpB,qBAAqBiC,QAEpCtrB,EAAeupB,mBAEjB,OAAOvpB,EAAespB,YAAYntB,GCrIjB20B,CAA4B30B,EAAO,OApMhD,KAyMFqF,qBAAuB,SAACuvB,GACpB,EAAK30B,UAAS,SAACD,GACX,ODiIwB,SAClC8wB,EACA9wB,EACA6D,GAYA,OAVIitB,GACFjtB,EAAe2P,WACbxT,EAAMgM,OAAOjD,SAAS,GACtB/I,EAAMgM,OAAOjD,SAAS,IACtB,GAEFlF,EAAeupB,oBAEfvpB,EAAe8pB,mBAEV9pB,EAAespB,YAAYntB,GChJjBqF,CAAqBuvB,EAAwB50B,EAAO,OA3MjE,KAgNFwF,oBAAsB,SAACqvB,GACnB,EAAK50B,UAAS,SAACD,GACX,OHxQ0B,SAClC8wB,EACA9wB,EACA6D,GAEA,GAAIitB,EAAK,CACL,IAAMlrB,EAAW2mB,GAAoBvsB,EAAO6D,GACtCixB,EACF,8BACI,cAAC,mBAAD,CACIlvB,SAAUA,EACVmvB,SACIlhB,GAAU7T,EAAMiM,SAAStD,IAAK3I,EAAMuM,YAC/B6G,YAJb,SAOK,cAAG4hB,KAAH,EAASzJ,IAAT,IAAc9T,EAAd,EAAcA,QAAd,SAAuB1H,MACpB0H,EAAU,sBAAwB,qBAK5Cwd,EAAUpxB,EAAe2K,qBAAqBsmB,GACpDrvB,QAAQC,IAAIuvB,GAEZpxB,EAAeqpB,qBAAqB+H,GAEpCxvB,QAAQC,IAAI,+BAEhB,OAAO7B,EAAespB,YAAYntB,GG2OnBk1B,CAAuBL,EAAa70B,EAAO,OAlNxD,KAsNF8sB,oBAAsB,WAClB,EAAK7sB,UAAS,SAACD,GACX,OCxK6B,SACvCA,EACA6D,GAEA7D,EAAMgE,OAASlH,EAAc8H,aAC7B,IAAMktB,EAAmBjuB,EAAe2K,qBACtC2I,GAAkBe,iBAClBf,GAAkBG,oBAGpB,OADAzT,EAAeqpB,qBAAqB4E,GAC7BjuB,EAAespB,YAAYntB,GD8JjBm1B,CAA0Bn1B,EAAO,OAxN9C,KA4NF0sB,iCAAmC,WAC/B,EAAKzsB,UAAS,SAACD,GACX,OH1K0C,SAClDA,EACA6D,GAEA,IAAMoI,EAAWjM,EAAMgM,OACjBijB,EAAiB/b,GAAOW,UAAU5H,EAAStD,IAAK3I,EAAMuM,YACtD6oB,EACFjX,GACIne,EAAMiM,SACNjM,GACF,GAEN,GACIA,EAAMgM,SAAWhM,EAAMiM,UACvBjM,EAAMiM,SAAS9C,0BAETisB,GAA+C,IAAxBA,GAA4B,CACrDp1B,EAAK,2BACEA,GADF,IAEDwE,YAAazH,EAAaqU,MAC1B/M,eAAgBtH,EAAaoP,gBAC7BoB,mBAAmB,IAEvB,IAAM4hB,EAAoBtrB,EAAe2K,qBACrC2I,GAAkBgC,oBACd8V,EAAe7b,cAIvB,OADAvP,EAAeqpB,qBAAqBiC,GAC7BtrB,EAAespB,YAAYntB,GAI1C,GAA4B,IAAxBo1B,EAOA,OANAp1B,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcu2B,mBAG1BxvB,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAGtC,GACyB,OAArBiM,EAAShD,SACTjJ,EAAMkM,WACFkP,GAAqBU,sCAGzB,OADAjY,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAGtC,GAC6B,OAAzBiM,EAAS/C,aACTlJ,EAAMkM,WACFkP,GAAqBc,0CAGzB,OADArY,EAAeupB,mBACRvpB,EAAespB,YAAYntB,GAEtCA,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcqI,YACtBX,YAAazH,EAAaqU,MAC1BhF,YAAapM,EAAMiM,SACnB5H,eAAgBtH,EAAaoP,kBAEjC,IAAMgjB,EAAoBtrB,EAAe2K,qBACrC2I,GAAkBgC,oBAAoB8V,EAAe7b,cAGzD,OADAvP,EAAeqpB,qBAAqBiC,GAC7BtrB,EAAespB,YAAYntB,GGmGnBq1B,CAAuCr1B,EAAO,OA9N3D,KAkOFwvB,2BAA6B,SACzB8F,EACAt1B,GAEA,OACI,8CAAes1B,EACVj2B,KACG,SAAC0K,GAAD,OACImJ,GAAOW,UAAU9J,EAAU/J,EAAMuM,YAC5B6G,eAEZlQ,QAAO,SAACzE,GAAD,MAAmB,KAATA,KACjB82B,KAAK,MAPV,UAvON,KAkPFnI,iBAAmB,WACf,EAAKntB,UAAS,SAACD,GACXA,EAAK,2BACEA,GADF,IAEDgE,OAAQlH,EAAcyI,YAE1B,IAAMiwB,EAAgB,EAAKhnB,qBACvB2I,GAAkB+C,cAClB/C,GAAkBG,oBAGtB,OADA,EAAK4V,qBAAqBsI,GACnB,EAAKrI,YAAYntB,OA7P9B,KAiQF2sB,gCAAkC,WAA4B,IAA3BF,IAA0B,yDACzD,EAAKxsB,UAAS,SAACD,GACX,OAAO+sB,GACHN,EACAzsB,EACA,OAtQV,KA2QF6sB,qCAAuC,WAA4B,IAA3BJ,IAA0B,yDAC9D,EAAKxsB,UAAS,SAACD,GACX,OAAO4tB,GACHnB,EACAzsB,EACA,OAhRV,KAsRFktB,qBAAuB,SAACzf,GACpB,EAAKxN,UAAS,SAACD,GAMX,OALIqC,MAAMozB,QAAQhoB,GACdzN,EAAMyN,SAAN,uBAAqBzN,EAAMyN,UAA3B,aAAwCA,IAExCzN,EAAMyN,SAAN,uBAAqBzN,EAAMyN,UAA3B,CAAqCA,IAElC,EAAK0f,YAAYntB,OA7R9B,KAiSF01B,cAAgB,WACZ,IAAMjzB,EAAU,EAAK+L,qBACjB2I,GAAkBiD,YAClB,CACI5C,YAAY,IAIpB,EAAK0V,qBAAqBzqB,IAzS5B,KA4SFmsB,eAAiB,SAACjwB,GAKd,OAJA,EAAKsB,UAAS,SAACD,GAEX,OADAA,EAAMrB,GAAKqB,EAAMrB,GAAK,EACf,EAAKwuB,YAAYntB,MAErBrB,GAjTT,KAoTF6U,WAAa,SACTmiB,EACAC,EACAhsB,GAEA,EAAK3J,UAAS,SAACD,GAOX,OANAyI,GAAW4C,QAAQsqB,EAAgB31B,EAAMkL,SAASjC,QAC9C2sB,EACAhsB,IACAnB,GAAW4C,QAAQuqB,EAAiB51B,EAAMkL,SAASjC,QAC/C0sB,GAED,EAAKxI,YAAYntB,OAhU9B,KAoUF61B,MAAQ,WACJ,IAAMC,EAAO,EACT,EAAK1F,YACL,EAAKD,WAAa4F,aAAY,WACH,OAAnBD,EAAKzF,YACLyF,EAAK1F,WAAY,EACjB5tB,EAAsC,CAClCwzB,OAAQF,EAAKzF,YAGjByF,EAAKzF,UAAY,KACjB4F,cAAc,EAAK9F,eAExB,OAjVT,KAoVFhD,YAAc,SAACntB,GAGX,OAFA,EAAK61B,QACL,EAAKxF,UG3ZE,SAAuBrwB,GACpC,MAAO,CACLkL,QAASlL,EAAMkL,QACfqB,WAAYvM,EAAMuM,WAClBN,SAAUjM,EAAMiM,UHuZKiqB,CAAcl2B,GACxBA,GAvVT,KAyVFkQ,iBAAmB,SAAC7C,GAChB,EAAKpN,UAAS,SAACD,GACX,OAAIqN,GAAwC,IAAxBA,EAAa/J,QAC7BtD,EAAMyN,SAAWJ,EACVrN,GAEJA,MA/Vb,KAkWF6H,aAAe,WACX,EAAK5H,UAAS,SAACD,GAGX,OAFAA,EAAQwN,GAED,EAAK2f,YAAYntB,MAE5B,IAAMmM,EAAkB,EAAKqC,qBACzB2I,GAAkBC,kBAEtB,EAAK8V,qBAAqB/gB,IA3W5B,KA8WFgqB,MAAQ,SAAC9R,GACL,OAAO,IAAI+R,SAAQ,SAAUC,GACzBC,WAAWD,EAAa,IAAJhS,OA/WxBrZ,KAAKwD,qBAAuBA,EAC5BxD,KAAK/K,SAAW+vB,EAChBhlB,KAAKilB,oBAAsBA,EAC3BjlB,KAAKklB,SAAWA,E,uDAIpB,WAAsB,IAAD,OACjB1tB,KAEA,IAAMI,EAAeJ,KAEhBuO,WAAU,SAACtO,GACR,EAAKuO,iBAEbxO,GAAuCI,K,6BAyF3C,SAAgB2zB,GAAiC,IAAD,OAM5CvrB,KAAK/K,UAAS,SAACD,GACX,OC9ImB,SAC7B8wB,EACA9wB,EACA6D,GAEA,IAAMqtB,EAAoBrtB,EAAe2K,qBACvC2I,GAAkBa,kBAClB,CAAER,YAAY,IAEV6Z,EAAsB1c,GAAemc,GACrCQ,EAAyBvd,GAC7Bsd,EAAoB,IAEhBE,EAAc,cAAC,GAAD,CAAoBlrB,MAAOirB,IAC/C,GAA+B,IAA3BD,EAAoB,GAAU,CAChC,IAAMS,EAAmBjuB,EAAe2K,qBACtC2I,GAAkBe,iBAClBf,GAAkBG,oBAEdma,EAAiB5tB,EAAeosB,oBAAoBsB,GAC1D1tB,EAAeqpB,qBAAqBuE,IAEpCzxB,EAAK,2BACAA,GADA,IAEHgE,OAAQlH,EAAc8H,aACtBsH,UAAWwkB,SAASW,EAAoB,OAEhCnlB,WAAa,GACrBrI,EAAeupB,mBAEjBvpB,EAAeqpB,qBAAqB4E,OAC/B,CACL,IAAMO,EAAmBxuB,EAAe2K,qBACtC2I,GAAkBc,kBAGpBpU,EAAeqpB,qBAAqBmF,GACpCxuB,EAAeqpB,qBAAqBgE,GAGtC,OAAOrtB,EAAespB,YAAYntB,GDsGjByS,CAAgB8jB,EAAkBv2B,EAAO,Q,kCAwCxD,SAAqBw2B,GAAuC,IAAD,OACvDxrB,KAAK/K,UAAS,SAACD,GACX,ODhNsB,SAChC8wB,EACA9wB,EACA6D,GAEA,IAAM4yB,EAAiB/F,SAASI,GAEhC,GADA9wB,EAAMoM,YAAY/C,YAAcotB,EACT,IAAnBA,EAAsB,CACxB,IAAMC,EAAW12B,EAAMoM,YAAYyjB,YAAY7vB,EAAMkL,SACrD,GAAIwrB,EAAU,CACZ,IAAMtsB,EAASiB,GAAQqrB,EAAU12B,EAAMkL,SACvClL,EAAMoM,YAAchC,EACpB,IAAMkD,EAAwBtN,EAAMsN,sBACpC+hB,GAAsBrvB,EAAOsN,EAAuBzJ,QAEpD2oB,GAAkBxsB,EAAO6D,GAE3B,OAAOA,EAAespB,YAAYntB,GAKpC,IAFA,IAAM22B,EAAsD,IAAvC32B,EAAMoM,YAAYpD,UAAU1F,OAC7CszB,EAAS52B,EAAMrB,GACV6M,EAAI,EAAGA,EAAIxL,EAAMoM,YAAY/C,YAAamC,IAAK,CACtD,IAAM7B,EAAQmlB,GAAgB9uB,EAAO42B,KAErC,GADA52B,EAAMoM,YAAY1C,UAAUC,GAAO,GACI,OAAnC3J,EAAMoM,YAAY7C,aAAuB,CAC3C,IAAMstB,EAAqBxrB,GACzBrL,EAAMoM,YAAY7C,aAClBvJ,EAAMkL,SAER2rB,EAAmBntB,UAAUC,GAAO,GAAM,GAC1CktB,EAAmBC,6BAGvB92B,EAAMrB,GAAKi4B,EAGK,IADd52B,EAAMsN,sBAAsBpK,QAAO,SAAC6zB,GAAD,OAAOA,EAAE,KAAO/2B,EAAMoM,YAAYxD,UAClEtF,QAEHtD,EAAMsN,sBAAsBzK,KAAK,CAAC7C,EAAMoM,YAAYxD,OAAQ,IAG9D5I,EAAMqE,eAAiBtH,EAAaqU,MACpC,IAAM4b,EAAanZ,GACjB7T,EAAMoM,YAAYzD,IAClB3I,EAAMuM,YACN6G,YACF,GAAIujB,EAAc,CAChB,IAAMlH,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkBsB,sBAAsBuU,IAE1CnpB,EAAeqpB,qBAAqBuC,OAC/B,CACL,IAAMF,EAAgB1rB,EAAe2rB,2BACnCxvB,EAAMoM,YAAYpD,UAClBhJ,GAEIyvB,EAAuB5rB,EAAe2K,qBAC1C2I,GAAkByB,sBAAsBoU,EAAYuC,IAEtD1rB,EAAeqpB,qBAAqBuC,GAEtC,OAAO5rB,EAAespB,YAAYntB,GCkJjBg3B,CAAmBR,EAAwBx2B,EAAO,U,KA2NtD+vB,M,SI1bTkH,G,cAQJ,WACEt4B,EACAu4B,EACAp0B,EACAiF,EACAovB,GACC,0BAbHx4B,QAaE,OAZFu4B,UAYE,OAXFp0B,UAWE,OAVFiF,cAUE,OATFovB,YASE,OARFC,WAAY,EAQV,KAPFC,aAAc,EAQZrsB,KAAKrM,GAAKA,EACVqM,KAAKksB,KAAOA,EACZlsB,KAAKlI,KAAOA,EACZkI,KAAKjD,SAAWA,EAChBiD,KAAKmsB,OAASA,KAGLG,GAAb,cAUE,WAAYjxB,EAAevD,GAAa,0BATxCuD,MAAQ,GAS+B,KARvCkxB,gBAQuC,OAPvCC,SAOuC,EACrCxsB,KAAK3E,MAAQA,EACb2E,KAAKwsB,IAAM10B,EACXkI,KAAKusB,YAAa,KAGPN,MCtCTQ,G,cAWJ,WACE94B,EACAu4B,EACAQ,EACA3wB,EACAV,GAGC,IAFDsxB,EAEA,uDAFe,GACfC,EACA,uDADe,GACf,0BAlBFj5B,QAkBE,OAjBFu4B,KAAO,aAiBL,KAhBFQ,YAgBE,OAfF3wB,YAeE,OAdFV,WAcE,OAbFwxB,UAAW,EAaT,KAXFF,kBAWE,OAVFC,kBAUE,EACA5sB,KAAKrM,GAAKA,EACVqM,KAAKksB,KAAOA,EACZlsB,KAAK0sB,OAASA,EACd1sB,KAAKjE,OAASA,EACdiE,KAAK3E,MAAQA,EACb2E,KAAK2sB,aAAeA,EACpB3sB,KAAK4sB,aAAeA,KAITH,MC9BFK,GAAb,cAGE,WAAYC,EAAyB3tB,GAAkB,0BAFvDA,YAEsD,OADtD2tB,cACsD,EACpD/sB,KAAK+sB,SAAWA,EAChB/sB,KAAKZ,OAASA,K1CEd4tB,IAAY,OACdC,GAAW,OACPC,GAAc,CAAC,CAAC,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,EAAG,GAAI,EAAE,GAAI,EAAG,EAAG,IACvDC,GAAe,IAAI1uB,IACnB2uB,GAAiB,IAAI/1B,MAGnBg2B,GAAW,IA0BXC,GAAY,SAChBC,EACArtB,GAIA,IAFA,IAAMstB,EAAiB,IAAIn2B,MAElBmJ,EAAIwsB,GAAUxsB,GAAKysB,GAAUzsB,IAAK,CACzC,IAAMitB,EAAyBF,EAAS7sB,IAAIF,GAE5C,QAA+BG,IAA3B8sB,EAAsC,CAAC,IAAD,iBACrBA,GADqB,yBAC7BhtB,EAD6B,QAEjC+sB,EAAeltB,SAASG,EAAK9M,KAChC65B,EAAe31B,KAAK4I,EAAK9M,IAE3B,IAAM+5B,EAAcjwB,GAAW4C,QAAQqlB,SAASjlB,EAAK9M,IAAKuM,GAE1D,GAAIM,IAAMwsB,GAAU,CAClB,IAAIW,EAAY,EACVC,EAAqBF,EAAY3vB,SACvC6vB,EAAmBv5B,KAAI,SAACiL,GACtB,IAAM+Z,EAAI8T,GAAazsB,IAAIpB,QACjBqB,IAAN0Y,IACFsU,GAAatU,EAAE8S,WAGe,IAA9ByB,EAAmBt1B,SACrBmI,EAAK0rB,OAASwB,EAAYC,EAAmBt1B,QAEjD,IAAMu1B,EAAgBH,EAAYzvB,QAC9ByvB,EAAYzvB,QACZyvB,EAAYxvB,YACZwvB,EAAYxvB,YACZwvB,EAAYvvB,uBACZuvB,EAAYvvB,uBACZ,KACJ,GAAsB,OAAlB0vB,EAAwB,CACrBL,EAAeltB,SAAf,UAA2ButB,KAC9BL,EAAe31B,KAAf,UAAuBg2B,IAGzB,IAAMC,EAAmBC,GAAa,GAAD,OAAIF,IACpCC,EAAiBh2B,KAAK00B,MACzBsB,EAAiBh2B,KAAK00B,IAAM,IAEzB/rB,EAAK3I,KAAK00B,MACb/rB,EAAK3I,KAAK00B,IAAM,IAEb9a,GAAsBM,IAAIxR,IAC7BkR,GAAsBQ,IAAI1R,EAAG,IAAInJ,OAEnC,IAAM22B,EAAqBtc,GAAsBhR,IAAIF,GAErD,GAAIktB,EAAYvvB,wBASd,GARI6vB,IACGA,EAAmB1tB,SAASutB,IAC/BG,EAAmBn2B,KAAKg2B,EAAeH,EAAY/vB,MAGvDmwB,EAAiB3B,OAAS1rB,EAAK0rB,OAAS,IACxC2B,EAAiBh2B,KAAK00B,IAAItV,MAAQ,QAClCzW,EAAK3I,KAAK00B,IAAIvV,KAAO,OAIL,IAFdmW,GAAel1B,QAAO,SAAC+1B,GACrB,OAAOA,EAAUt6B,KAAV,WAAqBk6B,EAArB,YAAsCH,EAAY/vB,QACxDrF,OACH,CACA,IAAM41B,EAAe,IAAIzB,GAAJ,WACfoB,EADe,YACEH,EAAY/vB,KACjC,WAFmB,UAGhBkwB,GAHgB,UAIhBH,EAAY/vB,KACf,GACA,UACA,UAEFyvB,GAAev1B,KAAKq2B,SAWtB,GARIF,IACGA,EAAmB1tB,SAASutB,IAC/BG,EAAmBn2B,KAAK61B,EAAY/vB,IAAKkwB,IAG7CC,EAAiB3B,OAAS1rB,EAAK0rB,OAAS,IACxC2B,EAAiBh2B,KAAK00B,IAAIvV,KAAO,OACjCxW,EAAK3I,KAAK00B,IAAItV,MAAQ,QAIN,IAFdkW,GAAel1B,QAAO,SAAC+1B,GACrB,OAAOA,EAAUt6B,KAAV,WAAqB+5B,EAAY/vB,IAAjC,YAAwCkwB,MAC9Cv1B,OACH,CACA,IAAM41B,EAAe,IAAIzB,GAAJ,WACfiB,EAAY/vB,IADG,YACIkwB,GACvB,WAFmB,UAGhBH,EAAY/vB,KAHI,UAIhBkwB,GACH,GACA,UACA,UAEFT,GAAev1B,KAAKq2B,IAK1B,GAA2C,OAAvCR,EAAYvvB,uBAAiC,CAE5CqvB,EAAeltB,SAAf,UAA2BotB,EAAYvvB,0BAExCqvB,EAAe31B,KAAf,UAAuB61B,EAAYvvB,yBAErC,IAAM2vB,EAAmBC,GAAa,GAAD,OAChCL,EAAYvvB,yBAEZ2vB,EAAiBh2B,KAAK00B,MACzBsB,EAAiBh2B,KAAK00B,IAAM,IAEzB/rB,EAAK3I,KAAK00B,MACb/rB,EAAK3I,KAAK00B,IAAM,IAEb9a,GAAsBM,IAAIxR,IAC7BkR,GAAsBQ,IAAI1R,EAAG,IAAInJ,OAEnC,IAAM22B,EAAqBtc,GAAsBhR,IAAIF,GAcrD,GAbIwtB,IAECA,EAAmB1tB,SAASotB,EAAYvvB,0BAEpC6vB,EAAmB1tB,SAASotB,EAAY/vB,MAC3CqwB,EAAmBn2B,KAAK61B,EAAY/vB,KAEtCqwB,EAAmBn2B,KAAK61B,EAAYvvB,0BAGxC2vB,EAAiB3B,OAAS1rB,EAAK0rB,OAAS,IACxC2B,EAAiBh2B,KAAK00B,IAAIvV,KAAO,OACjCxW,EAAK3I,KAAK00B,IAAItV,MAAQ,QAON,IALdkW,GAAel1B,QAAO,SAAC+1B,GACrB,OACEA,EAAUt6B,KAAV,WACI+5B,EAAY/vB,IADhB,YACuB+vB,EAAYvvB,2BAEpC7F,OACH,CACA,IAAM41B,EAAe,IAAIzB,GAAJ,WACfiB,EAAY/vB,IADG,YACI+vB,EAAYvvB,wBACnC,WAFmB,UAGhBuvB,EAAY/vB,KAHI,UAIhB+vB,EAAYvvB,wBACf,GACA,UACA,UAEFivB,GAAev1B,KAAKq2B,IAIxBC,GAAkBT,EAAY7vB,MAAO2vB,GACjCE,EAAY5vB,cACdqwB,GAAkBT,EAAY5vB,aAAc0vB,IAtJhD,2BAA4C,IADJ,kCA8JxCY,GAAc,SAACt2B,GACnB,IAAMy1B,EAAW,IAAI9uB,IA4BrB,OA1BA3G,EAAKoI,QAAQzH,SAAQ,SAAUgI,EAAkBnK,GAAc,IAAD,EACtD+3B,EAAcnmB,GAAOW,UAAUpI,EAAK9C,IAAK7F,EAAKyJ,YAEhDd,EAAK7C,OAASovB,KAChBA,GAAWvsB,EAAK7C,QAEd6C,EAAK7C,OAASqvB,KAChBA,GAAWxsB,EAAK7C,QAEb2vB,EAASvb,IAAIvR,EAAK7C,SACrB2vB,EAASrb,IAAIzR,EAAK7C,OAAQ,IAAIvG,OAEhC,IAAMi3B,EAAYD,EAAYhmB,UAAZ,iBACJgmB,EAAYjmB,aACtBimB,EAAYjmB,YACVyb,EAAU,IAAIoI,GAClBxrB,EAAK9C,IAAIioB,WACT,cACA,IAAI0G,GAASgC,GACb,CAAE5uB,EAAG,EAAG6uB,EAAG,GACX,GAEF,UAAAhB,EAAS7sB,IAAID,EAAK7C,eAAlB,SAA2B/F,KAAKgsB,GAChCsJ,GAAajb,IAAIzR,EAAK9C,IAAKkmB,MAGtB0J,GAGHiB,GAAkB,SACtBjB,EACArtB,GAGA,IADA,IAAIuuB,EAAO,EACFjuB,EAAIwsB,GAAUxsB,GAAKysB,GAAUzsB,IAAK,CACzC,IAAMitB,EAAyBF,EAAS7sB,IAAIF,GAE5C,QAA+BG,IAA3B8sB,EAAsC,CACxC,IAAMiB,EAAuBjB,EAAuBpK,MAAK,SAAC7nB,EAAG8nB,GAAJ,OACvD9nB,EAAE2wB,QAAU7I,EAAE6I,OAAS,GAAK,KAGxBwC,EAAUC,GACdF,EACAhd,GAAsBhR,IAAIF,GAC1BN,GAGF2uB,GAAeF,EAASF,GAE1BA,GAAQhd,KAGNod,GAAiB,SAACF,EAAwBF,GAC9C,IAD+D,EAC3DK,EAAQ,EACNC,EAAOvd,GAAQ6b,GACjB2B,GAAkB,IAHyC,eAK1CL,GAL0C,IAK/D,2BAA8B,CAAC,IAApBM,EAAmB,QAEtB5V,EAAI4V,EAAOlC,SAASz0B,OAC1B,GAAI22B,EAAO7vB,OAAQ,CAGjB,IAAM8vB,EAAkBnB,GAAakB,EAAO7vB,OAAOwmB,YAC/CuJ,EACFD,EAAgBnyB,SAAS2C,EACzB2tB,MACChU,EAAIgU,IAAYhU,EAAI,GAAK0V,GAAQ,EAC9BK,EACJF,EAAgBnyB,SAAS2C,EACzB2tB,MACChU,EAAIgU,IAAYhU,EAAI,GAAK0V,GAAQ,EAEhCC,EAAiBG,IACnBA,EAAgBH,GAElBA,EAAiBI,EAAiBL,EAhBjB,qBAiBGE,EAAOlC,UAjBV,IAiBjB,2BAAqC,CAAC,IAA3BsC,EAA0B,QACnBtB,GAAasB,EAAMzJ,YAC3B7oB,SAAW,CAAE2C,EAAGyvB,EAAeZ,EAAGE,GAE1CK,EADAK,GAAiB3d,IApBF,mCAuBZ,CAGLwd,EADuBF,EAAQzV,EAAI7H,GAF9B,qBAIeyd,EAAOlC,UAJtB,IAIL,2BAAqC,CAAC,IAA3BsC,EAA0B,QACnBtB,GAAasB,EAAMzJ,YAC3B7oB,SAAW,CAAE2C,EAAGovB,EAAOP,EAAGE,GAClCK,GAAStd,IAPN,iCA/BsD,gCA2C3Dod,GAAoB,SACxBU,EACAC,EACArvB,GAEA,IADG,EACGyuB,EAAU,IAAIt3B,MAChBm4B,GAAqB,EAFtB,eAGqBF,GAHrB,yBAGQG,EAHR,QAIKhvB,EAAOhD,GAAW4C,QAAQqlB,SAAS+J,EAAU97B,IAAKuM,GAGxD,GAAIqvB,GAAiBA,EAAcjvB,SAASG,EAAK9C,KAAM,CACrD,GAAI6xB,EACF,iBAGF,IAAIE,EADJF,GAAqB,EAErB,IANqD,EAMjDG,GAAmB,EAN8B,eAO/BJ,GAP+B,yBAO1C1vB,EAP0C,QAQ7C+vB,EAAcnyB,GAAW4C,QAAQR,EAASK,GAC1C2vB,EAAkBlB,EAAQz2B,QAAO,SAAC+2B,GACtC,QAAIA,EAAO7vB,QACFwwB,EAAY7xB,SAASuC,SAAS2uB,EAAO7vB,WAIhD,GAA+B,IAA3BywB,EAAgBv3B,OAKlB,OAHAu3B,EAAgB,GAAG9C,SACjB8C,EAAgB,GAAG9C,SAASrjB,OAAO6lB,GACrCI,GAAmB,EACnB,QAEoC,IAAhCC,EAAY7xB,SAASzF,SACvBo3B,EAAgBE,EAAY7xB,SAAS,KAhB3C,2BAAqC,kBAajC,OApBiD,8BA0BhD4xB,GACHhB,EAAQ92B,KAAK,IAAIi1B,GAAOyC,EAAeG,QACpC,CACL,IAMIT,EANEa,EAAiBnB,EAAQz2B,QAAO,SAAC+2B,GACrC,QAAIA,EAAO7vB,QACFqB,EAAK1C,SAASuC,SAAS2uB,EAAO7vB,WAKX,IAA1B0wB,EAAex3B,QACjB22B,EAASa,EAAe,IACjB/C,SAASl1B,KAAK4I,EAAK9C,MAGxBsxB,EAD2B,IAAzBxuB,EAAK1C,SAASzF,OACP,IAAIw0B,GAAO,CAACrsB,EAAK9C,KAAM8C,EAAK1C,SAAS,IAClC,IAAI+uB,GAAO,CAACrsB,EAAK9C,MAC/BgxB,EAAQ92B,KAAKo3B,MA/CnB,2BAAoC,IAHjC,8BAsDH,OAAON,GAEHoB,GAA6B,SACjC7vB,GAEA,IAAM8vB,EAAa,IAAI34B,MAMvB,OAJA81B,GAAa10B,SAAQ,SAACmK,EAAOtM,GAC0C,IAAjEmH,GAAW4C,QAAQqlB,SAAS9iB,EAAMjP,IAAKuM,GAASrC,MAAMvF,QACxD03B,EAAWn4B,KAAK+K,MAEbotB,EAAWtmB,OAAO0jB,KAGrB6C,GAAuB,SAACC,GAE5B,IADA,IAAMC,EAAgBjD,GAAYgD,EAAU53B,OAAS,GAC5CkI,EAAI,EAAGA,EAAI0vB,EAAU53B,OAAQkI,IACpC0vB,EAAU1vB,GAAG2rB,OAASgE,EAAc3vB,IAGlCutB,GAAe,SAACp6B,GACpB,IAAM87B,EAAmCtC,GAAazsB,IAAIglB,SAAS/xB,IACnE,QAAiBgN,GAAb8uB,EACF,MAAM,IAAIhwB,MAAM,kCAAoC9L,GAEtD,OAAO87B,GAET,SAAStB,GACPiC,EACA5C,GAEA,IADC,IAAD,WACS6C,GACP,GACED,EAAgBC,GAAG,KAAO7yB,GAAoByD,WAC7CmvB,EAAgBC,EAAI,GAAG,KAAO7yB,GAAoBiL,QACjD2nB,EAAgBC,EAAI,GAAG,KAAO7yB,GAAoBoL,YAClDwnB,EAAgBC,EAAI,GAAG,KAAO7yB,GAAoBkqB,iBAEpD,cAEF8F,EAAe31B,KAAKu4B,EAAgBC,GAAG,GAAGzK,YAC1C,IAAI8G,EAAS,GACX3wB,EAAS,GAETq0B,EAAgBC,EAAI,GAAG,IAAMD,EAAgBC,GAAG,IAC/CD,EAAgBC,EAAI,GAAG,KAAO7yB,GAAoBmB,OACjDyxB,EAAgBC,GAAG,KAAO7yB,GAAoByD,UAEhDyrB,EAAS0D,EAAgBC,GAAG,GAAGzK,WAC/B7pB,EAASq0B,EAAgBC,EAAI,GAAG,GAAGzK,aAEnC8G,EAAS0D,EAAgBC,EAAI,GAAG,GAAGzK,WACnC7pB,EAASq0B,EAAgBC,GAAG,GAAGzK,YAEjC,IAAM0K,EAAavC,GAAarB,GAC3B4D,EAAWx4B,KAAK00B,MACnB8D,EAAWx4B,KAAK00B,IAAM,IAExB8D,EAAWx4B,KAAK00B,IAAIxV,OAAS,SAC7B,IAAMuZ,EAAaxC,GAAahyB,GAMhC,GALKw0B,EAAWz4B,KAAK00B,MACnB+D,EAAWz4B,KAAK00B,IAAM,IAExB+D,EAAWz4B,KAAK00B,IAAIgE,IAAM,MAKV,IAFdpD,GAAel1B,QAAO,SAAC+1B,GACrB,OAAOA,EAAUt6B,KAAV,WAAqB+4B,EAArB,YAA+B3wB,MACrCzD,OACH,CACA,IAAM41B,EAAe,IAAIzB,GAAJ,WACfC,EADe,YACL3wB,GACd,WACA2wB,EACA3wB,EACA,GACA,WACA,SAEFqxB,GAAev1B,KAAKq2B,KAhDfmC,EAAID,EAAgB93B,OAAS,EAAG+3B,GAAK,EAAGA,IAAK,gBAA7CA,GAOL,O,I2C/YDI,G,oBAAAA,K,gBAAAA,E,iBAAAA,Q,KAKL,IAAMC,GAAmB,CACvB,CACExE,KAAM,SACNnvB,SAAU4zB,KAASC,MACnBj9B,GAAI,UACJ0C,MAAO,CAAEm6B,IAAK,MAAOh0B,WAAY,SAEnC,CACE0vB,KAAM,SACNnvB,SAAU4zB,KAASE,OACnBl9B,GAAI,WACJ0C,MAAO,CAAE4gB,KAAM,MAAOza,WAAY,SAEpC,CACE0vB,KAAM,SACNnvB,SAAU4zB,KAASG,KACnBn9B,GAAI,SACJ0C,MAAO,CAAEm6B,IAAK,MAAOh0B,WAAY,SAEnC,CACE0vB,KAAM,SACNnvB,SAAU4zB,KAASI,IACnBp9B,GAAI,QACJ0C,MAAO,CAAE4gB,KAAM,MAAOza,WAAY,UAOhCw0B,GAAoB,CACxBC,SAAU,CACRz0B,WAAY,OACZnK,MAAO,OACP6+B,MAAO,OAEPC,aAAc,MACdC,YAAa,eACbC,YAAa,QACb7Z,YAAa,MACb8Z,cAAe,SAEjBC,UAAW,CACTL,MAAO,SACPp2B,QAAS,WACTtG,OAAO,GAAD,OAA0B,QAA1B,KACN3B,QAAS,MAEX2+B,UAAW,CACT12B,QArB6C,OAsB7C22B,UAAW,kBACX5+B,QAAS,QACTy+B,cAAe,GAEjBI,aAAc,CACZjb,OAAQ,OACR1jB,UAAW,SACXH,SAAU,MACV2jB,cAAe,UAEjBob,SAAU,CACR/+B,SAAU,SACV6jB,OAAQ,EACRmb,WAAY,WAkDV/G,GAAQ,SAAC/yB,EAAW00B,GACxB,SACE10B,GACCA,EAAKmf,OAASuV,GACb10B,EAAKof,QAAUsV,GACf10B,EAAK04B,MAAQhE,GACb10B,EAAKkf,SAAWwV,IAOhBqF,GAAoB,SAACC,GAQzB,OAAOA,GAGMC,GAtEI,SAACC,GAClB,IAAMl6B,EAAOk6B,EAAUl6B,KAEjBm6B,EAAgBn6B,EAAKm6B,cAErBC,EAAUxB,GAAiBr8B,KAAI,SAAC89B,EAAGC,GACvC,GAAIvH,GAAM/yB,EAAK00B,IAAK2F,EAAEp1B,UACpB,OACE,cAAC,KAAD,CAEEmvB,KAAiB,WAAXiG,EAAEjG,KAAoBuE,GAAW/D,OAAS+D,GAAW10B,OAC3DgB,SAAUo1B,EAAEp1B,SACZpJ,GAAIw+B,EAAEx+B,GACN0C,MAAO87B,EAAE97B,MACT47B,cAAeA,GALVE,EAAEx+B,OAUT0+B,EAAcR,GAAkB/5B,EAAKuD,OAC3C,OACE,8BACE,sBAAK1H,GAAE,iBAAYq+B,EAAUr+B,IAAM0C,MAAO26B,GAAkBC,SAA5D,UACE,qBAAK56B,MAAO26B,GAAkBO,UAA9B,SACE,cAAC,WAAD,CACEl7B,MAAO26B,GAAkBU,aACzBpc,IAAK,GACLgd,KAAK,SACLC,sBAAsB,EAJxB,SAMGF,MAGL,qBAAKh8B,MAAO26B,GAAkBQ,UAA9B,SACE,mBAAGn7B,MAAO26B,GAAkBW,SAA5B,4BAGDO,QC9GHM,GAAqB,IAAIt7B,IACzBu7B,GAAiC,IAAIp7B,MAC9Bq7B,GAEW,SAACj7B,GAAD,OAAkB+6B,GAAmB96B,KAAKD,IAFrDi7B,GAKU,kBAAMF,GAAmB76B,gBALnC+6B,GAOQ,SAAC96B,GAAD,OAAgC66B,GAA+B56B,KAAKD,IAP5E86B,GAUa,WAClBD,GAA+Bh6B,SAAQ,SAACb,GACpCA,EAAac,kBCDnBi6B,GAAa,CAAEn+B,OAAQ,OAAQ08B,MAAO,OACxC0B,IAAiB,EAyENC,GAxEM,WAEnB,MAA4Bh+B,mBAAS,CACnCqL,QAAS,IAAIzB,IACbqK,UAAW,IAAIrK,IACfwC,SAAU,OAHZ,mBAAO6xB,EAAP,KAAeC,EAAf,KAKA,EAAwCl+B,mBAAS,IAAjD,mBAAOm+B,EAAP,KAAqBC,EAArB,KACMC,EAAuB/nB,kBAAO,GAC9BgoB,EAAsBC,eAS5Bl+B,qBAAU,WACR,OAAO,WACLg+B,EAAqBjnB,SAAU,KAEhC,IACH/W,qBAAU,WACRw9B,KACA,IAAM96B,EAAe86B,KAElB3sB,WAAU,SAACjO,GAAD,OAAei7B,EAAUj7B,MACtC46B,GAA6C96B,GACzCs7B,EAAqBjnB,SACvBymB,OAED,CAAC,IACJx9B,qBAAU,WACRo2B,YAAW,WAtBX0H,EAAav6B,SAAQ,SAAC46B,GAEhBA,aAAqBpH,IACvBkH,EAAoBE,EAAU1/B,SAqB/B,OACF,CAACq/B,IACJ99B,qBAAU,WACR+9B,E7CxCuB,SAACn7B,GACzBk1B,IAAY,OAAUC,GAAW,OAClCE,GAAe,IAAI1uB,IACnB2uB,GAAiB,IAAI/1B,MACrBqa,GAAwB,IAAIjT,IAC5B+S,GAAQ,IACRC,GAAQ,IAGR,IAAM8b,EAAWa,GAAYt2B,GACvBw7B,EAAe/F,EAAS7sB,IAAIssB,IAClC,OAA4B,IAAxBl1B,EAAKoI,QAAQ5H,aAAiCqI,IAAjB2yB,EACxB,IAETrD,GAAqBqD,GACrBhG,GAAUC,EAAUz1B,EAAKoI,SACzBsuB,GAAgBjB,EAAUz1B,EAAKoI,SACxB6vB,GAA2Bj4B,EAAKoI,U6CuBrBqzB,CAAYT,IAC5BF,IAAiB,IAChB,CAACE,IACJ,IAAQU,EAAYC,eAAZD,QACFE,EAAY,CAChBC,YAAa5B,IASf,OANA78B,qBAAU,WACJ09B,IACFY,OAKF,qBAAK7/B,GAAG,iBAAiB0C,MAAO,CAAE7B,OAAQ,OAAQo/B,WAAY,QAA9D,SACE,eAAC,KAAD,CACE7G,SAAUiG,EACV38B,MAAOs8B,GACPe,UAAWA,EACXG,kBAAkB,EAClBC,cAAc,EACdC,mBAAmB,EACnBC,oBAAoB,EACpBC,gBAAgB,EARlB,UAUE,cAAC,KAAD,CAAYxhC,QAASyhC,KAAkBC,MAAOC,IAAK,EAAGv+B,KAAM,IAC5D,cAAC,KAAD,UCnFO,I,OAAA,IAA0B,8CCqGnCw+B,GAAgB,WAKpB,IAAMC,EAAoB15B,SAASgL,uBACjC,qCACA,GACI2uB,EAAS35B,SAAS45B,cAAc,OACtCD,EAAO5gC,GAAK,sBACZ4gC,EAAOlvB,UAAY,UACnBkvB,EAAOl+B,MAAMrD,gBAAkB,MAC/BuhC,EAAOl+B,MAAM0G,SAAW,WACxBw3B,EAAOl+B,MAAM2gB,OAAS,SACtBud,EAAOl+B,MAAM66B,MAAQ,OACrBqD,EAAOl+B,MAAMyE,QAAU,OACvBw5B,EAAkBG,QAAQF,IAGtBG,GAA8B,WACX95B,SAASgL,uBAC9B,gCACA,GACarQ,iBAAiB,SAAS,WACvC,IAAMoF,EAAaC,SAASC,eAAe,uBACvCF,GAC+B,UAA7BA,EAAWtE,MAAMyE,UACnBH,EAAWtE,MAAMyE,QAAU,YAKpB65B,GAxHmB,WAChC,IAAIC,EAAO,QAEX1/B,qBAAU,WACRsC,KACA,IAAMI,EAAeJ,KAElBuO,WAAU,YAAiB,IAAdilB,EAAa,EAAbA,OACZ0H,GAAgD1H,MAMpDxzB,GAAuCI,GACvCy8B,KAEAK,OACC,CAAC,IA2BJ,OACE,sBAAK/gC,GAAG,4BAA4B0C,MAAO,CAAE7B,OAAQ,QAArD,UACE,cAAChC,EAAA,EAAD,CAAYC,QAAQ,KAAKmE,MAAM,SAA/B,oCAGA,cAAC,KAAD,UACE,cAAC,GAAD,MAGA,qBAAKlE,UAAU,mBAAf,SACE,cAAC,UAAD,CACEuQ,OAAQ4xB,GACRh8B,eAAgBksB,GAChB/c,cAAexC,OAIrB,wBAAQ9S,UAAU,sBAAsBkD,QA7B1B,WAChB,IAAMk/B,EAAal6B,SAASgL,uBAC1B,oCACA,GACW,UAATgvB,GACFE,EAAWz+B,MAAMyE,QAAU,OAC3B85B,EAAO,SAEPE,EAAWz+B,MAAMyE,QAAU,QAC3B85B,EAAO,UAoBP,SACE,qBAAKhc,IAAKmc,WC9DZC,GAAY,WAChB,OACE,eAACxiC,EAAA,EAAD,CAAYC,QAAQ,QAAQJ,MAAM,gBAAgBuE,MAAM,SAAxD,UACG,kBACD,cAACV,EAAA,EAAD,CAAM7D,MAAM,UAAUiB,KAAK,2BAA3B,qBAEQ,KACP,IAAI2hC,MAAOC,cACX,QAKDjjC,GAAYC,aAAW,iBAAO,CAClCijC,OAAQ,CAENtiC,QAASgY,eAAWC,QAAQ,GAC5B9X,gBAAiB,cAuCNktB,GAnCA,SAAC9sB,GACd,IAAMb,EAAUN,KACRmjC,EAAuBhiC,EAAvBgiC,YAAaxhC,EAAUR,EAAVQ,MAErB,OACE,eAACyhC,EAAA,EAAD,CAAO3iC,UAAWH,EAAQ4iC,OAA1B,UACE,cAAC3iC,EAAA,EAAD,CAAYC,QAAQ,KAAKmE,MAAM,SAAS0+B,cAAY,EAApD,SACG1hC,IAEH,cAACpB,EAAA,EAAD,CACEC,QAAQ,YACRmE,MAAM,SACNvE,MAAM,gBACN8D,UAAU,IAJZ,SAMGi/B,IAEH,cAAC,GAAD,QCzCSG,GARO,WACpB,OACE,cAAC/iC,EAAA,EAAD,CAAYC,QAAQ,KAAKmE,MAAM,SAA/B,4B,UCHE4+B,GAAe10B,GAWN20B,GATQ,WAAmC,IAAlCzgC,EAAiC,uDAAzBwgC,GAAcE,EAAW,uCACvD,MACO,mBADCA,EAAOxJ,KAEJwJ,EAAOC,QAEP3gC,GCLE4gC,GADDC,aAAYJ,I,UCgCpBK,GAAQC,cACR9jC,GAAYC,YAAW,CACzBC,KAAM,CAKFqC,OAAQ,SAEZwhC,UAAW,CACPte,UAAW,OACXue,UAAW,QACXz5B,WACI,mFACJ05B,QAAS,OAIXC,GACF,eAAC,IAAD,WACI,cAAC,IAAD,CAAO5iC,OAAK,EAACM,KAAK,IAAIsC,UAAWY,IACjC,cAAC,IAAD,CAAOlD,KAAK,SAASsC,UAAWa,IAChC,cAAC,IAAD,CAAOnD,KAAK,cAAcsC,UAAWw+B,KACrC,cAAC,IAAD,CAAO9gC,KAAK,aAAasC,UAAWo/B,QAuD7Ba,GAnDH,WACR,IAAM7jC,EAAUN,KAEVokC,EAAetzB,GAsBrB,OACI,cAACuzB,EAAA,EAAD,CAAsBC,aAAW,EAAjC,SACI,cAACC,EAAA,EAAD,CAAeV,MAAOA,GAAtB,SACI,eAAC,IAAD,CAAchzB,OA1Bb,QA0B2BL,SAAU4zB,EAAtC,UACI,eAAChB,EAAA,EAAD,CACIoB,KAAK,MAEL,aAAW,oCAHf,UAKI,cAAC,EAAD,IACA,cAAC,KAAD,CAAUb,MAAOA,GAAjB,SACI,cAACP,EAAA,EAAD,CAAO3iC,UAAWH,EAAQyjC,UAA1B,SACKG,UAKb,cAAC,GAAD,CAAQf,YAAY,UAAUxhC,MAAM,oB,SCvFxDusB,kBAEI,cAAC,IAAD,UACI,cAAC,GAAD,MAGJvlB,SAASC,eAAe,S","file":"static/js/main.115caefb.chunk.js","sourcesContent":["export enum ChatStepTypes {\r\n  initalStep = \"\",\r\n  testatorStep = \"testatorStep\",\r\n  undividedEstateStep = \"undividedEstateStep\",\r\n  netWealthStep = \"netWealthStep\",\r\n  underAgeStep = \"underAgeStep\",\r\n  spouseChoice = \"spouseChoice\",\r\n  spouseStep = \"spouseStep\",\r\n  cohabitantChoice = \"cohabitantChoice\",\r\n  cohabitantStep = \"cohabitantStep\",\r\n  successorStep = \"successorStep\",\r\n  parentsStep = \"parentsStep\",\r\n  rearChildrenStep = \"rearChildrenStep\",\r\n  marriedParentsStep = \"marriedParentsStep\",\r\n  grandParentStep = \"grandParentStep\",\r\n  finalStep = \"finalStep\",\r\n  secondParentChoice = \"secondParentChoice\",\r\n  testatorOtherChildStep = \"testatorOtherChildStep\",\r\n}\r\n\r\nexport enum QuestionType {\r\n  initialQuestion = \"none\",\r\n  part1 = \"part1\",\r\n  part2 = \"part2\",\r\n  part3 = \"part3\",\r\n  part4 = \"part4\",\r\n  part5 = \"part5\",\r\n  part6 = \"part6\",\r\n  part7 = \"part7\",\r\n  part8 = \"part8\",\r\n}\r\n\r\nexport enum undividedOwnershipType {\r\n  felleseie = \"FELLESEIE\",\r\n  delvis = \"DELVIS SÆREIE\",\r\n  fullt = \"FULLT SÆREIE\",\r\n  none = \"\",\r\n}\r\n","import { ReactElement } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\n\r\nconst root = {\r\n  fontFamily: '\"Abril Fatface\", serif',\r\n  color: \"#016196\",\r\n};\r\n\r\nconst useStyles = makeStyles({ root });\r\nconst HeaderTitle = (): ReactElement => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Typography variant=\"h2\" className={classes.root} noWrap>\r\n      ARVEBOT\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default HeaderTitle;\r\n","// import classes from \"./MenuLink.module.css\";\r\nimport { ReactElement } from \"react\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface propsTypes {\r\n  href: string;\r\n  name: ReactElement;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    fontFamily: '\"Work Sans\", sans-serif',\r\n    // fontWeight: \"300\",\r\n    fontSize: \"1.3rem\",\r\n    color: \"#4151C9\",\r\n    padding: \"0 20px\",\r\n    textDecoration: \"none\",\r\n    textAlign: \"center\",\r\n    \"&:hover\": {\r\n      color: \"#FFF5EE\",\r\n      backgroundColor: \"#87AFC7\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  rootActive: {\r\n    backgroundColor: \"#FFCBA4\",\r\n    color: \"#2B3856\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#FCCABD\",\r\n      color: \"#2B3856\",\r\n    },\r\n  },\r\n});\r\n\r\nconst MenuLink = (props: propsTypes): ReactElement => {\r\n  const classes = useStyles(props);\r\n  return (\r\n    <NavLink\r\n      to={props.href}\r\n      className={classes.root}\r\n      exact\r\n      activeClassName={classes.rootActive}\r\n    >\r\n      {props.name}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default MenuLink;\r\n","const navLinks = [\r\n  {\r\n    id: 0,\r\n    title: \"Menu.Home\",\r\n    path: \"/\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Menu.Calculator\",\r\n    path: \"/calculator\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Menu.About\",\r\n    path: \"/about\",\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Menu.Resources\",\r\n    path: \"/resources\",\r\n  },\r\n];\r\n\r\nexport default navLinks;\r\n","import { Grid } from \"@mui/material\";\r\nimport MenuLink from \"./MenuLink/MenuLink\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ReactElement } from \"react\";\r\n\r\nconst HeaderMenu = (): ReactElement => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"space-evenly\"\r\n      alignItems=\"center\"\r\n    >\r\n      {NavLinks.map(({ id, title, path }) => {\r\n        return (\r\n          <Grid item key={id}>\r\n            <MenuLink name={<FormattedMessage id={`${title}`} />} href={path} />\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HeaderMenu;\r\n","import { useState, useEffect, ReactElement } from \"react\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Grid,\r\n  IconButton,\r\n  Drawer,\r\n  Link,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport HeaderTitle from \"./HeaderTitle/HeaderTitle\";\r\nimport HeaderMenu from \"./HeaderMenu/HeaderMenu\";\r\nimport NavLinks from \"../../Generic/Header/HeaderMenu/NavLinks\";\r\n\r\nconst useStyles = makeStyles({\r\n  header: {\r\n    backgroundColor: \"white\",\r\n    height: \"5rem\",\r\n  },\r\n  \"@media (max-width: 900px)\": {\r\n    paddingLeft: 0,\r\n  },\r\n  drawerContainer: {\r\n    padding: \"20px 30px\",\r\n  },\r\n  menuIconRoot: {\r\n    color: \"#4151C9\",\r\n  },\r\n});\r\n\r\nconst getDrawerChoices = () => {\r\n  return NavLinks.map(({ id, title, path }) => {\r\n    return (\r\n      <Link\r\n        {...{\r\n          component: RouterLink,\r\n          to: path,\r\n          color: \"inherit\",\r\n          style: { textDecoration: \"none\" },\r\n          key: id,\r\n        }}\r\n      >\r\n        <MenuItem>{title}</MenuItem>\r\n      </Link>\r\n    );\r\n  });\r\n};\r\nconst displayDesktop = () => {\r\n  return (\r\n    <Toolbar>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item sm={6}>\r\n          <HeaderTitle />\r\n        </Grid>\r\n        <Grid item sm={6}>\r\n          <HeaderMenu />\r\n        </Grid>\r\n      </Grid>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nconst Header = (): ReactElement => {\r\n  const [state, setState] = useState({\r\n    mobileView: false,\r\n    drawerOpen: false,\r\n  });\r\n  const { mobileView, drawerOpen } = state;\r\n  useEffect(() => {\r\n    const setResponsiveness = () => {\r\n      return window.innerWidth < 900\r\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\r\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\r\n    };\r\n    setResponsiveness();\r\n    window.addEventListener(\"resize\", () => setResponsiveness());\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  const displayMobile = () => {\r\n    const handleDrawerOpen = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: true }));\r\n    const handleDrawerClose = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: false }));\r\n\r\n    return (\r\n      <Toolbar>\r\n        <MenuIcon className={classes.menuIconRoot} />\r\n        <IconButton edge=\"start\" color=\"inherit\" onClick={handleDrawerOpen} size=\"large\" />\r\n        <Drawer anchor=\"left\" open={drawerOpen} onClose={handleDrawerClose}>\r\n          <div className={classes.drawerContainer}>{getDrawerChoices()}</div>\r\n        </Drawer>\r\n        <HeaderTitle />\r\n      </Toolbar>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppBar className={classes.header}>\r\n      {mobileView ? displayMobile() : displayDesktop()}\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { ReactElement } from \"react\";\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport Typed from 'react-typed';\r\n// import Typed from \"typed.js\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    padding: \"10rem 20rem\",\r\n    color: \"white\",\r\n    fontFamily: '\"Work Sans\", sans-serif',\r\n  },\r\n  highLightText: {\r\n    fontFamily: '\"Abril Fatface\", serif',\r\n    fontSize: \"4rem\",\r\n    color: \"yellow\",\r\n  },\r\n});\r\n\r\nconst HomeDetail = (): ReactElement => {\r\n  const classes = useStyles();\r\n  const textLines = [\"hjelper deg å finne løsningen og relevant rettsgrunnlag.\"]\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h4\" align=\"center\" className={classes.root}>\r\n        Lurer du på hvem som arver Peder Ås når han dør? <br />\r\n        Hvor mye får kona og barna? Hva med stesønnen? <br />\r\n        Og hvor mye kan han testamentere til Lilleviks fuglekikkerforening?{\" \"}\r\n        <br /> <br />\r\n        <span className={classes.highLightText}>BeregnArv</span> <Typed typeSpeed={50} strings={textLines}></Typed>\r\n      </Typography>\r\n    </Box >\r\n  );\r\n};\r\n\r\nexport default HomeDetail;\r\n","import { ReactElement } from \"react\";\r\nimport HomeDetail from \"../Components/HomeComponents/HomeDetail/HomeDetail\";\r\n\r\nconst HomePage = (): ReactElement => {\r\n  return (\r\n    // <Typography variant=\"h2\" align=\"center\">\r\n    //   HomePage\r\n    // </Typography>\r\n    <HomeDetail />\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { Typography } from \"@mui/material\";\r\nimport { ReactElement } from \"react\";\r\nconst AboutPage = (): ReactElement => {\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h2\" align=\"center\">\r\n        About Page\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","import { Subject, Subscription } from \"rxjs\";\r\nimport _ from \"lodash\";\r\n\r\nconst inSubject = new Subject();\r\nconst outSubject = new Subject();\r\nconst internalSubscriptionList = new Array<Subscription>();\r\nconst externalSubscriptionList = new Array<Subscription>();\r\nconst previousStates = new Array<any>();\r\nexport const messageService = {\r\n  sendMessageToChatbot: (message: any) => inSubject.next(message),\r\n\r\n  sendMessageFromChatbot: (message: any) => outSubject.next(message),\r\n\r\n  getMessageInChatbot: () => inSubject.asObservable(),\r\n\r\n  getMessageOutChatbot: () => outSubject.asObservable(),\r\n\r\n  addInternalSubscription: (subscription: Subscription) =>\r\n    internalSubscriptionList.push(subscription),\r\n\r\n  addExternalSubscription: (subscription: Subscription) =>\r\n    externalSubscriptionList.push(subscription),\r\n\r\n  addPreviousState: (data: any) => {\r\n    const stateCopy = _.cloneDeep(data);\r\n    if (\r\n      previousStates.filter(\r\n        (previousState) =>\r\n          Object.entries(previousState) == Object.entries(stateCopy)\r\n      ).length === 0\r\n    ) {\r\n      previousStates.push(stateCopy);\r\n    }\r\n  },\r\n\r\n  removePreviousState: () => {\r\n    if (previousStates.length === 0) {\r\n      return null;\r\n    }\r\n    return previousStates.pop();\r\n  },\r\n\r\n  getPreviousStates: () => previousStates,\r\n\r\n  getPreviousState: (reverseCount: number) => {\r\n    if (previousStates.length === 0) return null;\r\n    return previousStates[previousStates.length - 1 - reverseCount];\r\n  },\r\n\r\n  clearAllInternalSubscription: () => {\r\n    internalSubscriptionList.forEach((subscription: Subscription) => {\r\n      subscription.unsubscribe();\r\n    });\r\n  },\r\n\r\n  clearAllExternalSubscription: () => {\r\n    externalSubscriptionList.forEach((subscription: Subscription) => {\r\n      subscription.unsubscribe();\r\n    });\r\n  },\r\n};\r\n","import './OptionSelector.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { ReactElement } from 'react';\r\nimport { ChatbotInterface } from '../../../Generics';\r\nimport {\r\n    ChatStepTypes,\r\n    QuestionType,\r\n} from '../../../Helper/Enums/ChatStepTypes';\r\nimport { messageService } from '../../../services/ChatbotCommunicator';\r\nimport ActionProvider from '../../../ActionProvider';\r\nimport {\r\n    BinaryAnswerTypeNo,\r\n    BinaryAnswerTypeYes,\r\n} from '../../../Helper/Enums/BinaryAnswerTypes';\r\n\r\nconst OptionSelector = (props: any): ReactElement => {\r\n    const { actionProvider, setState } = props;\r\n    const setOption = (option: boolean) => {\r\n        handleOptions(option, actionProvider, setState);\r\n    };\r\n\r\n    const onClickHandler = (e: any): void => {\r\n        // const thisButton = e.target as HTMLButtonElement\r\n        // const nextButton = (thisButton).nextElementSibling as HTMLButtonElement\r\n        // const prevButton = (thisButton).previousElementSibling as HTMLButtonElement\r\n        // const otherButton = nextButton ? nextButton : prevButton\r\n        // thisButton.style.pointerEvents = \"none\"\r\n        // thisButton.style.background = \"darkolivegreen\";\r\n        // thisButton.disabled = true;\r\n        // otherButton.style.pointerEvents = \"none\"\r\n        // otherButton.disabled = true;\r\n    };\r\n    return (\r\n        <div>\r\n            <div className=\"option-selector-button-container\">\r\n                <button\r\n                    className=\"option-selector-button\"\r\n                    onClick={(e) => {\r\n                        onClickHandler(e);\r\n                        setOption(true);\r\n                    }}\r\n                >\r\n                    <FormattedMessage id=\"Chatbot.Yes\" />\r\n                </button>\r\n                <button\r\n                    className=\"option-selector-button\"\r\n                    onClick={(e) => {\r\n                        onClickHandler(e);\r\n                        setOption(false);\r\n                    }}\r\n                >\r\n                    <FormattedMessage id=\"Chatbot.No\" />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst handleOptions = (\r\n    option: boolean,\r\n    actionProvider: ActionProvider,\r\n    setState: any,\r\n) => {\r\n    hideWarning();\r\n    setState((state: ChatbotInterface) => {\r\n        messageService.addPreviousState({ ...state });\r\n        const curStep = state.stepID;\r\n        state.yesNoClickedFlag = true;\r\n        switch (curStep) {\r\n            case ChatStepTypes.testatorStep: {\r\n                actionProvider.handleUndividedEstateChoice(option);\r\n                break;\r\n            }\r\n            case ChatStepTypes.undividedEstateStep: {\r\n                if (state.successor_flag === QuestionType.part2) {\r\n                    actionProvider.handleChildAliveOption(option);\r\n                    break;\r\n                } else if (state.parent_flag === QuestionType.part2) {\r\n                    actionProvider.handleParentAliveOption(option);\r\n                    break;\r\n                } else if (state.parent_flag === QuestionType.part3) {\r\n                    actionProvider.handleSecondParentExists(option);\r\n                    break;\r\n                }\r\n                break;\r\n            }\r\n            case ChatStepTypes.underAgeStep: {\r\n                actionProvider.handleUnderAge(option);\r\n                break;\r\n            }\r\n            case ChatStepTypes.spouseChoice: {\r\n                actionProvider.handleSpouseChoice(option);\r\n                break;\r\n            }\r\n            case ChatStepTypes.cohabitantChoice: {\r\n                actionProvider.handleCohabitantChoice(option);\r\n                break;\r\n            }\r\n            case ChatStepTypes.successorStep: {\r\n                state.successor_flag = QuestionType.part2;\r\n                actionProvider.handleChildAliveOption(option);\r\n                break;\r\n            }\r\n            case ChatStepTypes.parentsStep: {\r\n                if (state.successor_flag === QuestionType.part2) {\r\n                    actionProvider.handleChildAliveOption(option);\r\n                    break;\r\n                } else if (state.parent_flag === QuestionType.part2) {\r\n                    actionProvider.handleParentAliveOption(option);\r\n                    break;\r\n                } else if (state.parent_flag === QuestionType.part3) {\r\n                    actionProvider.handleSecondParentExists(option);\r\n                    break;\r\n                }\r\n                break;\r\n            }\r\n            case ChatStepTypes.marriedParentsStep: {\r\n                actionProvider.handleMarriedParents(option);\r\n                break;\r\n            }\r\n            case ChatStepTypes.grandParentStep: {\r\n                if (state.successor_flag === QuestionType.part2) {\r\n                    actionProvider.handleChildAliveOption(option);\r\n                    break;\r\n                } else if (state.parent_flag === QuestionType.part2) {\r\n                    actionProvider.handleParentAliveOption(option);\r\n                    break;\r\n                } else if (state.parent_flag === QuestionType.part3) {\r\n                    actionProvider.handleSecondParentExists(option);\r\n                    break;\r\n                }\r\n                break;\r\n            }\r\n            case ChatStepTypes.finalStep: {\r\n                actionProvider.handleFinalQuestion(option);\r\n                break;\r\n            }\r\n            default: {\r\n                console.log('fix this. state: ', state);\r\n            }\r\n        }\r\n        return state;\r\n    });\r\n};\r\nconst hideWarning = () => {\r\n    const warningDiv = document.getElementById('chatbot-warning-div');\r\n    if (warningDiv) {\r\n        warningDiv.style.display = 'none';\r\n        return;\r\n    }\r\n};\r\nexport default OptionSelector;\r\n// function toggleInputField() {\r\n//   const chatInputField = document.querySelectorAll(\r\n//     \".react-chatbot-kit-chat-input\"\r\n//   ) as NodeListOf<HTMLElement>;\r\n//   if (chatInputField)\r\n//     chatInputField[0]. = !chatInputField.disabled;\r\n// }\r\n","import { Box } from \"@mui/material\";\r\nimport PropTypes, { InferProps } from 'prop-types';\r\nimport './InfoMessagesWidget.scss'\r\n\r\nconst InfoMessageTypes = {\r\n  label: PropTypes.string\r\n}\r\ntype InfoMessageTypes = InferProps<typeof InfoMessageTypes>\r\n\r\nconst InfoMessagesWidget = ({ label }: InfoMessageTypes) => {\r\n  return <Box\r\n    display=\"flex\"\r\n    justifyContent=\"center\"\r\n    alignItems=\"center\"\r\n    component=\"span\"\r\n    className=\"InfoMessage\"\r\n    sx={{ backgroundColor: \"#FFCBA4\" }}\r\n  >\r\n    Amount Entered: {label}\r\n  </Box>\r\n};\r\n// color: #FFCBA4\r\n\r\nexport default InfoMessagesWidget;","import { ReactElement } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./RearChildrenOptionSelector.scss\";\r\n\r\nconst RearChildrenOptionSelector = (props: any): ReactElement => {\r\n  const { setState, actionProvider } = props;\r\n\r\n  const setOption = async (option: any) => {\r\n    setState((state: any) => ({\r\n      ...state,\r\n      // stepID: 5,\r\n      rearChildren: option,\r\n    }));\r\n\r\n    actionProvider.handleRearChildrenOptionWidget(option);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"option-selector-button-container\">\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={() => setOption(true)}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.Yes\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={() => setOption(false)}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.No\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RearChildrenOptionSelector;\r\n","import \"./UndividedEstateWidget.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ReactElement } from \"react\";\r\n\r\n\r\nconst UndividedEstateWidget = (props: any): ReactElement => {\r\n  const { actionProvider } = props;\r\n\r\n  const setOption = (option: string) => {\r\n    actionProvider.handleOwnershipResponse(option);\r\n  };\r\n\r\n  const onClickHandler = (e: any): void => {\r\n    const thisButton = e.target as HTMLButtonElement;\r\n    const currentParent = thisButton.parentElement;\r\n    if (currentParent?.hasChildNodes) {\r\n      const allCurrentButtons = Object.values(currentParent.childNodes) as HTMLButtonElement[];\r\n      for (const childEl of allCurrentButtons) {\r\n        childEl.style.pointerEvents = \"none\";\r\n        childEl.disabled = true;\r\n      }\r\n      thisButton.style.background = \"darkolivegreen\";\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"option-selector-button-container\">\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(\"FELLESEIE\")\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.OWNERSHIP_TYPE1\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(\"DELVIS SÆREIE\")\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.OWNERSHIP_TYPE2\" />\r\n        </button>\r\n        <button\r\n          className=\"option-selector-button\"\r\n          onClick={(e) => {\r\n            onClickHandler(e);\r\n            setOption(\"FULLT SÆREIE\")\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Chatbot.OWNERSHIP_TYPE3\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UndividedEstateWidget;\r\n","import { useState } from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport { RestartAlt } from \"@mui/icons-material\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function ChatHeader(props: any) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCloseNo = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseYes = () => {\r\n    restartBot();\r\n    setOpen(false);\r\n  }\r\n\r\n  const restartBot = () => {\r\n    props.actionProvider.resetChatbot();\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Conversation with ArveBot\r\n          </Typography>\r\n          <Button onClick={handleClickOpen} style={{ backgroundColor: \"rgb(92, 204, 157)\" }}>\r\n            <RestartAlt fontSize=\"large\" />\r\n          </Button>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleCloseNo}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n              Restart ChatBot?\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                Do you really want to finish current session and start over?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseNo}>No</Button>\r\n              <Button onClick={handleCloseYes} autoFocus>\r\n                Yes\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","export enum ParentChildSelector {\r\n  child = 0,\r\n  parent = 4,\r\n  testator = -1,\r\n  grandParent = 5,\r\n  spouse = 1,\r\n  cohabitant = 2,\r\n  undividedSpouse = 3,\r\n}\r\n","import { ParentChildSelector } from \"../Enums/ParentChildSelector\";\r\n\r\nexport class NodeEntity {\r\n  _id: number;\r\n  _level: number;\r\n  _path: Array<[number, number]>;\r\n  _partnerPath: Array<[number, number]>;\r\n  _parents: Array<number>;\r\n  _children: Array<number>;\r\n  _spouse: number | null;\r\n  _cohabitant: number | null;\r\n  _undividedEstateSpouse: number | null;\r\n  _relationshipMap: Map<string, string>;\r\n  _childCount: number;\r\n  _processChildNodePos: number;\r\n  _partnerNode: number | null;\r\n  constructor(id: number, level: number) {\r\n    this._id = id;\r\n    this._level = level;\r\n    this._path = [];\r\n    this._partnerPath = [];\r\n    this._parents = [];\r\n    this._children = [];\r\n    this._spouse = null;\r\n    this._cohabitant = null;\r\n    this._undividedEstateSpouse = null;\r\n    this._relationshipMap = this._getRelationshipMap();\r\n    this._childCount = 0;\r\n    this._processChildNodePos = 0;\r\n    this._partnerNode = null;\r\n  }\r\n  _getRelationshipMap = (): Map<string, string> => {\r\n    return new Map<string, string>([\r\n      [\"0\", \"child\"],\r\n      [\"00\", \"grandchild\"],\r\n      [\"1\", \"parent\"],\r\n      [\"10\", \"brother/sister\"],\r\n      [\"100\", \"nephew/niece\"],\r\n      [\"1000\", \"grandniece\"],\r\n      [\"12\", \"grandparent\"],\r\n      [\"120\", \"uncle/aunt\"],\r\n      [\"1200\", \"cousin\"],\r\n      [\"\", \"\"],\r\n    ]);\r\n    return new Map<string, string>();\r\n  };\r\n\r\n  setPath(prevPath: Array<[number, number]>) {\r\n    this._path = prevPath;\r\n  }\r\n\r\n  getParentId(nodeMap: Map<number, NodeEntity>) {\r\n    if (this._path.length - 2 < 0) {\r\n      return null;\r\n    }\r\n    const currId = this._path[this._path.length - 2][1];\r\n    const currNode = NodeEntity.getNode(currId, nodeMap);\r\n    if (\r\n      !(\r\n        this._children.includes(this._path[this._path.length - 2][1]) ||\r\n        currNode._undividedEstateSpouse === this._id\r\n      )\r\n    )\r\n      return this._path[this._path.length - 2][1];\r\n    return null;\r\n  }\r\n\r\n  getGenerationCount() {\r\n    let parentCount = 0;\r\n    if (this._path.length - 2 < 0) {\r\n      return 0;\r\n    }\r\n    for (let i = this._path.length - 2; i >= 0; i--) {\r\n      if (this._path[i][0] === ParentChildSelector.grandParent) {\r\n        parentCount += 1;\r\n        break;\r\n      } else {\r\n        parentCount += 1;\r\n      }\r\n    }\r\n    return parentCount;\r\n  }\r\n\r\n  add_child = (\r\n    child: NodeEntity,\r\n    add_for_both = true,\r\n    isPartner = false\r\n  ): void => {\r\n    const children_array = this._children;\r\n    const child_id = child._id;\r\n    if (!children_array.find((obj) => obj === child_id)) {\r\n      this._children.push(child_id);\r\n    }\r\n    if (!isPartner) {\r\n      child._path = [...this._path];\r\n      child._path.push([ParentChildSelector.child, child_id]);\r\n      child._level = this.getLevel(child._path);\r\n    } else {\r\n      child._partnerPath = [...this._path];\r\n      child._partnerPath.push([ParentChildSelector.child, child_id]);\r\n      // child._level = this.getLevel(child._path);\r\n    }\r\n    if (add_for_both) {\r\n      if (!child._parents.find((obj) => obj === this._id)) {\r\n        child._parents.push(this._id);\r\n      }\r\n    }\r\n  };\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  add_parent = (\r\n    parent: NodeEntity,\r\n    add_for_both = true,\r\n    grandParent = false\r\n  ): void => {\r\n    const parents_array = this._parents;\r\n    const parent_id = parent._id;\r\n    if (!parents_array.find((obj) => obj === parent_id)) {\r\n      this._parents.push(parent_id);\r\n    }\r\n    parent._path = [...this._path];\r\n\r\n    parent._path.push([ParentChildSelector.parent, parent_id]);\r\n    parent._level = this.getLevel(parent._path);\r\n    if (parent._level === 2) {\r\n      parent._path[parent._path.length - 1][0] =\r\n        ParentChildSelector.grandParent;\r\n    }\r\n    if (add_for_both) {\r\n      if (!parent._children.find((obj) => obj === this._id)) {\r\n        parent._children.push(this._id);\r\n      }\r\n    }\r\n  };\r\n\r\n  getLatestPathKey = () => {\r\n    if (this._path.length == 0) {\r\n      throw new Error(\"Invalid Case\");\r\n    }\r\n    return this._path[this._path.length - 1][0];\r\n  };\r\n\r\n  getLevel = (path: Array<[number, number]>) => {\r\n    let level = 0;\r\n    path.map((x) => {\r\n      if (x[0] === ParentChildSelector.child) {\r\n        level = level - 1;\r\n      } else if (\r\n        x[0] === ParentChildSelector.parent ||\r\n        x[0] === ParentChildSelector.grandParent\r\n      ) {\r\n        level = level + 1;\r\n      } else {\r\n        level = level + 0;\r\n      }\r\n    });\r\n    return level;\r\n  };\r\n\r\n  static getNode = (id: number, nodeMap: Map<number, NodeEntity>) => {\r\n    const node: NodeEntity | undefined = nodeMap.get(id);\r\n    if (node == undefined) {\r\n      throw new Error(\"Node not found with given id:\" + id);\r\n    }\r\n    return node;\r\n  };\r\n\r\n  setPathforPartner = (partnerSelector: number, partner: NodeEntity) => {\r\n    partner._path = [...this._path];\r\n    partner._path.push([partnerSelector, partner._id]);\r\n  };\r\n\r\n  getChildUnprocessedNode() {\r\n    if (this._processChildNodePos < this._children.length) {\r\n      return this._children[this._processChildNodePos++];\r\n    }\r\n  }\r\n  updateProcessChildNodePos() {\r\n    this._processChildNodePos++;\r\n  }\r\n\r\n  has_surviving_spouse = () => {\r\n    if (this._spouse !== null) return true;\r\n    return false;\r\n  };\r\n\r\n  has_surviving_cohabitant = () => {\r\n    if (this._cohabitant !== null) return true;\r\n    return false;\r\n  };\r\n}\r\n","import Person from '../ChatbotComponent/Helper/Classes/Person';\r\nimport { NodeEntity } from './Helper/Classes/NodeEntity';\r\nimport {\r\n    ChatStepTypes,\r\n    QuestionType,\r\n    undividedOwnershipType,\r\n} from './Helper/Enums/ChatStepTypes';\r\nexport interface ChatbotInterface {\r\n    stepID: string;\r\n    person: NodeEntity;\r\n    testator: NodeEntity;\r\n    netWealth: number;\r\n    successor_flag: string;\r\n    parent_flag: string;\r\n    temp_person: NodeEntity;\r\n    temp_child: NodeEntity;\r\n    temp_parent: NodeEntity;\r\n    personsMap: Map<number, Person>;\r\n    nodeMap: Map<number, NodeEntity>;\r\n    id: number;\r\n    undividedSpouseId: number;\r\n    deceasedParentsArray: Array<number>;\r\n    grandParent_flag: string;\r\n    rearChildrenResponse: boolean;\r\n    undividedEstate: {\r\n        undividedEstateChoice: boolean;\r\n        undivided_flag: string;\r\n        totalEstateValue: number;\r\n        undividedEstateSeparateWealth: number;\r\n        temp_first: number;\r\n        temp_last: number;\r\n        ownershipType: string;\r\n    };\r\n    tempMessages: any;\r\n    successorProcessArray: Array<[number, number]>;\r\n    isUndividedParent: boolean;\r\n    yesNoClickedFlag: boolean;\r\n}\r\n\r\nexport const ChatbotState: ChatbotInterface = {\r\n    stepID: ChatStepTypes.initalStep,\r\n    person: new NodeEntity(0, 0),\r\n    testator: new NodeEntity(0, 0),\r\n    netWealth: 0,\r\n    successor_flag: QuestionType.initialQuestion,\r\n    parent_flag: QuestionType.initialQuestion,\r\n    temp_person: new NodeEntity(0, 0),\r\n    temp_child: new NodeEntity(0, 0),\r\n    temp_parent: new NodeEntity(0, 0),\r\n    personsMap: new Map(),\r\n    nodeMap: new Map(),\r\n    id: 1,\r\n    undividedSpouseId: 0,\r\n    deceasedParentsArray: [],\r\n    grandParent_flag: QuestionType.initialQuestion,\r\n    rearChildrenResponse: false,\r\n    undividedEstate: {\r\n        undividedEstateChoice: false,\r\n        undivided_flag: QuestionType.initialQuestion,\r\n        totalEstateValue: 0,\r\n        undividedEstateSeparateWealth: 0,\r\n        temp_first: 0,\r\n        temp_last: 0,\r\n        ownershipType: undividedOwnershipType.none,\r\n    },\r\n    tempMessages: [],\r\n    successorProcessArray: [],\r\n    isUndividedParent: false,\r\n    yesNoClickedFlag: false,\r\n};\r\n\r\nexport const InitialChatbotState: any = {\r\n    ...ChatbotState,\r\n    messages: [],\r\n};\r\n","export enum ValidationType {\r\n  emptyValue = 0,\r\n  invalidAmount = 1,\r\n  onlyDigit = 2,\r\n  incorrectValueForBoolean = 3,\r\n}\r\nexport enum DefaultWarningMessage {\r\n  emptyValueMessage = \"The field cannot be empty\",\r\n  onlyDigitMessage = \"Please enter only number.\",\r\n  errorForBooleanMessage = \"Please choose correct value or write 'yes/ja', 'no/nei'\",\r\n  invalidAmountMessage = \"Please enter the amount in correct format.\"\r\n}\r\n","import { createChatBotMessage } from \"react-chatbot-kit\";\r\nimport OptionSelector from \"./Custom/Widgets/OptionSelector/OptionSelector\";\r\nimport InfoMessageWidget from \"./Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget\";\r\nimport RearChildrenOptionSelector from \"./Custom/Widgets/RearChildrenOptionSelector/RearChildrenOptionSelector\";\r\nimport UndividedEstateWidget from \"./Custom/Widgets/UndividedEstateWidget/UndividedEstateWidget\";\r\nimport \"react-chatbot-kit/build/main.css\";\r\nimport \"../chatbot.scss\";\r\nimport ChatHeader from \"../OtherComponent/ChatHeader/ChatHeader\";\r\nimport { ChatbotState } from \"./Generics\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\n\r\nconst botName = \"Arvebot\";\r\nconst value = intl.formatMessage({ id: \"Chatbot.TESTATOR_QUESTION\" });\r\nconst config = {\r\n  botName: botName,\r\n  lang: \"no\",\r\n  customStyles: {\r\n    botMessageBox: {\r\n      backgroundColor: \"#376B7E\",\r\n    },\r\n    chatButton: {\r\n      backgroundColor: \"#5ccc9d\",\r\n    },\r\n  },\r\n  state: ChatbotState,\r\n  initialMessages: [createChatBotMessage(value, {})],\r\n  customComponents: {\r\n    header: (actionProvider) => <ChatHeader actionProvider={actionProvider} />,\r\n  },\r\n\r\n  widgets: [\r\n    {\r\n      widgetName: \"optionSelectorWidget\",\r\n      widgetFunc: (props) => <OptionSelector {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"RearChildrenSelectorWidget\",\r\n      widgetFunc: (props) => <RearChildrenOptionSelector {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"InfoMessage\",\r\n      widgetFunc: (props) => <InfoMessageWidget {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"undividedEstateWidget\",\r\n      widgetFunc: (props) => <UndividedEstateWidget {...props} />,\r\n    },\r\n  ],\r\n};\r\nexport default config;\r\n","export enum BinaryAnswerTypeYes {\r\n  \"yes\",\r\n  \"ja\",\r\n}\r\n\r\nexport enum BinaryAnswerTypeNo {\r\n  \"no\",\r\n  \"nei\",\r\n}\r\n","import ActionProvider from '../../ActionProvider';\r\nimport {\r\n    BinaryAnswerTypeNo,\r\n    BinaryAnswerTypeYes,\r\n} from '../Enums/BinaryAnswerTypes';\r\nimport { DefaultWarningMessage, ValidationType } from '../Enums/ValidationType';\r\nimport _ from 'lodash';\r\n\r\nexport class ChatbotValidation {\r\n    constructor(\r\n        private actionProvider: ActionProvider,\r\n        private chatbotState: any,\r\n    ) {}\r\n    validate = (\r\n        message: string,\r\n        validationTypes: Array<number>,\r\n        warningMessage?: string,\r\n    ): boolean => {\r\n        for (const validationType of validationTypes) {\r\n            if (warningMessage === undefined) {\r\n                warningMessage = this.getDefaultWarningMessage(validationType);\r\n            }\r\n            let validationResult = false;\r\n            switch (validationType) {\r\n                case ValidationType.emptyValue:\r\n                    validationResult = this.validateEmpty(message);\r\n                    break;\r\n                case ValidationType.invalidAmount:\r\n                    validationResult = this.validateAmount(message);\r\n                    break;\r\n                case ValidationType.onlyDigit:\r\n                    validationResult = this.validateDigit(message);\r\n                    break;\r\n                case ValidationType.incorrectValueForBoolean:\r\n                    validationResult = this.validateValueForBoolean(message);\r\n                    break;\r\n                default:\r\n                    console.error('Invalid Validation type');\r\n                    return false;\r\n            }\r\n            if (!validationResult && this.chatbotState) {\r\n                this.showWarning(warningMessage);\r\n                const messageCopy = _.cloneDeep(this.chatbotState.messages);\r\n                this.actionProvider.handleValidation(messageCopy);\r\n                return false;\r\n            } else {\r\n                this.hideWarning();\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    validateEmpty = (message: string) => {\r\n        //\r\n        if (message.length === 0) {\r\n            // remove last message\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    // eslint-disable-next-line\r\n    validateAmount = (message: string) => {\r\n        const re = /^\\d*(\\.\\d+)?$/;\r\n        if (message !== '' && message.match(re)) {\r\n            return true;\r\n        } else return false;\r\n    };\r\n\r\n    validateDigit = (message: string) => {\r\n        const checkNatural = /^(0|([1-9]\\d*))$/;\r\n        if (checkNatural.test(message)) return true;\r\n        return false;\r\n    };\r\n\r\n    validateValueForBoolean = (message: string) => {\r\n        if (\r\n            (message in BinaryAnswerTypeYes || message in BinaryAnswerTypeNo) &&\r\n            !(message in [0, 1])\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    private showWarning = (warningMessage: string) => {\r\n        const warningDiv = document.getElementById('chatbot-warning-div');\r\n        if (warningDiv) {\r\n            warningDiv.innerHTML = warningMessage;\r\n            warningDiv.style.display = 'block';\r\n            return;\r\n        }\r\n    };\r\n    private hideWarning = () => {\r\n        const warningDiv = document.getElementById('chatbot-warning-div');\r\n        if (warningDiv) {\r\n            warningDiv.style.display = 'none';\r\n            return;\r\n        }\r\n    };\r\n    getDefaultWarningMessage(validationType: ValidationType) {\r\n        switch (validationType) {\r\n            case ValidationType.emptyValue:\r\n                return DefaultWarningMessage.emptyValueMessage;\r\n            case ValidationType.incorrectValueForBoolean:\r\n                return 'error boolean message';\r\n            case ValidationType.invalidAmount:\r\n                return 'incorrect amount entered. Please use only numbers.';\r\n            // return DefaultWarningMessage.errorForBooleanMessage;\r\n            default:\r\n                return 'Improve error message in ChatbotType.ts';\r\n        }\r\n    }\r\n}\r\n","const numberInputTypesObject = {\r\n    0: ['0', 'zero', 'null'],\r\n    1: ['1', 'one', 'en', 'ett', 'et', 'ein', 'eitt', 'eit'],\r\n    2: ['2', 'two', 'to'],\r\n    3: ['3', 'three', 'tre'],\r\n    4: ['4', 'four', 'fire'],\r\n    5: ['5', 'five', 'fem'],\r\n    6: ['6', 'six', 'seks'],\r\n    7: ['7', 'seven', 'syv', 'sju'],\r\n    8: ['8', 'eight', 'atte', 'åtte'],\r\n    9: ['9', 'nine', 'ni'],\r\n    10: ['10', 'ten', 'ti'],\r\n    11: ['11', 'eleven', 'elleve'],\r\n    12: ['12', 'twelve', 'tolv'],\r\n    13: ['13', 'thirteen', 'tretten'],\r\n    14: ['14', 'fourteen', 'fjorten'],\r\n    15: ['15', 'fifteen', 'femten'],\r\n    16: ['16', 'sixteen', 'seksten'],\r\n    17: ['17', 'seventeen', 'sytten', 'søtten'],\r\n    18: ['18', 'eighteen', 'atten', 'åtten'],\r\n    19: ['19', 'nineeen', 'nitten'],\r\n    20: ['20', 'twenty', 'tyve', 'tjue'],\r\n};\r\n\r\n// export default string[]InputTypes;\r\n\r\nexport const returnKeyFromEnteredNumberText = (chosenValue: string) => {\r\n    return Object.keys(numberInputTypesObject).find((key) =>\r\n        (numberInputTypesObject as any)[key].includes(\r\n            chosenValue.toLowerCase(),\r\n        ),\r\n    );\r\n};\r\n","import ActionProvider from './ActionProvider';\r\nimport { ChatbotInterface } from './Generics';\r\nimport { ChatStepTypes, QuestionType } from './Helper/Enums/ChatStepTypes';\r\nimport { ValidationType } from './Helper/Enums/ValidationType';\r\nimport { ChatbotValidation } from './Helper/Methods/ChatbotValidation';\r\nimport { messageService } from './services/ChatbotCommunicator';\r\nimport {\r\n    BinaryAnswerTypeYes,\r\n    BinaryAnswerTypeNo,\r\n} from '../ChatbotComponent/Helper/Enums/BinaryAnswerTypes';\r\nimport { returnKeyFromEnteredNumberText } from './Helper/Methods/NumberInput';\r\n\r\nclass MessageParser {\r\n    actionProvider: ActionProvider;\r\n    state: any;\r\n    chatbotValidator: ChatbotValidation;\r\n    constructor(actionProvider: ActionProvider, state: any) {\r\n        this.actionProvider = actionProvider;\r\n        this.state = state;\r\n        this.chatbotValidator = new ChatbotValidation(actionProvider, state);\r\n        // this.setRevertListeners();\r\n    }\r\n\r\n    parse(message: string): ReturnType<() => void> {\r\n        message = message.trim();\r\n\r\n        const curState = this.state;\r\n        curState.yesNoClickedFlag = false;\r\n\r\n        // initialStep\r\n        if (curState.stepID === ChatStepTypes.initalStep) {\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.emptyValue,\r\n                ])\r\n            ) {\r\n                return this.actionProvider.handleTestator(message);\r\n            }\r\n            return;\r\n        }\r\n\r\n        //testatorStep\r\n        if (curState.stepID === ChatStepTypes.testatorStep) {\r\n            message = message.toLowerCase();\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.incorrectValueForBoolean,\r\n                ])\r\n            ) {\r\n                if (message in BinaryAnswerTypeYes) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleUndividedEstateChoice(\r\n                        true,\r\n                    );\r\n                } else if (message in BinaryAnswerTypeNo) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleUndividedEstateChoice(\r\n                        false,\r\n                    );\r\n                } else {\r\n                    alert('check for error');\r\n                }\r\n            }\r\n        }\r\n\r\n        // undividedEstateStep\r\n        if (curState.stepID === ChatStepTypes.undividedEstateStep) {\r\n            if (\r\n                curState.undividedEstate.undivided_flag === QuestionType.part1\r\n            ) {\r\n                return this.actionProvider.handleTotalEstateValueResponse(\r\n                    message,\r\n                );\r\n            }\r\n            if (\r\n                curState.undividedEstate.undivided_flag === QuestionType.part2\r\n            ) {\r\n                return this.actionProvider.handleOwnershipResponse(message);\r\n            }\r\n            if (\r\n                curState.undividedEstate.undivided_flag === QuestionType.part3\r\n            ) {\r\n                return this.actionProvider.handleDelvisFirstResponse(message);\r\n            }\r\n            if (\r\n                curState.undividedEstate.undivided_flag === QuestionType.part4\r\n            ) {\r\n                return this.actionProvider.handleDelvisSecondResponse(message);\r\n            }\r\n            if (\r\n                curState.undividedEstate.undivided_flag === QuestionType.part5\r\n            ) {\r\n                return this.actionProvider.handleFulltSaereieResponse(message);\r\n            }\r\n            if (\r\n                curState.undividedEstate.undivided_flag ===\r\n                    QuestionType.part6 ||\r\n                curState.undividedEstate.undivided_flag === QuestionType.part7\r\n            ) {\r\n                return handleSuccessor(message, curState, this);\r\n            }\r\n            if (\r\n                curState.undividedEstate.undivided_flag === QuestionType.part8\r\n            ) {\r\n                if (curState.parent_flag === QuestionType.part1) {\r\n                    return this.actionProvider.handleParentsInput(message);\r\n                } else if (curState.parent_flag == QuestionType.part2) {\r\n                    message = message.toLowerCase();\r\n                    if (\r\n                        this.chatbotValidator.validate(message, [\r\n                            ValidationType.incorrectValueForBoolean,\r\n                        ])\r\n                    ) {\r\n                        if (message in BinaryAnswerTypeYes) {\r\n                            this.disableButtons();\r\n                            return this.actionProvider.handleParentAliveOption(\r\n                                true,\r\n                            );\r\n                        } else if (message in BinaryAnswerTypeNo) {\r\n                            this.disableButtons();\r\n                            return this.actionProvider.handleParentAliveOption(\r\n                                false,\r\n                            );\r\n                        } else {\r\n                            alert('check for error');\r\n                        }\r\n                    }\r\n                } else if (curState.parent_flag === QuestionType.part3) {\r\n                    if (\r\n                        this.chatbotValidator.validate(message, [\r\n                            ValidationType.incorrectValueForBoolean,\r\n                        ])\r\n                    ) {\r\n                        if (message in BinaryAnswerTypeYes) {\r\n                            this.disableButtons();\r\n                            return this.actionProvider.handleSecondParentExists(\r\n                                true,\r\n                            );\r\n                        } else if (message in BinaryAnswerTypeNo) {\r\n                            this.disableButtons();\r\n                            return this.actionProvider.handleSecondParentExists(\r\n                                false,\r\n                            );\r\n                        } else {\r\n                            alert('check for error');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (curState.stepID === ChatStepTypes.testatorOtherChildStep) {\r\n            return handleSuccessor(message, curState, this);\r\n        }\r\n        // netWealthStep\r\n        if (curState.stepID === ChatStepTypes.netWealthStep) {\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.invalidAmount,\r\n                ])\r\n            ) {\r\n                return this.actionProvider.handleNetWealth(message);\r\n            }\r\n        }\r\n\r\n        // underAgeStep\r\n        if (curState.stepID === ChatStepTypes.underAgeStep) {\r\n            message = message.toLowerCase();\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.incorrectValueForBoolean,\r\n                ])\r\n            ) {\r\n                if (message in BinaryAnswerTypeYes) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleUnderAge(true);\r\n                } else if (message in BinaryAnswerTypeNo) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleUnderAge(false);\r\n                } else {\r\n                    alert('check for error');\r\n                }\r\n            }\r\n        }\r\n\r\n        // spouse start\r\n        if (curState.stepID === ChatStepTypes.spouseChoice) {\r\n            message = message.toLowerCase();\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.incorrectValueForBoolean,\r\n                ])\r\n            ) {\r\n                if (message in BinaryAnswerTypeYes) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleSpouseChoice(true);\r\n                } else if (message in BinaryAnswerTypeNo) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleSpouseChoice(false);\r\n                } else {\r\n                    alert('check for error');\r\n                }\r\n            }\r\n        }\r\n        if (curState.stepID === ChatStepTypes.spouseStep) {\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.emptyValue,\r\n                ])\r\n            ) {\r\n                return this.actionProvider.handleSpouseInput(message);\r\n            }\r\n        }\r\n        // spouse end\r\n\r\n        // cohabitant start\r\n        if (curState.stepID === ChatStepTypes.cohabitantChoice) {\r\n            message = message.toLowerCase();\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.incorrectValueForBoolean,\r\n                ])\r\n            ) {\r\n                if (message in BinaryAnswerTypeYes) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleCohabitantChoice(true);\r\n                } else if (message in BinaryAnswerTypeNo) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleCohabitantChoice(false);\r\n                } else {\r\n                    alert('check for error');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (curState.stepID === ChatStepTypes.cohabitantStep) {\r\n            return this.actionProvider.handleCohabitantInput(message); //set stepID = 7\r\n        }\r\n\r\n        //  cohabitant end\r\n\r\n        // successorStep\r\n        if (curState.stepID === ChatStepTypes.successorStep) {\r\n            if (curState.successor_flag === QuestionType.part1) {\r\n                return this.actionProvider.handleSuccessorInput(message);\r\n            } else if (curState.successor_flag === QuestionType.part2) {\r\n                message = message.toLowerCase();\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleChildAliveOption(true);\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleChildAliveOption(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            } else if (curState.successor_flag === QuestionType.part3) {\r\n                const convertedMessage =\r\n                    returnKeyFromEnteredNumberText(message);\r\n                if (\r\n                    convertedMessage &&\r\n                    this.chatbotValidator.validate(convertedMessage, [\r\n                        ValidationType.emptyValue,\r\n                        ValidationType.onlyDigit,\r\n                    ])\r\n                ) {\r\n                    return this.actionProvider.handleSuccessorCount(\r\n                        convertedMessage,\r\n                    );\r\n                } else {\r\n                    return;\r\n                    // remove last message and update stepid\r\n                    // return this.actionProvider.handleValidation();\r\n                }\r\n            }\r\n        }\r\n\r\n        //  parentsStep\r\n        if (curState.stepID === ChatStepTypes.parentsStep) {\r\n            if (curState.successor_flag === QuestionType.part1) {\r\n                return this.actionProvider.handleSuccessorInput(message);\r\n            } else if (curState.successor_flag === QuestionType.part2) {\r\n                message = message.toLowerCase();\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleChildAliveOption(true);\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleChildAliveOption(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            } else if (curState.successor_flag === QuestionType.part3) {\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.emptyValue,\r\n                        ValidationType.onlyDigit,\r\n                    ])\r\n                ) {\r\n                    return this.actionProvider.handleSuccessorCount(message);\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            if (curState.parent_flag === QuestionType.part1) {\r\n                return this.actionProvider.handleParentsInput(message);\r\n            } else if (curState.parent_flag == QuestionType.part2) {\r\n                message = message.toLowerCase();\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleParentAliveOption(\r\n                            true,\r\n                        );\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleParentAliveOption(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            } else if (curState.parent_flag === QuestionType.part3) {\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleSecondParentExists(\r\n                            true,\r\n                        );\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleSecondParentExists(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // marriedParentsStep\r\n        if (curState.stepID === ChatStepTypes.marriedParentsStep) {\r\n            message = message.toLowerCase();\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.incorrectValueForBoolean,\r\n                ])\r\n            ) {\r\n                if (message in BinaryAnswerTypeYes) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleMarriedParents(true);\r\n                } else if (message in BinaryAnswerTypeNo) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleMarriedParents(false);\r\n                } else {\r\n                    alert('check for error');\r\n                }\r\n            }\r\n        }\r\n\r\n        // grandParentStep\r\n        if (curState.stepID === ChatStepTypes.grandParentStep) {\r\n            if (curState.successor_flag === QuestionType.part1) {\r\n                return this.actionProvider.handleSuccessorInput(message);\r\n            } else if (curState.successor_flag === QuestionType.part2) {\r\n                message = message.toLowerCase();\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleChildAliveOption(true);\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleChildAliveOption(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            } else if (curState.successor_flag === QuestionType.part3) {\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.emptyValue,\r\n                        ValidationType.onlyDigit,\r\n                    ])\r\n                ) {\r\n                    return this.actionProvider.handleSuccessorCount(message);\r\n                } else {\r\n                    return;\r\n                    // remove last message and update stepid\r\n                    // return this.actionProvider.handleValidation();\r\n                }\r\n            } else if (curState.parent_flag === QuestionType.part1) {\r\n                return this.actionProvider.handleParentsInput(message);\r\n            } else if (curState.parent_flag == QuestionType.part2) {\r\n                message = message.toLowerCase();\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleParentAliveOption(\r\n                            true,\r\n                        );\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleParentAliveOption(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            } else if (curState.parent_flag === QuestionType.part3) {\r\n                if (\r\n                    this.chatbotValidator.validate(message, [\r\n                        ValidationType.incorrectValueForBoolean,\r\n                    ])\r\n                ) {\r\n                    if (message in BinaryAnswerTypeYes) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleSecondParentExists(\r\n                            true,\r\n                        );\r\n                    } else if (message in BinaryAnswerTypeNo) {\r\n                        this.disableButtons();\r\n                        return this.actionProvider.handleSecondParentExists(\r\n                            false,\r\n                        );\r\n                    } else {\r\n                        alert('check for error');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // finalStep\r\n        if (curState.stepID === ChatStepTypes.finalStep) {\r\n            message = message.toLowerCase();\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.incorrectValueForBoolean,\r\n                ])\r\n            ) {\r\n                if (message in BinaryAnswerTypeYes) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleFinalQuestion(true);\r\n                } else if (message in BinaryAnswerTypeNo) {\r\n                    this.disableButtons();\r\n                    return this.actionProvider.handleFinalQuestion(false);\r\n                } else {\r\n                    alert('check for error');\r\n                }\r\n            }\r\n            // return this.actionProvider.handleFinalQuestion(message)\r\n        }\r\n        // else {\r\n        //   return this.actionProvider.handleDefault();\r\n        //   return;\r\n        // }\r\n    }\r\n\r\n    disableButtons = () => {\r\n        const buttonElements: any = document.getElementsByClassName(\r\n            'option-selector-button',\r\n        );\r\n        for (let i = 0; i < buttonElements.length; i++) {\r\n            const currentElement = buttonElements[i];\r\n            if (!currentElement.disabled) currentElement.disabled = true;\r\n            currentElement.style.pointerEvents = 'none';\r\n        }\r\n    };\r\n\r\n    setRevertListeners = () => {\r\n        messageService.clearAllInternalSubscription();\r\n        /* eslint-disable @typescript-eslint/no-unused-vars */\r\n        const subscription = messageService\r\n            .getMessageInChatbot()\r\n            .subscribe((message) => {\r\n                this.revertState();\r\n            });\r\n        messageService.addInternalSubscription(subscription);\r\n    };\r\n    revertState = () => {\r\n        const lastState = messageService.removePreviousState();\r\n        console.log('setting state:');\r\n        console.log(lastState);\r\n\r\n        const previousStates: any = messageService.getPreviousStates();\r\n        console.log('previous States:');\r\n        console.log(previousStates);\r\n\r\n        if (lastState) {\r\n            this.actionProvider.setState((state: any) => {\r\n                state = lastState;\r\n                console.log('final state');\r\n                console.log(state);\r\n\r\n                return state;\r\n            });\r\n        }\r\n    };\r\n    flagSwitch = (curState: ChatbotInterface, message: any) => {\r\n        if (curState.successor_flag === QuestionType.part1) {\r\n            return this.actionProvider.handleSuccessorInput(message);\r\n        } else if (curState.successor_flag === QuestionType.part2)\r\n            return this.actionProvider.handleChildAliveOption(message);\r\n        else if (curState.successor_flag === QuestionType.part3) {\r\n            if (\r\n                this.chatbotValidator.validate(message, [\r\n                    ValidationType.emptyValue,\r\n                    ValidationType.onlyDigit,\r\n                ])\r\n            ) {\r\n                return this.actionProvider.handleSuccessorCount(message);\r\n            } else {\r\n                // remove last message and update stepid\r\n                // return this.actionProvider.handleValidation();\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n}\r\nconst handleSuccessor = (\r\n    message: string,\r\n    curState: ChatbotInterface,\r\n    messageParser: MessageParser,\r\n) => {\r\n    if (curState.successor_flag === QuestionType.part1) {\r\n        return messageParser.actionProvider.handleSuccessorInput(message);\r\n    } else if (curState.successor_flag === QuestionType.part2) {\r\n        message = message.toLowerCase();\r\n        if (\r\n            messageParser.chatbotValidator.validate(message, [\r\n                ValidationType.incorrectValueForBoolean,\r\n            ])\r\n        ) {\r\n            if (message in BinaryAnswerTypeYes) {\r\n                messageParser.disableButtons();\r\n                return messageParser.actionProvider.handleChildAliveOption(\r\n                    true,\r\n                );\r\n            } else if (message in BinaryAnswerTypeNo) {\r\n                messageParser.disableButtons();\r\n                return messageParser.actionProvider.handleChildAliveOption(\r\n                    false,\r\n                );\r\n            } else {\r\n                alert('check for error');\r\n            }\r\n        }\r\n    } else if (curState.successor_flag === QuestionType.part3) {\r\n        if (\r\n            messageParser.chatbotValidator.validate(message, [\r\n                ValidationType.emptyValue,\r\n                ValidationType.onlyDigit,\r\n            ])\r\n        ) {\r\n            return messageParser.actionProvider.handleSuccessorCount(message);\r\n        } else {\r\n            // remove last message and update stepid\r\n            // return this.actionProvider.handleValidation();\r\n        }\r\n    }\r\n    return messageParser.actionProvider.handleUndividedEstateSpouse(message);\r\n};\r\nexport default MessageParser;\r\n// function dispatch(arg0: { type: string; payload: any; }) {\r\n//   throw new Error(\"Function not implemented.\");\r\n// }\r\n","export default class Person {\r\n  _id: number;\r\n  _personName = \"\";\r\n  _undividedEstateSpouse: Person | undefined;\r\n  _deceased = false;\r\n  _spouse: Person | undefined;\r\n  _cohabitant: Person | undefined;\r\n  _childrenRearing: boolean | undefined;\r\n  _underAge: boolean | undefined;\r\n\r\n  constructor(personid: string, id = 1) {\r\n    this._personName = personid;\r\n    this._id = id;\r\n  }\r\n\r\n  get person_id(): string {\r\n    return this._personName;\r\n  }\r\n\r\n  set person_id(value: string) {\r\n    this._personName = value;\r\n  }\r\n\r\n  get deceased(): boolean {\r\n    return this._deceased;\r\n  }\r\n\r\n  set deceased(value: boolean) {\r\n    this._deceased = value;\r\n  }\r\n\r\n  get undividedEstateSpouse(): Person | undefined {\r\n    return this._undividedEstateSpouse;\r\n  }\r\n\r\n  set undividedEstateSpouse(value: Person | undefined) {\r\n    this._undividedEstateSpouse = value;\r\n  }\r\n\r\n  get spouse(): Person | undefined {\r\n    return this._spouse;\r\n  }\r\n\r\n  set_spouse = (spouse: Person, add_for_both = true): void => {\r\n    if (!this._spouse) console.log(this._spouse == spouse);\r\n    else this._spouse = spouse;\r\n    if (add_for_both) spouse.set_spouse(this, false);\r\n  };\r\n\r\n  hasSurvivingSpouse = (): boolean => {\r\n    if (this._spouse !== undefined && !this._spouse._deceased) return true;\r\n    else return false;\r\n  };\r\n\r\n  get cohabitant(): Person | undefined {\r\n    return this._cohabitant;\r\n  }\r\n\r\n  set_cohabitant = (cohabitant: Person, add_for_both = true): void => {\r\n    if (!this._cohabitant) console.log(this._cohabitant == cohabitant);\r\n    else this._cohabitant = cohabitant;\r\n    if (add_for_both) cohabitant.set_cohabitant(this, false);\r\n  };\r\n\r\n  static getPerson = (id: number, personMap: Map<number, Person>) => {\r\n    const person: Person | undefined = personMap.get(id);\r\n    if (person == undefined) {\r\n      throw new Error(\"Person not found with given id:\" + id);\r\n    }\r\n    return person;\r\n  };\r\n\r\n  has_surviving_cohabitant(): boolean {\r\n    if (this._cohabitant && !this._cohabitant._deceased) return true;\r\n    else return false;\r\n  }\r\n}\r\n","\r\n// error:\r\n// 1- no digits in input error\r\n// 2- separatorCount error\r\n// 3- digitsBeforeSeparatorValue error\r\n// 4- unknown error, debug\r\n// 5- normal pass\r\n//\r\nconst checkSeparatorCount = (initialCurrencyValue: string): number => {\r\n    let checkSeparatorCount = 0;\r\n    for (const i of initialCurrencyValue) {\r\n        if (i == \",\" || i == \" \" || i == \".\") {\r\n            checkSeparatorCount += 1;\r\n        }\r\n    }\r\n    if (checkSeparatorCount == 0) {\r\n        return 0 // no separators, valid input, format it.\r\n    }\r\n    else if (checkSeparatorCount > 1) {\r\n        // more than 1 symbol in the entered value, invalid input, error\r\n        return 2\r\n    }\r\n    else {\r\n        return 1 // one separator, valid input.\r\n    }\r\n}\r\n\r\n\r\nconst checkDigitsBeforeSeparatorValue = (initialCurrencyValue: string): string => {\r\n    let digitsBeforeSymbol = 0;\r\n    for (const i of initialCurrencyValue) {\r\n        if (digitsBeforeSymbol > 3) {\r\n            // more than 3 digits before symbol\r\n            return \"incorrect\"\r\n        }\r\n        else if (i !== \",\" && i !== \" \" && i !== \".\") {\r\n            digitsBeforeSymbol += 1;\r\n        }\r\n        else {\r\n            digitsBeforeSymbol = 0;\r\n        }\r\n\r\n    }\r\n    return \"correct\"\r\n}\r\n\r\nconst removeTextFromCurrencyString = (inputCurrency: string): string => {\r\n    let beginningValue = \"\";\r\n    let endValue = \"\"\r\n\r\n    // match and remove extra text at the beginning\r\n    const matchesStart: RegExpMatchArray | null = inputCurrency.match(/^[\\D]{0,}/)\r\n    if (matchesStart) {\r\n        const matchStartResult = matchesStart[0];\r\n        beginningValue = inputCurrency.substring(matchStartResult.length,)\r\n    }\r\n\r\n    // match and remove extra text at the end\r\n    const matchesEnd: RegExpMatchArray | null = beginningValue.match(/[^\\d]{0,}$/)\r\n    if (matchesEnd) {\r\n        const matchEndResult = matchesEnd[0];\r\n        endValue = beginningValue.substring(0, beginningValue.length - matchEndResult.length)\r\n    }\r\n\r\n    return endValue.replace(\" \", \"\").replace(\".\", \"\").replace(\",\", \"\")\r\n}\r\n\r\nexport const ParseCurrencyStringForOutput = (unformattedCurrency: string): string => {\r\n    return new Intl.NumberFormat(\"no-NO\", {\r\n        style: \"currency\",\r\n        currency: \"NOK\",\r\n        currencyDisplay: \"narrowSymbol\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0,\r\n    }).format(Number(unformattedCurrency.replace(/[^0-9.-]+/g, \"\"))).replace(\"kr\", \"kr.\").concat(\",-\");\r\n\r\n}\r\n\r\nexport const validateCurrency = (inputCurrency: string): boolean => {\r\n    // const currencyMatchExpression = /^((\\d{1,3},)*\\d{3}|\\d{1,3})\\.\\d{2}$|^((\\d{1,3}\\.)*\\d{3}|\\d{1,3})$/;\r\n    const currencyMatchExpression = /^\\d+$/;\r\n    if (inputCurrency.match(currencyMatchExpression)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const CurrencyOutput = (inputCurrency: string): [number, string] => {\r\n\r\n    if ((/\\d/).test(inputCurrency)) {\r\n        const initialCurrencyValue: string = removeTextFromCurrencyString(inputCurrency)\r\n\r\n        let digitsBeforeSeparatorValue = \"correct\"\r\n        const separatorCount = checkSeparatorCount(initialCurrencyValue);\r\n        if (separatorCount !== 0) {\r\n            digitsBeforeSeparatorValue = checkDigitsBeforeSeparatorValue(initialCurrencyValue)\r\n        }\r\n        if ((separatorCount === 0 || separatorCount === 1) && digitsBeforeSeparatorValue === \"correct\") {\r\n            return [5, initialCurrencyValue]\r\n        }\r\n\r\n        else {\r\n            if (separatorCount === 2) {\r\n                return [2, \"separatorCount\"]\r\n            }\r\n            else if (digitsBeforeSeparatorValue === \"incorrect\") {\r\n                return [3, \"digitsBeforeSeparatorValue\"]\r\n            }\r\n            else {\r\n                return [4, \"unknown error, debug\"]\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // show error message and ask question again\r\n        return [1, \"\"]\r\n    }\r\n\r\n}\r\n","import { ReactElement, useRef, useState } from \"react\";\r\nimport Popover from \"@mui/material/Popover\";\r\nimport \"./ShowInfoWidget.scss\";\r\nimport LiveHelpIcon from \"@mui/icons-material/LiveHelp\";\r\nimport makeStyles from \"@mui/styles/makeStyles\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// import { Typography } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((_) => ({\r\n  popover: {\r\n    pointerEvents: \"none\",\r\n  },\r\n  paper: {\r\n    padding: useTheme().spacing(1),\r\n    backgroundColor: \"#e8e4c9\",\r\n  },\r\n}));\r\n\r\nconst ShowInfoWidget = (props: any): ReactElement => {\r\n  const classes = useStyles();\r\n  /*\r\n   used reference to parent element for correcting the scrollbar conflict issue on popover show.\r\n   https://stackoverflow.com/questions/53985436/material-ui-unblock-scrolling-when-popover-is-opened\r\n  */\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const handlePopoverOpen = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  return (\r\n    <div className=\"infoDiv\" ref={containerRef}>\r\n      <LiveHelpIcon\r\n        className=\"InfoWidgetIcon\"\r\n        onMouseEnter={handlePopoverOpen}\r\n        onMouseLeave={handlePopoverClose}\r\n        aria-owns={open ? \"mouse-over-popover\" : undefined}\r\n        aria-haspopup=\"true\"\r\n      />\r\n\r\n      <Popover\r\n        id=\"mouse-over-popover\"\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n        container={containerRef.current}\r\n      >\r\n        <FormattedMessage id={props.text} />\r\n      </Popover>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowInfoWidget;\r\n","import { ReactElement } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport ShowInfoWidget from \"../../Custom/Widgets/ShowInfoWidget/ShowInfoWidget\";\r\n\r\nclass QuestionConstants {\r\n  static TestatorQuestion = (\r\n    <FormattedMessage id=\"Chatbot.TESTATOR_QUESTION\" />\r\n  );\r\n\r\n  static UndividedEstateQuestion = (\r\n    <FormattedMessage id=\"Chatbot.UNDIVIDED_ESTATE_QUESTION\" />\r\n  );\r\n\r\n  static YesNoWidgetOptions = {\r\n    widget: \"optionSelectorWidget\",\r\n    withAvatar: true,\r\n    loading: true,\r\n    terminateLoading: true,\r\n  };\r\n\r\n  static UndividedEstateResultText = (selectedOption: string): ReactElement => {\r\n    const undividedEstateResultText =\r\n      selectedOption === \"true\" ? \"Chatbot.Yes\" : \"Chatbot.No\";\r\n    return <FormattedMessage id={undividedEstateResultText} />;\r\n  };\r\n\r\n  static undvdSpouseOtherSuccessorQuestion = (): ReactElement => {\r\n    const undividedSpouseOtherSuccessorQuestion =\r\n      \"How many children does the first-deceased have from other relationship(s) (særkullsbarn)?\";\r\n    return <div>{undividedSpouseOtherSuccessorQuestion}</div>;\r\n  };\r\n\r\n  static testatorOtherSuccessorQuestion = (): ReactElement => {\r\n    const testatorOtherSuccessorQuestion =\r\n      \"How many children does the last-deceased have from other relationship(s) (særkullsbarn)?\";\r\n    return <div>{testatorOtherSuccessorQuestion}</div>;\r\n  };\r\n\r\n  static NetWealthQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.NET_WEALTH_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.NET_WEALTH_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  static NetWealthWarning = (\r\n    <FormattedMessage id=\"Chatbot.NET_WEALTH_WARNING\" />\r\n  );\r\n\r\n  static UnderAgeQuestion = (\r\n    <FormattedMessage id=\"Chatbot.UNDER_AGE_QUESTION\" />\r\n  );\r\n\r\n  static UnderAgeResultText = (selectedOption: boolean): ReactElement => {\r\n    const underAgeResultText = selectedOption\r\n      ? \"Chatbot.UnderAge\"\r\n      : \"Chatbot.NotUnderAge\";\r\n\r\n    return <FormattedMessage id={underAgeResultText} />;\r\n  };\r\n\r\n  static SpouseChoiceQuestion = (\r\n    <FormattedMessage id=\"Chatbot.SPOUSE_EXIST_QUESTION\" />\r\n  );\r\n\r\n  static SpouseQuestion = (<FormattedMessage id=\"Chatbot.SPOUSE_QUESTION\" />);\r\n\r\n  static CohabitantChoiceQuestion = (\r\n    <FormattedMessage id=\"Chatbot.COHABITANT_EXIST_QUESTION\" />\r\n  );\r\n\r\n  static CohabitantQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.COHABITANT_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.COHABITANT_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  static addSuccessorQuestion1 = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorQn1\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.CHILD_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n  static addSuccessorQuestion2 = (\r\n    person_id: string,\r\n    child_id_string: ReactElement\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorQn2\"\r\n          values={{\r\n            person_ID: <strong>{person_id}</strong>,\r\n            children_IDs: child_id_string,\r\n          }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.CHILD_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static AliveQuestion = (child_id: string): ReactElement => {\r\n    return (\r\n      <FormattedMessage\r\n        id=\"Chatbot.ALIVE_CHILD\"\r\n        values={{ child_ID: child_id }}\r\n      />\r\n    );\r\n  };\r\n\r\n  static AliveResultText = (selectedOption: string): ReactElement => {\r\n    const aliveResultText = selectedOption ? \"Chatbot.Yes\" : \"Chatbot.No\";\r\n\r\n    return <FormattedMessage id={aliveResultText} />;\r\n  };\r\n\r\n  static addParentsQuestion1 = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addParentsQn1\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.PARENT_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static askSecondParentChoiceQuestion = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.SecondParentChoice\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static addParentsQuestion2 = (\r\n    person_id: string,\r\n    parent_id_string: ReactElement\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addParentsQn2\"\r\n          values={{\r\n            person_ID: <strong>{person_id}</strong>,\r\n            parents_IDs: parent_id_string,\r\n          }}\r\n        />\r\n        <ShowInfoWidget text=\"Chatbot.PARENT_EXTRA_INFO\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static MarriedParents1 = (\r\n    first_parent_id: string,\r\n    second_parent_id: string\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.marriedParents1\"\r\n          values={{\r\n            parent1_ID: <strong>{first_parent_id}</strong>,\r\n            parent2_ID: <strong>{second_parent_id}</strong>,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static MarriedParents2 = (\r\n    first_parent_id: string,\r\n    second_parent_id: string\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.marriedParents2\"\r\n          values={{\r\n            parent1_ID: <strong>{first_parent_id}</strong>,\r\n            parent2_ID: <strong>{second_parent_id}</strong>,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static addGrandParentsQuestion1 = (parent_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addGrandParentQn1\"\r\n          values={{ parent_id: <strong>{parent_id}</strong> }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static addGrandParentsQuestion2 = (\r\n    parent_id: string,\r\n    grandparent_id_string: ReactElement\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addGrandParentQn2\"\r\n          values={{\r\n            parent_id: <strong>{parent_id}</strong>,\r\n            grandParents_IDs: grandparent_id_string,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static FinalQuestion = (<FormattedMessage id=\"Chatbot.FINAL_QUESTION\" />);\r\n\r\n  static EmptyQuestion = (<p></p>);\r\n  static DefaultText = (<FormattedMessage id=\"Chatbot.DEFAULT_TEXT\" />);\r\n\r\n  // UndividedEstateStart\r\n\r\n  static TotalEstateNetValueQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.TOTAL_ESTATE_NET_VALUE_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.TOTAL_ESTATE_NET_VALUE_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  static TotalEstateNetValueWarning = (\r\n    <FormattedMessage id=\"Chatbot.NET_WEALTH_WARNING\" />\r\n  );\r\n\r\n  static OwnershipTypeQuestion = (\r\n    <FormattedMessage id=\"Chatbot.FELLESEIE_QUESTION\" />\r\n  );\r\n\r\n  static OwnershipQuestionWidgetOptions = {\r\n    widget: \"undividedEstateWidget\",\r\n    withAvatar: true,\r\n    loading: true,\r\n    terminateLoading: true,\r\n  };\r\n\r\n  static OwnershipTypeWarning = (\r\n    <FormattedMessage id=\"Chatbot.OptionChoiceWrongWarning\" />\r\n  );\r\n\r\n  static DelvisFirstQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.DELVIS_SAEREIE_FIRST_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.DELVIS_SAEREIE_FIRST_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  static DelvisSecondQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.DELVIS_SAEREIE_LAST_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.DELVIS_SAEREIE_LAST_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  static FulltSaereieQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.FULLT_SAEREIE_QUESTION\" />\r\n      <ShowInfoWidget text=\"Chatbot.FULLT_SAEREIE_EXTRA_INFO\" />\r\n    </div>\r\n  );\r\n\r\n  static UndividedEstateSpouseQuestion = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.UNDIVIDED_SPOUSE_QUESTION\" />\r\n    </div>\r\n  );\r\n\r\n  static TextBeforeSucsrUndvdSpouse = (\r\n    <div>\r\n      <FormattedMessage id=\"Chatbot.TextBeforeSucsrUndvdSpouse\" />\r\n    </div>\r\n  );\r\n\r\n  // UndividedEstateEnd\r\n  static addSuccessorCount = (person_id: string): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorCount\"\r\n          values={{ person_ID: <strong>{person_id}</strong> }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  static undividedChildrenTogetherCount = (): ReactElement => {\r\n    return <div>How many children do they have together?</div>;\r\n  };\r\n\r\n  static addSuccessorOfParentCount = (\r\n    person_id: string,\r\n    existing_child_id: ReactElement\r\n  ): ReactElement => {\r\n    return (\r\n      <div>\r\n        <FormattedMessage\r\n          id=\"Chatbot.addSuccessorCountExistingParent\"\r\n          values={{\r\n            person_ID: <strong>{person_id}</strong>,\r\n            existing_child_ID: <strong>{existing_child_id}</strong>,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default QuestionConstants;\r\n","export default class InheritanceConstants {\r\n  static DESC_COHABITANT_WITHOUT_COMMON_CHILD =\r\n    \"Arvelater har ikke felles barn med samboer og vedkommende har ikke krav på arv (MED MINDRE DE VENTER FELLES BARN!).\";\r\n  static DESC_NO_SPOUSE_OR_COHABITANT =\r\n    \"Arvelater etterlater hverken ektefelle eller samboer.\";\r\n  static DESC_COHABITANT_NO_CLOSE_RELATIVES_2 =\r\n    \"Arvelaters nærmeste gjenlevende slektning er i tredje arvegangsklasse, men etterkommer av barnebarn av arvelaters besteforeldre. Hele arven går da til gjenlevende samboer med felles barn.\";\r\n  static DESC_COHABITANT_NO_CLOSE_RELATIVES =\r\n    \"Arvelater har ingen gjenlevende slektninger i de tre første arvegangsklassene. Hele arven går da til gjenlevende samboer med felles barn.\";\r\n  static DESC_SPOUSE_NO_CLOSE_RELATIVES_2 =\r\n    \"Arvelaters nærmeste gjenlevende slektning er i andre arvegangsklasse, men etterkommer av barnebarn av arvelaters besteforeldre. Hele arven går da til gjenlevende ektefellep.\";\r\n  static DESC_SPOUSE_NO_CLOSE_RELATIVES =\r\n    \"Arvelater har ingen gjenlevende slektninger i de to første arvegangsklassene. Hele arven går da til gjenlevende ektefelle.\";\r\n\r\n  static G = 101351;\r\n  static MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN = 4 * this.G;\r\n  static FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN = 1 / 4;\r\n  static MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS = 6 * this.G;\r\n  static FRACTION_INHERITANCE_SPOUSE_VS_PARENTS = 1 / 2;\r\n  static MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN = 4 * this.G;\r\n  static FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN = 0;\r\n  static MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS = 4 * this.G;\r\n  static FRACTION_INHERITANCE_COHABITANT_VS_PARENTS = 0;\r\n  static FRACTION_PLIKTDEL = 2 / 3;\r\n  static LINE_MAXIMUM_PLIKTDEL = 15 * this.G;\r\n\r\n  static LAW_LINKS = {\r\n    \"4\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-1#%C2%A74\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§4\",\r\n    ],\r\n    \"5\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-1#%C2%A75\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§5\",\r\n    ],\r\n    \"6\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-1#%C2%A76\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§6\",\r\n    ],\r\n    \"7\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-1#%C2%A77\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§7\",\r\n    ],\r\n    \"8\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-2#%C2%A78\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§8\",\r\n    ],\r\n    \"9\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-2#%C2%A79\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§9\",\r\n    ],\r\n    \"10\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-2#%C2%A710\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§10\",\r\n    ],\r\n    \"12\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-3#%C2%A712\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§12\",\r\n    ],\r\n    \"50\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-6-3#%C2%A750\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§50\",\r\n    ],\r\n    \"75\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-8#%C2%A775\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§75\",\r\n    ],\r\n    \"76\": [\r\n      \"https://lovdata.no/dokument/NL/lov/2019-06-14-21/KAPITTEL_2-9#%C2%A776\",\r\n      \"https://lovdata.no/NL/lov/2019-06-14-21/§76\",\r\n    ],\r\n  };\r\n\r\n  static CODE_PARAGRAPHS = {\r\n    \"4 første og annet ledd\":\r\n      \"De nærmeste slektsarvingene er arvelaterens livsarvinger.\\n\\nArven deles likt mellom arvelaterens barn, om ikke noe annet følger av særskilte lovregler. Hvis et barn er død, går dette barnets del av arven til barnets livsarvinger med lik andel på hver gren. På samme måte arver fjernere livsarvinger. Hvis et barn er død og ikke etterlater seg livsarvinger, går dette barnets del av arven til de andre barna eller deres livsarvinger med lik andel på hver gren.\",\r\n    \"5 første, andre og tredje ledd\":\r\n      \"Hvis arvelateren ikke har livsarvinger, går arven til foreldrene.\\n\\nForeldrene arver likt. Hvis en forelder er død, går denne forelderens del av arven til hans eller hennes livsarvinger med lik andel på hver gren.\\n\\nHvis den ene av foreldrene er død uten å etterlate seg livsarvinger, går hele arven til den andre forelderen eller til hans eller hennes livsarvinger med lik andel på hver gren. Dør arvelateren før fylte 25 år, går likevel halvparten av arven til besteforeldrene på den døde forelderens side eller til deres livsarvinger i samsvar med § 6 dersom foreldrene verken var gift eller samboende med hverandre da den første døde, eller det forelå omstendigheter som nevnt i § 11. Er heller ingen slike arvinger i live, gjelder reglene i første punktum.\",\r\n    \"6 første og annet ledd\":\r\n      \"Hvis arvelateren ikke har slektsarvinger som nevnt i §§ 4 og 5, går arven til besteforeldrene eller til livsarvinger etter dem, slik at reglene i § 5 annet ledd gjelder tilsvarende. Fjernere livsarvinger etter besteforeldrene enn deres barnebarn har likevel ikke arverett etter loven.\\n\\nHvis en av besteforeldrene er død, og ingen barn eller barnebarn er i live, går arven som ellers ville ha tilkommet ham eller henne, til den andre av besteforeldrene på samme side eller til dennes barn eller barnebarn. Hvis det ikke er arvinger på den ene siden, går hele arven til arvingene på den andre siden.\",\r\n    \"6 første ledd, andre punktum\":\r\n      \"Fjernere livsarvinger etter besteforeldrene enn deres barnebarn har likevel ikke arverett etter loven.\",\r\n    \"7\": \"Arverett etter dette kapitlet gjelder bare foreldreskap som følger av reglene i barneloven, adopsjonsloven eller annen lov.\\n\\nFaren og farens slekt tar ikke arv etter barnet dersom det er unnfanget som følge av en handling som er et brudd på en bestemmelse i straffeloven §§ 291, 294, 295, 296, 299, 302, 312 eller 314, og som faren er dømt for. Første punktum gjelder også hvis dommen går ut på at faren ikke kan straffes på grunn av vilkårene i straffeloven § 20.\",\r\n    \"8 første ledd\":\r\n      \"Ektefellen har rett til en firedel av arven når det er livsarvinger etter arvelateren, men ektefellen har uansett rett til en minstearv på fire ganger folketrygdens grunnbeløp ved arvefallet.\",\r\n    \"9 første ledd\":\r\n      \"Ektefellen har rett til halvparten av arven når arvelaterens nærmeste slektsarvinger er foreldrene eller deres etterkommere, men ektefellen har uansett rett til en minstearv på seks ganger folketrygdens grunnbeløp ved arvefallet.\",\r\n    \"9 annet ledd\":\r\n      \"Ektefellen arver alt når det verken er livsarvinger eller slektsarvinger som nevnt i første ledd etter arvelateren.\",\r\n    \"10 annet ledd\":\r\n      \"Et beløp tilsvarende seks ganger folketrygdens grunnbeløp ved arvefallet kan ikke fratas ektefellen ved testament. Etterlater arvelateren seg livsarvinger, er beløpsgrensen etter første punktum fire ganger folketrygdens grunnbeløp.\",\r\n    \"12 første ledd\":\r\n      \"Den som var samboer med arvelateren ved dødsfallet og har, har hatt eller venter barn med arvelateren, har rett til en arv på fire ganger folketrygdens grunnbeløp ved arvefallet. Dette gjelder også om det er livsarvinger etter arvelateren. § 8 annet ledd gjelder tilsvarende\",\r\n    \"50 første ledd\":\r\n      \"To tredeler av formuen etter arvelateren er pliktdelsarv for livsarvingene. Pliktdelsarven er likevel aldri større enn 15 ganger folketrygdens grunnbeløp ved arvefallet til hvert av arvelaterens barn eller hvert barns linje.\",\r\n    \"75 første ledd\":\r\n      \"Har en livsarving mottatt en ytelse av økonomisk verdi fra arvelateren, skal ytelsen avkortes i livsarvingens arv hvis dette var satt som en betingelse for ytelsen. En betingelse om avkorting bør være skriftlig og gjort kjent for de andre livsarvingene.\",\r\n    \"76 første ledd, første punktum\":\r\n      \"Hvis den avdøde ikke har arvinger etter loven eller etter testament, skal nettoformuen gå til frivillig virksomhet til fordel for barn og unge.\",\r\n  };\r\n}\r\n","import ActionProvider from '../ChatbotComponent/ActionProvider';\r\nimport { ChatbotInterface } from '../ChatbotComponent/Generics';\r\nimport Person from '../ChatbotComponent/Helper/Classes/Person';\r\n\r\nimport _ from 'lodash';\r\nimport { inheritanceFractionType } from './ReportCalculationBase';\r\nimport {\r\n    getNode,\r\n    getPerson,\r\n    get_class_and_distance_closest_surviving_relative,\r\n} from '../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods';\r\n\r\nconst manipulateDuplicatedMapArray = (\r\n    duplicatedMapArray: Array<inheritanceFractionType>,\r\n) => {\r\n    const personValue = duplicatedMapArray[0].person;\r\n    const fracSum = duplicatedMapArray.reduce((accumulator, item) => {\r\n        return accumulator + item.frac;\r\n    }, 0);\r\n    const chainsValue = duplicatedMapArray.reduce((arr: any[], curr) => {\r\n        arr.push(curr.chains);\r\n        return arr;\r\n    }, []);\r\n\r\n    return {\r\n        person: personValue,\r\n        frac: fracSum,\r\n        chains: chainsValue,\r\n    };\r\n};\r\n\r\nexport const combine_duplicates = (\r\n    inheritance_fraction_list: Array<inheritanceFractionType>,\r\n): Array<inheritanceFractionType> => {\r\n    const duplicateArrayPersonMap = new Map<\r\n        string,\r\n        Array<inheritanceFractionType>\r\n    >();\r\n    const combinedArray: Array<inheritanceFractionType> = [];\r\n\r\n    for (const inheritance_fraction of inheritance_fraction_list) {\r\n        if (!duplicateArrayPersonMap.has(inheritance_fraction.person)) {\r\n            duplicateArrayPersonMap.set(inheritance_fraction.person, [\r\n                inheritance_fraction,\r\n            ]);\r\n        } else {\r\n            const tempInheritanceFractionList = duplicateArrayPersonMap.get(\r\n                inheritance_fraction.person,\r\n            );\r\n            tempInheritanceFractionList?.push(inheritance_fraction);\r\n            if (tempInheritanceFractionList !== undefined) {\r\n                duplicateArrayPersonMap.set(\r\n                    inheritance_fraction.person,\r\n                    tempInheritanceFractionList,\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const key of duplicateArrayPersonMap.keys()) {\r\n        const currentValue = duplicateArrayPersonMap.get(key);\r\n        if (currentValue !== undefined) {\r\n            combinedArray.push(manipulateDuplicatedMapArray(currentValue));\r\n        }\r\n    }\r\n    return combinedArray;\r\n};\r\n\r\nexport const split_evenly_between_lines = (\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface,\r\n    person_list: Array<number>,\r\n    maximum_distance: number | undefined = undefined,\r\n    allow_parents = false,\r\n): inheritanceFractionType[] => {\r\n    let split_fraction_list: inheritanceFractionType[] = [];\r\n    if (person_list.length === 0) {\r\n        return split_fraction_list;\r\n    }\r\n\r\n    const split_frac = 1 / person_list.length;\r\n\r\n    for (const person of person_list) {\r\n        const personDetail: Person = getPerson(person, state.personsMap);\r\n        const personNode = getNode(person, state.nodeMap);\r\n        if (personDetail._deceased) {\r\n            if (maximum_distance === 0) {\r\n                // pass\r\n            } else if (\r\n                get_class_and_distance_closest_surviving_relative(\r\n                    personNode,\r\n                    state,\r\n                )[1] !== 1\r\n            ) {\r\n                if (allow_parents) {\r\n                    let temp_list: inheritanceFractionType[] =\r\n                        split_evenly_between_lines(\r\n                            actionProvider,\r\n                            state,\r\n                            personNode._parents,\r\n                        );\r\n                    let level_sum = 0;\r\n                    for (const item of temp_list) {\r\n                        level_sum += item.frac;\r\n                    }\r\n                    const interm_temp_list: inheritanceFractionType[] = [];\r\n                    if (level_sum !== 1) {\r\n                        for (const item of temp_list) {\r\n                            interm_temp_list.push({\r\n                                person: item.person,\r\n                                frac: item.frac / level_sum,\r\n                                chains: item.chains,\r\n                            });\r\n                        }\r\n                        temp_list = interm_temp_list;\r\n                    }\r\n\r\n                    const temp_split_fraction_list: Array<inheritanceFractionType> =\r\n                        [];\r\n                    for (const item of temp_list) {\r\n                        temp_split_fraction_list.push({\r\n                            person: item.person,\r\n                            frac: item.frac * split_frac,\r\n                            chains: item.chains.concat([\r\n                                personDetail._personName,\r\n                            ]),\r\n                        });\r\n                    }\r\n                    split_fraction_list = split_fraction_list.concat(\r\n                        temp_split_fraction_list,\r\n                    );\r\n                } else {\r\n                    return [];\r\n                }\r\n            } else {\r\n                let temp_list = split_evenly_between_lines(\r\n                    actionProvider,\r\n                    state,\r\n                    personNode._children,\r\n                );\r\n                const temp_fraction_list: Array<inheritanceFractionType> = [];\r\n                let level_sum = 0;\r\n                for (const item of temp_list) {\r\n                    level_sum += item.frac;\r\n                }\r\n                if (level_sum !== 1) {\r\n                    temp_list.map((temp_list_item) => {\r\n                        temp_fraction_list.push({\r\n                            person: temp_list_item.person,\r\n                            frac: temp_list_item.frac / level_sum,\r\n                            chains: temp_list_item.chains,\r\n                        });\r\n                    });\r\n                    temp_list = temp_fraction_list;\r\n                }\r\n                const temp_split_fraction_list: Array<inheritanceFractionType> =\r\n                    [];\r\n                temp_list.map((temp_list_item) => {\r\n                    temp_split_fraction_list.push({\r\n                        person: temp_list_item.person,\r\n                        frac: temp_list_item.frac * split_frac,\r\n                        chains: temp_list_item.chains.concat(\r\n                            personDetail._personName,\r\n                        ),\r\n                    });\r\n                });\r\n\r\n                split_fraction_list = split_fraction_list.concat(\r\n                    temp_split_fraction_list,\r\n                );\r\n            }\r\n        } else {\r\n            split_fraction_list.push({\r\n                person: personDetail._personName,\r\n                frac: split_frac,\r\n                chains: [],\r\n            });\r\n        }\r\n    }\r\n    let level_sum = 0;\r\n    for (const item of split_fraction_list) {\r\n        level_sum += item.frac;\r\n    }\r\n\r\n    if (level_sum !== 1) {\r\n        const temp_split_fraction_list: Array<inheritanceFractionType> = [];\r\n        for (const item of split_fraction_list) {\r\n            temp_split_fraction_list.push({\r\n                person: item.person,\r\n                frac: item.frac / level_sum,\r\n                chains: item.chains,\r\n            });\r\n        }\r\n        split_fraction_list = split_fraction_list.concat(\r\n            temp_split_fraction_list,\r\n        );\r\n    }\r\n\r\n    if (_.isEqual(split_fraction_list, [])) return [];\r\n    return split_fraction_list;\r\n};\r\n","import ChartNode, { NodeData } from \"./Classes/ChartNode\";\r\nimport Person from \"../../ChatbotComponent/Helper/Classes/Person\";\r\nimport { ParentChildSelector } from \"../../ChatbotComponent/Helper/Enums/ParentChildSelector\";\r\nimport { NodeEntity } from \"../../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport ChartConnector from \"./Classes/ChartConnector\";\r\nimport { Bubble } from \"./Classes/Bubble\";\r\n\r\nlet maxLevel = -999999,\r\n  minLevel = 999999;\r\nconst xLevelArray = [[1], [-1, 1], [-1, 0, 1], [-2, -1, 1, 2]];\r\nlet chartNodeMap = new Map<number, ChartNode>();\r\nlet connectorArray = new Array<ChartConnector>();\r\nlet xDiff: number;\r\nlet yDiff: number;\r\nconst nodeSize = 123;\r\nlet partnerBubbleLevelMap: Map<number, Array<number>>;\r\nexport const processData = (data: any): any => {\r\n  (maxLevel = -999999), (minLevel = 999999);\r\n  chartNodeMap = new Map<number, ChartNode>();\r\n  connectorArray = new Array<ChartConnector>();\r\n  partnerBubbleLevelMap = new Map<number, Array<number>>();\r\n  xDiff = 180;\r\n  yDiff = 100;\r\n\r\n  // // divide nodeMap into levels\r\n  const levelMap = getLevelMap(data);\r\n  const maxLevelData = levelMap.get(maxLevel);\r\n  if (data.nodeMap.length === 0 || maxLevelData === undefined) {\r\n    return [];\r\n  }\r\n  setxLevelForMaxLevel(maxLevelData);\r\n  setxLevel(levelMap, data.nodeMap);\r\n  setNodePosition(levelMap, data.nodeMap);\r\n  return getChartNodeConnectorArray(data.nodeMap);\r\n  // const node1 = new ChartNode(\"1\", 'specialNode', new NodeData(\"a\", { right: \"right\" }), { x: 0, y: 0 }, 0)\r\n  // const node2 = new ChartNode(\"2\", 'specialNode', new NodeData(\"afasfasfas\", { left: \"left\" }), { x: 200, y: 0 }, 0)\r\n  // const connector = new ChartConnector(`1-2`, 'straight', \"1\", \"2\", '', 's_right', \"t_left\")\r\n  // return [node1, node2, connector]\r\n};\r\n\r\nconst setxLevel = (\r\n  levelMap: Map<number, Array<ChartNode>>,\r\n  nodeMap: Map<number, NodeEntity>\r\n) => {\r\n  const processedNodes = new Array<string>();\r\n\r\n  for (let i = maxLevel; i >= minLevel; i--) {\r\n    const currentLevelChartNodes = levelMap.get(i);\r\n\r\n    if (currentLevelChartNodes !== undefined) {\r\n      for (const node of currentLevelChartNodes) {\r\n        if (!processedNodes.includes(node.id)) {\r\n          processedNodes.push(node.id);\r\n        }\r\n        const currentNode = NodeEntity.getNode(parseInt(node.id), nodeMap);\r\n\r\n        if (i !== maxLevel) {\r\n          let avgXlevel = 0;\r\n          const parentsCurrentNode = currentNode._parents;\r\n          parentsCurrentNode.map((parent_id) => {\r\n            const n = chartNodeMap.get(parent_id);\r\n            if (n !== undefined) {\r\n              avgXlevel += n.xLevel;\r\n            }\r\n          });\r\n          if (parentsCurrentNode.length !== 0)\r\n            node.xLevel = avgXlevel / parentsCurrentNode.length;\r\n        }\r\n        const partnerNodeId = currentNode._spouse\r\n          ? currentNode._spouse\r\n          : currentNode._cohabitant\r\n          ? currentNode._cohabitant\r\n          : currentNode._undividedEstateSpouse\r\n          ? currentNode._undividedEstateSpouse\r\n          : null;\r\n        if (partnerNodeId !== null) {\r\n          if (!processedNodes.includes(`${partnerNodeId}`)) {\r\n            processedNodes.push(`${partnerNodeId}`);\r\n          }\r\n\r\n          const partnerChartNode = getChartNode(`${partnerNodeId}`);\r\n          if (!partnerChartNode.data.pos) {\r\n            partnerChartNode.data.pos = {};\r\n          }\r\n          if (!node.data.pos) {\r\n            node.data.pos = {};\r\n          }\r\n          if (!partnerBubbleLevelMap.has(i)) {\r\n            partnerBubbleLevelMap.set(i, new Array<number>());\r\n          }\r\n          const partnerBubbleArray = partnerBubbleLevelMap.get(i);\r\n\r\n          if (currentNode._undividedEstateSpouse) {\r\n            if (partnerBubbleArray) {\r\n              if (!partnerBubbleArray.includes(partnerNodeId)) {\r\n                partnerBubbleArray.push(partnerNodeId, currentNode._id);\r\n              }\r\n            }\r\n            partnerChartNode.xLevel = node.xLevel - 0.01;\r\n            partnerChartNode.data.pos.right = \"right\";\r\n            node.data.pos.left = \"left\";\r\n            if (\r\n              connectorArray.filter((connector) => {\r\n                return connector.id === `e${partnerNodeId}-${currentNode._id}`;\r\n              }).length === 0\r\n            ) {\r\n              const newConnector = new ChartConnector(\r\n                `e${partnerNodeId}-${currentNode._id}`,\r\n                \"straight\",\r\n                `${partnerNodeId}`,\r\n                `${currentNode._id}`,\r\n                \"\",\r\n                \"s_right\",\r\n                \"t_left\"\r\n              );\r\n              connectorArray.push(newConnector);\r\n            }\r\n          } else {\r\n            if (partnerBubbleArray) {\r\n              if (!partnerBubbleArray.includes(partnerNodeId)) {\r\n                partnerBubbleArray.push(currentNode._id, partnerNodeId);\r\n              }\r\n            }\r\n            partnerChartNode.xLevel = node.xLevel + 0.01;\r\n            partnerChartNode.data.pos.left = \"left\";\r\n            node.data.pos.right = \"right\";\r\n            if (\r\n              connectorArray.filter((connector) => {\r\n                return connector.id === `e${currentNode._id}-${partnerNodeId}`;\r\n              }).length === 0\r\n            ) {\r\n              const newConnector = new ChartConnector(\r\n                `e${currentNode._id}-${partnerNodeId}`,\r\n                \"straight\",\r\n                `${currentNode._id}`,\r\n                `${partnerNodeId}`,\r\n                \"\",\r\n                \"s_right\",\r\n                \"t_left\"\r\n              );\r\n              connectorArray.push(newConnector);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (currentNode._undividedEstateSpouse !== null) {\r\n          if (\r\n            !processedNodes.includes(`${currentNode._undividedEstateSpouse}`)\r\n          ) {\r\n            processedNodes.push(`${currentNode._undividedEstateSpouse}`);\r\n          }\r\n          const partnerChartNode = getChartNode(\r\n            `${currentNode._undividedEstateSpouse}`\r\n          );\r\n          if (!partnerChartNode.data.pos) {\r\n            partnerChartNode.data.pos = {};\r\n          }\r\n          if (!node.data.pos) {\r\n            node.data.pos = {};\r\n          }\r\n          if (!partnerBubbleLevelMap.has(i)) {\r\n            partnerBubbleLevelMap.set(i, new Array<number>());\r\n          }\r\n          const partnerBubbleArray = partnerBubbleLevelMap.get(i);\r\n          if (partnerBubbleArray) {\r\n            if (\r\n              !partnerBubbleArray.includes(currentNode._undividedEstateSpouse)\r\n            ) {\r\n              if (!partnerBubbleArray.includes(currentNode._id)) {\r\n                partnerBubbleArray.push(currentNode._id);\r\n              }\r\n              partnerBubbleArray.push(currentNode._undividedEstateSpouse);\r\n            }\r\n          }\r\n          partnerChartNode.xLevel = node.xLevel + 0.01;\r\n          partnerChartNode.data.pos.left = \"left\";\r\n          node.data.pos.right = \"right\";\r\n          if (\r\n            connectorArray.filter((connector) => {\r\n              return (\r\n                connector.id ===\r\n                `e${currentNode._id}-${currentNode._undividedEstateSpouse}`\r\n              );\r\n            }).length === 0\r\n          ) {\r\n            const newConnector = new ChartConnector(\r\n              `e${currentNode._id}-${currentNode._undividedEstateSpouse}`,\r\n              \"straight\",\r\n              `${currentNode._id}`,\r\n              `${currentNode._undividedEstateSpouse}`,\r\n              \"\",\r\n              \"s_right\",\r\n              \"t_left\"\r\n            );\r\n            connectorArray.push(newConnector);\r\n          }\r\n        }\r\n\r\n        createNodesInPath(currentNode._path, processedNodes);\r\n        if (currentNode._partnerPath) {\r\n          createNodesInPath(currentNode._partnerPath, processedNodes);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst getLevelMap = (data: any) => {\r\n  const levelMap = new Map<number, Array<ChartNode>>();\r\n  // eslint-disable-next-line\r\n  data.nodeMap.forEach(function (node: NodeEntity, key: number) {\r\n    const nodeDetails = Person.getPerson(node._id, data.personsMap);\r\n\r\n    if (node._level > maxLevel) {\r\n      maxLevel = node._level;\r\n    }\r\n    if (node._level < minLevel) {\r\n      minLevel = node._level;\r\n    }\r\n    if (!levelMap.has(node._level)) {\r\n      levelMap.set(node._level, new Array<ChartNode>());\r\n    }\r\n    const nodeLabel = nodeDetails._deceased\r\n      ? `\\u2020 ${nodeDetails._personName}`\r\n      : nodeDetails._personName;\r\n    const newNode = new ChartNode(\r\n      node._id.toString(),\r\n      \"specialNode\",\r\n      new NodeData(nodeLabel),\r\n      { x: 0, y: 0 },\r\n      0\r\n    );\r\n    levelMap.get(node._level)?.push(newNode);\r\n    chartNodeMap.set(node._id, newNode);\r\n  });\r\n\r\n  return levelMap;\r\n};\r\n\r\nconst setNodePosition = (\r\n  levelMap: Map<number, Array<ChartNode>>,\r\n  nodeMap: any\r\n) => {\r\n  let ypos = 0;\r\n  for (let i = maxLevel; i >= minLevel; i--) {\r\n    const currentLevelChartNodes = levelMap.get(i);\r\n    // let xpos = 0;\r\n    if (currentLevelChartNodes !== undefined) {\r\n      const sortedLevelChartNode = currentLevelChartNodes.sort((a, b) =>\r\n        a.xLevel >= b.xLevel ? 1 : -1\r\n      );\r\n      // create bubbles\r\n      const bubbles = createLevelBubble(\r\n        sortedLevelChartNode,\r\n        partnerBubbleLevelMap.get(i),\r\n        nodeMap\r\n      );\r\n\r\n      processBubbles(bubbles, ypos);\r\n    }\r\n    ypos += yDiff;\r\n  }\r\n};\r\nconst processBubbles = (bubbles: Array<Bubble>, ypos: number) => {\r\n  let xleft = 0;\r\n  const xgap = xDiff - nodeSize;\r\n  let previousXRight = -10000000;\r\n\r\n  for (const bubble of bubbles) {\r\n    //\r\n    const n = bubble.elements.length;\r\n    if (bubble.parent) {\r\n      // find relative pos with parent\r\n\r\n      const parentChartNode = getChartNode(bubble.parent.toString());\r\n      let relativeXleft =\r\n        parentChartNode.position.x +\r\n        nodeSize / 2 -\r\n        (n * nodeSize + (n - 1) * xgap) / 2;\r\n      const relativeXRight =\r\n        parentChartNode.position.x +\r\n        nodeSize / 2 +\r\n        (n * nodeSize + (n - 1) * xgap) / 2;\r\n\r\n      if (previousXRight > relativeXleft) {\r\n        relativeXleft = previousXRight;\r\n      }\r\n      previousXRight = relativeXRight + xgap;\r\n      for (const eleID of bubble.elements) {\r\n        const element = getChartNode(eleID.toString());\r\n        element.position = { x: relativeXleft, y: ypos };\r\n        relativeXleft += xDiff;\r\n        xleft = relativeXleft;\r\n      }\r\n    } else {\r\n      // x will start from xleft\r\n      const relativeXRight = xleft + n * xDiff;\r\n      previousXRight = relativeXRight;\r\n      for (const eleID of bubble.elements) {\r\n        const element = getChartNode(eleID.toString());\r\n        element.position = { x: xleft, y: ypos };\r\n        xleft += xDiff;\r\n      }\r\n    }\r\n  }\r\n};\r\nconst createLevelBubble = (\r\n  chartNodes: Array<ChartNode>,\r\n  partnerBubble: Array<number> | undefined,\r\n  nodeMap: any\r\n) => {\r\n  const bubbles = new Array<Bubble>();\r\n  let isPartnerProcessed = false;\r\n  for (const chartNode of chartNodes) {\r\n    const node = NodeEntity.getNode(parseInt(chartNode.id), nodeMap);\r\n    // check in partnerMap\r\n\r\n    if (partnerBubble && partnerBubble.includes(node._id)) {\r\n      if (isPartnerProcessed) {\r\n        continue;\r\n      }\r\n      isPartnerProcessed = true;\r\n      let partnerParent: number | undefined;\r\n      let isExistingBubble = false;\r\n      for (const partner of partnerBubble) {\r\n        const partnerNode = NodeEntity.getNode(partner, nodeMap);\r\n        const existingBubbles = bubbles.filter((bubble) => {\r\n          if (bubble.parent) {\r\n            return partnerNode._parents.includes(bubble.parent);\r\n          }\r\n          return false;\r\n        });\r\n        if (existingBubbles.length !== 0) {\r\n          // return that there is an existing bubble which will include bubble\r\n          existingBubbles[0].elements =\r\n            existingBubbles[0].elements.concat(partnerBubble);\r\n          isExistingBubble = true;\r\n          break;\r\n        } else {\r\n          if (partnerNode._parents.length !== 0)\r\n            partnerParent = partnerNode._parents[0];\r\n        }\r\n      }\r\n      if (!isExistingBubble)\r\n        bubbles.push(new Bubble(partnerBubble, partnerParent));\r\n    } else {\r\n      const existingBubble = bubbles.filter((bubble) => {\r\n        if (bubble.parent) {\r\n          return node._parents.includes(bubble.parent);\r\n        }\r\n        return false;\r\n      });\r\n      let bubble: Bubble;\r\n      if (existingBubble.length !== 0) {\r\n        bubble = existingBubble[0];\r\n        bubble.elements.push(node._id);\r\n      } else {\r\n        if (node._parents.length !== 0)\r\n          bubble = new Bubble([node._id], node._parents[0]);\r\n        else bubble = new Bubble([node._id]);\r\n        bubbles.push(bubble);\r\n      }\r\n    }\r\n  }\r\n  return bubbles;\r\n};\r\nconst getChartNodeConnectorArray = (\r\n  nodeMap: Map<number, NodeEntity>\r\n): Array<ChartNode | ChartConnector> => {\r\n  const finalArray = new Array<ChartNode | ChartConnector>();\r\n  // eslint-disable-next-line\r\n  chartNodeMap.forEach((value, key) => {\r\n    if (NodeEntity.getNode(parseInt(value.id), nodeMap)._path.length !== 0)\r\n      finalArray.push(value);\r\n  });\r\n  return finalArray.concat(connectorArray);\r\n};\r\n\r\nconst setxLevelForMaxLevel = (nodeArray: Array<ChartNode>) => {\r\n  const xlevelDefault = xLevelArray[nodeArray.length - 1];\r\n  for (let i = 0; i < nodeArray.length; i++) {\r\n    nodeArray[i].xLevel = xlevelDefault[i];\r\n  }\r\n};\r\nconst getChartNode = (id: string) => {\r\n  const chartNode: ChartNode | undefined = chartNodeMap.get(parseInt(id));\r\n  if (chartNode == undefined) {\r\n    throw new Error(\"Person not found with given id:\" + id);\r\n  }\r\n  return chartNode;\r\n};\r\nfunction createNodesInPath(\r\n  currentNodePath: [number, number][],\r\n  processedNodes: string[]\r\n) {\r\n  for (let j = currentNodePath.length - 2; j >= 0; j--) {\r\n    if (\r\n      currentNodePath[j][0] === ParentChildSelector.testator &&\r\n      (currentNodePath[j + 1][0] === ParentChildSelector.spouse ||\r\n        currentNodePath[j + 1][0] === ParentChildSelector.cohabitant ||\r\n        currentNodePath[j + 1][0] === ParentChildSelector.undividedSpouse)\r\n    ) {\r\n      break;\r\n    }\r\n    processedNodes.push(currentNodePath[j][1].toString());\r\n    let source = \"\",\r\n      target = \"\";\r\n    if (\r\n      currentNodePath[j + 1][0] <= currentNodePath[j][0] ||\r\n      (currentNodePath[j + 1][0] === ParentChildSelector.child &&\r\n        currentNodePath[j][0] === ParentChildSelector.testator)\r\n    ) {\r\n      source = currentNodePath[j][1].toString();\r\n      target = currentNodePath[j + 1][1].toString();\r\n    } else {\r\n      source = currentNodePath[j + 1][1].toString();\r\n      target = currentNodePath[j][1].toString();\r\n    }\r\n    const sourceNode = getChartNode(source);\r\n    if (!sourceNode.data.pos) {\r\n      sourceNode.data.pos = {};\r\n    }\r\n    sourceNode.data.pos.bottom = \"bottom\";\r\n    const targetNode = getChartNode(target);\r\n    if (!targetNode.data.pos) {\r\n      targetNode.data.pos = {};\r\n    }\r\n    targetNode.data.pos.top = \"top\";\r\n\r\n    if (\r\n      connectorArray.filter((connector) => {\r\n        return connector.id === `e${source}-${target}`;\r\n      }).length === 0\r\n    ) {\r\n      const newConnector = new ChartConnector(\r\n        `e${source}-${target}`,\r\n        \"straight\",\r\n        source,\r\n        target,\r\n        \"\",\r\n        \"s_bottom\",\r\n        \"t_top\"\r\n      );\r\n      connectorArray.push(newConnector);\r\n    }\r\n  }\r\n}\r\n","import { ChatbotInterface } from \"../ChatbotComponent/Generics\";\r\nimport { NodeEntity } from \"../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nimport ActionProvider from \"../ChatbotComponent/ActionProvider\";\r\nimport {\r\n  getNode,\r\n  getPerson,\r\n  get_class_and_distance_closest_surviving_relative,\r\n} from \"../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nimport InheritanceConstants from \"../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { combine_duplicates, split_evenly_between_lines } from \"./ReportUtils\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\n\r\ninterface InheritanceCalculationInterface {\r\n  state: ChatbotInterface;\r\n  actionProvider: ActionProvider;\r\n  person: NodeEntity;\r\n  survivor: number | null;\r\n  survivor_type: string;\r\n  class_closest: number | undefined;\r\n  distance_closest: number | undefined;\r\n  old_surviving_reference_paragraphs: string;\r\n  surviving_reference_paragraphs: Array<string>;\r\n  minimum_surviving_inheritance: number;\r\n  surviving_fraction: number;\r\n  descriptive_text: string;\r\n  survivor_inheritance_sum: number;\r\n  genealogy_inheritance_sum: number;\r\n  splits_with_chains: Array<inheritanceFractionType>;\r\n  genealogy_inheritance: Array<inheritanceFractionType>;\r\n  inheritanceType: number;\r\n  netWealth: number;\r\n}\r\nexport type inheritanceFractionType = {\r\n  person: string;\r\n  frac: number;\r\n  chains: Array<string>;\r\n};\r\n\r\nexport interface ReportMethods {\r\n  computeInheritance(): void;\r\n  compute_default_genealogy_splits_with_chains(\r\n    person: number\r\n  ): inheritanceFractionType[];\r\n  computeGenealogyInheritance(person_id: number): inheritanceFractionType[];\r\n}\r\n\r\nexport class ReportCalculationBase implements InheritanceCalculationInterface {\r\n  state: ChatbotInterface;\r\n  actionProvider: ActionProvider;\r\n  person: NodeEntity;\r\n  survivor: number | null = null;\r\n  survivor_type = \"\";\r\n  class_closest: number | undefined;\r\n  distance_closest: number | undefined;\r\n  old_surviving_reference_paragraphs = \"\";\r\n  surviving_reference_paragraphs: string[] = [];\r\n  minimum_surviving_inheritance = 0;\r\n  surviving_fraction = 0;\r\n  descriptive_text = \"\";\r\n  survivor_inheritance_sum = 0;\r\n  genealogy_inheritance_sum = 0;\r\n  splits_with_chains: Array<inheritanceFractionType> = [];\r\n  genealogy_inheritance: Array<inheritanceFractionType> = [];\r\n  genealogy_splits: Array<inheritanceFractionType> = [];\r\n  will: undefined;\r\n  inheritanceType: number;\r\n  netWealth: number;\r\n  constructor(\r\n    person: NodeEntity,\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface,\r\n    inheritanceType: number,\r\n    will = undefined\r\n  ) {\r\n    this.state = state;\r\n    this.actionProvider = actionProvider;\r\n    this.person = getNode(person._id, this.state.nodeMap);\r\n    this.will = will;\r\n    this.inheritanceType = inheritanceType;\r\n    this.netWealth = state.netWealth;\r\n  }\r\n\r\n  initializeInheritance = () => {\r\n    if (this.person === undefined) {\r\n      return;\r\n    }\r\n    console.log(\"Computing inheritances\");\r\n    this.initializeInheritanceVariablesCommon();\r\n  };\r\n\r\n  initializePliktInheritance = () => {\r\n    console.log(\"Computing pliktdelsarv\");\r\n\r\n    [this.class_closest, this.distance_closest] =\r\n      get_class_and_distance_closest_surviving_relative(\r\n        this.state.testator,\r\n        this.state\r\n      );\r\n\r\n    if (this.person.has_surviving_spouse()) {\r\n      this.survivor = this.person._spouse;\r\n      this.survivor_type = intl.formatMessage({\r\n        id: \"REPORT.Inheritance.survivorType1\",\r\n      });\r\n\r\n      this.surviving_reference_paragraphs.push(\r\n        intl.formatMessage({\r\n          id: \"REPORT.Inheritance.surviving_reference_paragraphs_10annet\",\r\n        })\r\n      );\r\n      this.minimum_surviving_inheritance =\r\n        InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n      if (this.class_closest === 1) {\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveTest_firstClass_spouse_4G\",\r\n        });\r\n      } else {\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveTest_firstClass_spouse_6G\",\r\n        });\r\n      }\r\n    } else {\r\n      this.survivor = null;\r\n      this.surviving_reference_paragraphs = [];\r\n      this.descriptive_text = InheritanceConstants.DESC_NO_SPOUSE_OR_COHABITANT;\r\n      this.minimum_surviving_inheritance = 0;\r\n    }\r\n  };\r\n\r\n  initializeUndividedInheritance = () => {\r\n    console.log(\"Computing undivided estate inheritances\");\r\n\r\n    this.initializeInheritanceVariablesCommon();\r\n  };\r\n\r\n  computeMethod = (inheritanceOption: number) => {\r\n    switch (inheritanceOption) {\r\n      case 1:\r\n        this.initializeInheritance();\r\n        break;\r\n      case 2:\r\n        this.initializePliktInheritance();\r\n        break;\r\n      case 3:\r\n        this.initializeUndividedInheritance();\r\n        break;\r\n      default:\r\n        console.log(\"check error\");\r\n    }\r\n  };\r\n\r\n  initializeInheritanceVariablesCommon = () => {\r\n    [this.class_closest, this.distance_closest] =\r\n      get_class_and_distance_closest_surviving_relative(\r\n        this.state.testator,\r\n        this.state\r\n      );\r\n    if (this.person.has_surviving_spouse()) {\r\n      this.survivor = this.person._spouse;\r\n      this.survivor_type = intl.formatMessage({\r\n        id: \"REPORT.Inheritance.survivorType1\",\r\n      });\r\n\r\n      if (this.class_closest === undefined || this.class_closest > 2) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n        });\r\n        this.surviving_reference_paragraphs.push(\r\n          intl.formatMessage({\r\n            id: \"REPORT.Inheritance.surviving_reference_paragraphs_9annet\",\r\n          })\r\n        );\r\n        this.minimum_surviving_inheritance = 0;\r\n        this.surviving_fraction = 1;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DESC_SPOUSE_NO_CLOSE_RELATIVES\",\r\n        });\r\n      } else if (this.class_closest === 1) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n        });\r\n        this.surviving_reference_paragraphs.push(\r\n          intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_8forste\",\r\n          })\r\n        );\r\n        this.minimum_surviving_inheritance =\r\n          InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n        this.surviving_fraction =\r\n          InheritanceConstants.FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText4G\",\r\n        });\r\n      } else if (this.class_closest === 2) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n        });\r\n        this.surviving_reference_paragraphs.push(\r\n          intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_9forste\",\r\n          })\r\n        );\r\n        this.minimum_surviving_inheritance =\r\n          InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS;\r\n        this.surviving_fraction =\r\n          InheritanceConstants.FRACTION_INHERITANCE_SPOUSE_VS_PARENTS;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText6G\",\r\n        });\r\n      }\r\n    } else if (this.person.has_surviving_cohabitant()) {\r\n      this.survivor = this.person._cohabitant;\r\n      this.survivor_type = intl.formatMessage({\r\n        id: \"Report.Inheritance.survivorType2\",\r\n      });\r\n\r\n      if (this.class_closest === undefined || this.class_closest > 3) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n        });\r\n        this.surviving_reference_paragraphs.push(\r\n          intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n          })\r\n        );\r\n        this.minimum_surviving_inheritance = 0;\r\n        this.surviving_fraction = 1;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DESC_COHABITANT_NO_CLOSE_RELATIVES\",\r\n        });\r\n      } else if (this.class_closest === 1) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n        });\r\n        this.surviving_reference_paragraphs.push(\r\n          intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n          })\r\n        );\r\n        this.minimum_surviving_inheritance =\r\n          InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN;\r\n        this.surviving_fraction =\r\n          InheritanceConstants.FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText_firstClass_cohab_4G\",\r\n        });\r\n      } else if (this.class_closest === 2) {\r\n        this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n        });\r\n        this.surviving_reference_paragraphs.push(\r\n          intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n          })\r\n        );\r\n        this.minimum_surviving_inheritance =\r\n          InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS;\r\n        this.surviving_fraction =\r\n          InheritanceConstants.FRACTION_INHERITANCE_COHABITANT_VS_PARENTS;\r\n        this.descriptive_text = intl.formatMessage({\r\n          id: \"REPORT.Inheritance.DescriptiveText_secondClass_cohab_4G\",\r\n        });\r\n      } else if (this.class_closest === 3) {\r\n        if (this.distance_closest && this.distance_closest <= 2) {\r\n          this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n          });\r\n          this.surviving_reference_paragraphs.push(\r\n            intl.formatMessage({\r\n              id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n            })\r\n          );\r\n          this.minimum_surviving_inheritance = 4 * InheritanceConstants.G;\r\n          this.surviving_fraction = 0;\r\n          this.descriptive_text = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.DescriptiveText_thirdClass_cohab_4G\",\r\n          });\r\n        } else {\r\n          this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n          });\r\n          this.surviving_reference_paragraphs.push(\r\n            intl.formatMessage({\r\n              id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n            })\r\n          );\r\n          this.minimum_surviving_inheritance = 0;\r\n          this.surviving_fraction = 1;\r\n          this.descriptive_text = intl.formatMessage({\r\n            id: \"REPORT.Inheritance.DESC_COHABITANT_NO_CLOSE_RELATIVES_2\",\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      this.survivor = null;\r\n      this.surviving_reference_paragraphs = [];\r\n      this.minimum_surviving_inheritance = 0;\r\n      this.surviving_fraction = 0;\r\n      this.descriptive_text = intl.formatMessage({\r\n        id: \"REPORT.Inheritance.DESC_NO_SPOUSE_OR_COHABITANT\",\r\n      });\r\n    }\r\n  };\r\n\r\n  computeGenealogyInheritance = (\r\n    person_id: number,\r\n    state: ChatbotInterface\r\n  ) => {\r\n    this.survivor_inheritance_sum = Math.min(\r\n      this.state.netWealth,\r\n      Math.max(\r\n        this.minimum_surviving_inheritance,\r\n        this.surviving_fraction * this.state.netWealth\r\n      )\r\n    );\r\n    this.genealogy_inheritance_sum =\r\n      this.state.netWealth - this.survivor_inheritance_sum;\r\n    if (this.genealogy_inheritance_sum !== 0) {\r\n      this.splits_with_chains =\r\n        this.compute_default_genealogy_splits_with_chains(\r\n          person_id,\r\n          this.actionProvider,\r\n          state\r\n        );\r\n      this.genealogy_splits = combine_duplicates(this.splits_with_chains);\r\n\r\n      this.genealogy_splits.map((genealogy_split: inheritanceFractionType) => {\r\n        return this.genealogy_inheritance.push({\r\n          person: genealogy_split.person,\r\n          frac: genealogy_split.frac * this.genealogy_inheritance_sum,\r\n          chains: genealogy_split.chains,\r\n        });\r\n      });\r\n    } else {\r\n      this.splits_with_chains = [];\r\n      this.genealogy_splits = [];\r\n      this.genealogy_inheritance = [];\r\n    }\r\n    return this.genealogy_inheritance;\r\n  };\r\n\r\n  computeGenealogyPliktInheritance = (\r\n    person_id: number,\r\n    state: ChatbotInterface\r\n  ) => {\r\n    this.survivor_inheritance_sum = Math.min(\r\n      this.netWealth,\r\n      this.minimum_surviving_inheritance\r\n    );\r\n\r\n    this.genealogy_inheritance_sum = Math.min(\r\n      this.netWealth - this.survivor_inheritance_sum,\r\n      this.netWealth * InheritanceConstants.FRACTION_PLIKTDEL,\r\n      InheritanceConstants.LINE_MAXIMUM_PLIKTDEL * this.person._children.length\r\n    );\r\n\r\n    if (this.genealogy_inheritance_sum !== 0) {\r\n      this.splits_with_chains =\r\n        this.compute_default_genealogy_splits_with_chains(\r\n          person_id,\r\n          this.actionProvider,\r\n          state\r\n        );\r\n      this.genealogy_splits = combine_duplicates(this.splits_with_chains);\r\n\r\n      this.genealogy_splits.map((genealogy_split: inheritanceFractionType) => {\r\n        return this.genealogy_inheritance.push({\r\n          person: genealogy_split.person,\r\n          frac: genealogy_split.frac * this.genealogy_inheritance_sum,\r\n          chains: genealogy_split.chains,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  compute_default_genealogy_splits_with_chains = (\r\n    person: number,\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface\r\n  ): Array<inheritanceFractionType> => {\r\n    const personNode = getNode(person, state.nodeMap);\r\n    const personObject = getPerson(person, state.personsMap);\r\n    const class_closest = get_class_and_distance_closest_surviving_relative(\r\n      personNode,\r\n      state\r\n    )[0];\r\n    if (class_closest === 1) {\r\n      return split_evenly_between_lines(\r\n        actionProvider,\r\n        state,\r\n        personNode._children\r\n      );\r\n    } else if (class_closest === 2) {\r\n      const firstParentSpouse = getNode(\r\n        personNode._parents[0],\r\n        state.nodeMap\r\n      )._spouse;\r\n      if (\r\n        !personObject._underAge ||\r\n        firstParentSpouse === personNode._parents[1]\r\n      ) {\r\n        return split_evenly_between_lines(\r\n          actionProvider,\r\n          state,\r\n          personNode._parents\r\n        );\r\n      } else {\r\n        return split_evenly_between_lines(\r\n          actionProvider,\r\n          state,\r\n          personNode._parents,\r\n          undefined,\r\n          true\r\n        );\r\n      }\r\n    } else if (class_closest === 3) {\r\n      const grandParent_splits = split_evenly_between_lines(\r\n        actionProvider,\r\n        state,\r\n        personNode._parents,\r\n        2\r\n      );\r\n      let num = 0;\r\n      for (const splits of grandParent_splits) {\r\n        if (splits) {\r\n          num = num + 1;\r\n        }\r\n      }\r\n      const resultGrandParentSplit: Array<inheritanceFractionType> = [];\r\n      grandParent_splits.map((grandParent_split) => {\r\n        resultGrandParentSplit.push({\r\n          person: grandParent_split.person,\r\n          frac: grandParent_split.frac / num,\r\n          chains: grandParent_split.chains,\r\n        });\r\n      });\r\n      return resultGrandParentSplit;\r\n    } else if (class_closest === undefined || class_closest > 3) return [];\r\n    else return [];\r\n  };\r\n}\r\n","import { ChatbotInterface } from \"../ChatbotComponent/Generics\";\r\nimport { NodeEntity } from \"../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nimport ActionProvider from \"../ChatbotComponent/ActionProvider\";\r\nimport { ReportCalculationBase } from \"./ReportCalculationBase\";\r\nimport { getNode } from \"../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\n\r\nexport class InheritanceCalculation extends ReportCalculationBase {\r\n  state: ChatbotInterface;\r\n  actionProvider: ActionProvider;\r\n  person: NodeEntity;\r\n  will: undefined;\r\n  constructor(\r\n    person: NodeEntity,\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface,\r\n    will = undefined\r\n  ) {\r\n    super(person, actionProvider, state, 1, will);\r\n    this.state = state;\r\n    this.actionProvider = actionProvider;\r\n    this.person = getNode(person._id, this.state.nodeMap);\r\n    this.will = will;\r\n  }\r\n\r\n  // computeInheritance = () => {\r\n  //   [this.class_closest, this.distance_closest] =\r\n  //     get_class_and_distance_closest_surviving_relative(\r\n  //       this.state.testator,\r\n  //       this.state\r\n  //     );\r\n\r\n  //   if (this.person.has_surviving_spouse()) {\r\n  //     // TODO define has_surviving_spouse in NodeEntity.ts\r\n  //     this.survivor = this.person._spouse;\r\n  //     this.survivor_type = intl.formatMessage({\r\n  //       id: \"REPORT.Inheritance.survivorType1\",\r\n  //     });\r\n\r\n  //     if (this.class_closest === undefined || this.class_closest > 2) {\r\n  //       this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n  //       });\r\n  //       this.surviving_reference_paragraphs.push(\r\n  //         intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.surviving_reference_paragraphs_9annet\",\r\n  //         })\r\n  //       );\r\n  //       this.minimum_surviving_inheritance = 0;\r\n  //       this.surviving_fraction = 1;\r\n  //       this.descriptive_text = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.DESC_SPOUSE_NO_CLOSE_RELATIVES\",\r\n  //       });\r\n  //     } else if (this.class_closest === 1) {\r\n  //       this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n  //       });\r\n  //       this.surviving_reference_paragraphs.push(\r\n  //         intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_8forste\",\r\n  //         })\r\n  //       );\r\n  //       this.minimum_surviving_inheritance =\r\n  //         InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n  //       this.surviving_fraction =\r\n  //         InheritanceConstants.FRACTION_INHERITANCE_SPOUSE_VS_CHILDREN;\r\n  //       this.descriptive_text = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.DescriptiveText4G\",\r\n  //       });\r\n  //     } else if (this.class_closest === 2) {\r\n  //       this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_6forste\",\r\n  //       });\r\n  //       this.surviving_reference_paragraphs.push(\r\n  //         intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_9forste\",\r\n  //         })\r\n  //       );\r\n  //       this.minimum_surviving_inheritance =\r\n  //         InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS;\r\n  //       this.surviving_fraction =\r\n  //         InheritanceConstants.FRACTION_INHERITANCE_SPOUSE_VS_PARENTS;\r\n  //       this.descriptive_text = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.DescriptiveText6G\",\r\n  //       });\r\n  //     }\r\n  //   } else if (this.person.has_surviving_cohabitant()) {\r\n  //     this.survivor = this.person._cohabitant;\r\n  //     this.survivor_type = intl.formatMessage({\r\n  //       id: \"Report.Inheritance.survivorType2\",\r\n  //     });\r\n\r\n  //     if (this.class_closest === undefined || this.class_closest > 3) {\r\n  //       this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n  //       });\r\n  //       this.surviving_reference_paragraphs.push(\r\n  //         intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n  //         })\r\n  //       );\r\n  //       this.minimum_surviving_inheritance = 0;\r\n  //       this.surviving_fraction = 1;\r\n  //       this.descriptive_text = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.DESC_COHABITANT_NO_CLOSE_RELATIVES\",\r\n  //       });\r\n  //     } else if (this.class_closest === 1) {\r\n  //       this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n  //       });\r\n  //       this.surviving_reference_paragraphs.push(\r\n  //         intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n  //         })\r\n  //       );\r\n  //       this.minimum_surviving_inheritance =\r\n  //         InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_CHILDREN;\r\n  //       this.surviving_fraction =\r\n  //         InheritanceConstants.FRACTION_INHERITANCE_COHABITANT_VS_CHILDREN;\r\n  //       this.descriptive_text = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.DescriptiveText_firstClass_cohab_4G\",\r\n  //       });\r\n  //     } else if (this.class_closest === 2) {\r\n  //       this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n  //       });\r\n  //       this.surviving_reference_paragraphs.push(\r\n  //         intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n  //         })\r\n  //       );\r\n  //       this.minimum_surviving_inheritance =\r\n  //         InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS;\r\n  //       this.surviving_fraction =\r\n  //         InheritanceConstants.FRACTION_INHERITANCE_COHABITANT_VS_PARENTS;\r\n  //       this.descriptive_text = intl.formatMessage({\r\n  //         id: \"REPORT.Inheritance.DescriptiveText_secondClass_cohab_4G\",\r\n  //       });\r\n  //     } else if (this.class_closest === 3) {\r\n  //       if (this.distance_closest && this.distance_closest <= 2) {\r\n  //         this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n  //         });\r\n  //         this.surviving_reference_paragraphs.push(\r\n  //           intl.formatMessage({\r\n  //             id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n  //           })\r\n  //         );\r\n  //         this.minimum_surviving_inheritance = 4 * InheritanceConstants.G;\r\n  //         this.surviving_fraction = 0;\r\n  //         this.descriptive_text = intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.DescriptiveText_thirdClass_cohab_4G\",\r\n  //         });\r\n  //       } else {\r\n  //         this.old_surviving_reference_paragraphs = intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_28Bforste\",\r\n  //         });\r\n  //         this.surviving_reference_paragraphs.push(\r\n  //           intl.formatMessage({\r\n  //             id: \"REPORT.Inheritance.old_surviving_reference_paragraphs_12forste\",\r\n  //           })\r\n  //         );\r\n  //         this.minimum_surviving_inheritance = 0;\r\n  //         this.surviving_fraction = 1;\r\n  //         this.descriptive_text = intl.formatMessage({\r\n  //           id: \"REPORT.Inheritance.DESC_COHABITANT_NO_CLOSE_RELATIVES_2\",\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   } else {\r\n  //     this.survivor = null;\r\n  //     this.surviving_reference_paragraphs = [];\r\n  //     this.minimum_surviving_inheritance = 0;\r\n  //     this.surviving_fraction = 0;\r\n  //     this.descriptive_text = intl.formatMessage({\r\n  //       id: \"REPORT.Inheritance.DESC_NO_SPOUSE_OR_COHABITANT\",\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  // compute_default_genealogy_splits_with_chains = (person: number) => {\r\n  //   //\r\n  //   const personNode = getNode(person, this.state.nodeMap);\r\n  //   const personDetail = getPerson(person, this.state.personsMap);\r\n  //   const [closest_class, closest_distance] =\r\n  //     get_class_and_distance_closest_surviving_relative(personNode, this.state);\r\n  //   if (closest_class === 1) {\r\n  //     return this.reportUtils.split_evenly_between_lines(personNode._children);\r\n  //   } else if (closest_class === 2) {\r\n  //     const firstParentNode = getNode(\r\n  //       personNode._parents[0],\r\n  //       this.state.nodeMap\r\n  //     );\r\n  //     if (\r\n  //       !personDetail._underAge ||\r\n  //       firstParentNode._spouse === personNode._parents[1]\r\n  //     ) {\r\n  //       return this.reportUtils.split_evenly_between_lines(personNode._parents);\r\n  //     } else\r\n  //       return this.reportUtils.split_evenly_between_lines(\r\n  //         personNode._parents,\r\n  //         undefined,\r\n  //         true\r\n  //       );\r\n  //   } else if (closest_class === 3) {\r\n  //     const grandparent_splits = [];\r\n  //     for (const parent of personNode._parents) {\r\n  //       const parentNode = getNode(parent, this.state.nodeMap);\r\n  //       grandparent_splits.push(\r\n  //         this.reportUtils.split_evenly_between_lines(parentNode._parents, 2)\r\n  //       );\r\n  //     }\r\n  //     const tempArray = [];\r\n  //     for (const a of grandparent_splits) {\r\n  //       if (a.length > 0) {\r\n  //         tempArray.push(a);\r\n  //       }\r\n  //     }\r\n  //     const num = tempArray.length;\r\n\r\n  //     const temp_list = [];\r\n  //     for (const split of grandparent_splits) {\r\n  //       if (split.length > 0) {\r\n  //         temp_list.push([split[0]]);\r\n  //       }\r\n  //     }\r\n  //     const resultList = [];\r\n  //     for (const item of temp_list) {\r\n  //       resultList.push([item[0], item[1] / num, item[2]]);\r\n  //     }\r\n  //     return resultList;\r\n  //   } else if (closest_class === undefined || closest_class > 3) {\r\n  //     return [];\r\n  //   }\r\n  // };\r\n\r\n  // computeGenealogyInheritance = (person_id: number) => {\r\n  //   this.survivor_inheritance_sum = Math.min(\r\n  //     this.state.netWealth,\r\n  //     Math.max(\r\n  //       this.minimum_surviving_inheritance,\r\n  //       this.surviving_fraction * this.state.netWealth\r\n  //     )\r\n  //   );\r\n  //   this.genealogy_inheritance_sum =\r\n  //     this.state.netWealth - this.survivor_inheritance_sum;\r\n  //   if (this.genealogy_inheritance_sum !== 0) {\r\n  //     this.splits_with_chains =\r\n  //       this.compute_default_genealogy_splits_with_chains(person_id);\r\n  //     const genealogy_splits = this.reportUtils.combine_duplicates(\r\n  //       this.splits_with_chains\r\n  //     );\r\n\r\n  //     genealogy_splits.map((genealogy_split: any) => {\r\n  //       return this.genealogy_inheritance.push({\r\n  //         person: genealogy_split.person,\r\n  //         frac: genealogy_split.frac * this.genealogy_inheritance_sum,\r\n  //         chains: genealogy_split.chains,\r\n  //       });\r\n  //     });\r\n  //   } else {\r\n  //     this.splits_with_chains = [];\r\n  //     this.genealogy_splits = splits_initial;\r\n  //     this.genealogy_inheritance = [splits_initial];\r\n  //   }\r\n  //   return this.genealogy_inheritance;\r\n  // };\r\n}\r\n","import { StyleSheet } from \"@react-pdf/renderer\";\r\n\r\nexport const styles = StyleSheet.create({\r\n  page: {\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    fontFamily: \"Times-Roman\",\r\n    flexDirection: \"column\",\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n    paddingBottom: 30,\r\n  },\r\n  section: {\r\n    margin: 10,\r\n  },\r\n  header: {\r\n    fontSize: 12,\r\n    marginBottom: 20,\r\n    textAlign: \"center\",\r\n    color: \"grey\",\r\n    fontFamily: \"Times-Roman\",\r\n  },\r\n  heading: {\r\n    fontSize: 24,\r\n    color: \"#17365D\",\r\n    marginBottom: 10,\r\n    textDecoration: \"underline\",\r\n  },\r\n  subheading: {\r\n    fontSize: 14,\r\n    color: \"#2979ff\",\r\n    fontFamily: \"Helvetica-Bold\",\r\n  },\r\n  paragraphHeading: {\r\n    fontSize: 12,\r\n    color: \"#365F91\",\r\n    fontFamily: \"Helvetica-Bold\",\r\n  },\r\n  paragraph: {\r\n    fontSize: 10,\r\n    fontFamily: \"Times-Roman\",\r\n    margin: 10,\r\n  },\r\n  pageNumber: {\r\n    position: \"absolute\",\r\n    fontSize: 12,\r\n    bottom: 30,\r\n    left: 0,\r\n    right: 0,\r\n    textAlign: \"center\",\r\n    color: \"grey\",\r\n  },\r\n  boldValue: {\r\n    fontFamily: \"Times-Bold\",\r\n    fontWeight: 600,\r\n  },\r\n  italicValue: {\r\n    fontFamily: \"Times-Italic\",\r\n    fontStyle: \"italic\",\r\n  },\r\n  urlStyle: {\r\n    fontFamily: \"Times-Roman\",\r\n    color: \"#1a0dab\",\r\n  },\r\n  tableHeaderRow: {\r\n    backgroundColor: \"grey\",\r\n    borderWidth: 0,\r\n    fontSize: 12,\r\n    textAlign: \"center\",\r\n  },\r\n  tableDataRow: {\r\n    backgroundColor: \"white\",\r\n    borderWidth: 0,\r\n    fontSize: 10,\r\n    textAlign: \"center\",\r\n  },\r\n  marginTop: {\r\n    marginTop: 10,\r\n  },\r\n  redText: {\r\n    color: \"#ff0000\",\r\n  },\r\n  imageView: {\r\n    backgroundColor: \"white\",\r\n  },\r\n  image: {\r\n    backgroundColor: \"white\",\r\n    marginTop: 20,\r\n  },\r\n});\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\ntype BoldProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport const Bold = (props: BoldProps) => (\r\n  <Text style={styles.boldValue}>{props.children}</Text>\r\n);\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\ntype ItalicProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport const Italic = (props: ItalicProps) => (\r\n  <Text style={styles.italicValue}>{props.children}</Text>\r\n);\r\n","import { Text, Link } from \"@react-pdf/renderer\";\r\nimport { Bold } from \"./PDF/Sections/common/text-styles/Bold\";\r\nimport { Italic } from \"./PDF/Sections/common/text-styles/Italic\";\r\nimport \"react-pdf/dist/umd/Page/AnnotationLayer.css\";\r\n\r\nexport const currencyFormatNO = (currencyValue: number): string => {\r\n  return Intl.NumberFormat(\"no-NO\", {\r\n    style: \"currency\",\r\n    currency: \"NOK\",\r\n    useGrouping: true,\r\n  })\r\n    .format(currencyValue)\r\n    .replace(\"kr\", \"NOK\")\r\n    .replace(\",\", \".\");\r\n};\r\n\r\nexport const add_legal_references = (\r\n  code_paragraphs: string[],\r\n  CODE_PARAGRAPHS: any,\r\n  LAW_LINKS: any\r\n) => {\r\n  const legalReferenceTextArray: any[] = [];\r\n  code_paragraphs.forEach((code_paragraph) => {\r\n    legalReferenceTextArray.push(\r\n      add_legal_reference(code_paragraph, CODE_PARAGRAPHS, LAW_LINKS)\r\n    );\r\n  });\r\n  return legalReferenceTextArray;\r\n};\r\n\r\nexport const add_legal_reference = (\r\n  code_paragraph: string,\r\n  CODE_PARAGRAPHS: any,\r\n  LAW_LINKS: any\r\n) => {\r\n  const lovdataLink = addLovdataLink(code_paragraph, LAW_LINKS);\r\n  return (\r\n    <Text>\r\n      {\"\\n\\n\"}\r\n      <Bold>Arveloven § {code_paragraph}:</Bold>{\" \"}\r\n      <Italic>{CODE_PARAGRAPHS[code_paragraph]}</Italic>\r\n      {\"\\n\\n\"}\r\n      <Text>{lovdataLink}</Text>\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport const addLovdataLink = (code_paragraph: string, LAW_LINKS: any) => {\r\n  const code_paragraph_code = code_paragraph.replace(/[^\\d].*/, \"\");\r\n  const hyperlinkText = add_hyperlink(LAW_LINKS[code_paragraph_code]);\r\n  return (\r\n    <Text>\r\n      For å lese lovteksten i kontekst hos Lovdata, gå til {hyperlinkText}.\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst add_hyperlink = (url_text: [string, string]) => {\r\n  return (\r\n    <Link src={url_text[0]}>\r\n      <Text>{url_text[1]}</Text>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport const unravel_chain_to_string = (\r\n  chain: Array<string>\r\n): string | null => {\r\n  if (chain.length === 0) {\r\n    return null;\r\n  }\r\n  let s = chain.splice(0, 1)[0];\r\n  chain.map((link) => {\r\n    s = `${s} som er stedfortreder for person med person-id ${link}`;\r\n  });\r\n  return s ? s : \"\";\r\n};\r\n\r\nexport const unravel_chains_to_string = (\r\n  chains: Array<Array<string>>\r\n): string => {\r\n  const chains_unraveled: Array<string> = [];\r\n  for (const chain of chains) {\r\n    const unravelOutput: string | null = unravel_chain_to_string(chain);\r\n    if (unravelOutput !== null && unravelOutput.length !== 0) {\r\n      chains_unraveled.push(unravelOutput);\r\n    }\r\n  }\r\n  const n = chains_unraveled.length;\r\n  let text = \"\";\r\n  if (n === 0) return \"\";\r\n  else if (n === 1) {\r\n    text = ` som stedfortreder for ${chains_unraveled[0]}`;\r\n    return text;\r\n  } else {\r\n    text = \" som stedfortreder for \";\r\n    chains_unraveled.map((ind, unraveled_chain) => {\r\n      if (ind && ind.length === 0) {\r\n        text += `${unraveled_chain}`;\r\n      } else if (ind && ind.length === n - 1) {\r\n        text += ` og som stedfortreder for ${unraveled_chain}`;\r\n      } else {\r\n        text += `, som stedfortreder for ${unraveled_chain}`;\r\n      }\r\n    });\r\n    return text;\r\n  }\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport InheritanceConstants from \"../../../../../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { InheritanceCalculation } from \"../../../../InheritanceCalculation\";\r\nimport { styles } from \"../../../styles\";\r\nimport {\r\n  add_legal_reference,\r\n  currencyFormatNO,\r\n  unravel_chains_to_string,\r\n} from \"../../../../pdf_utils\";\r\nimport { Bold } from \"../text-styles/Bold\";\r\n\r\nconst GenealogyUtils = (value: InheritanceCalculation) => {\r\n  const genealogy_inheritance_sum = value.genealogy_inheritance_sum;\r\n  const genealogyText = getGenealogyText(genealogy_inheritance_sum, value);\r\n  return (\r\n    <View>\r\n      <Text>{genealogyText}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\n// add_inheritance_calculation_relatives\r\nconst getGenealogyText = (\r\n  genealogy_inheritance_sum: number,\r\n  value: InheritanceCalculation\r\n) => {\r\n  if (genealogy_inheritance_sum === 0) {\r\n    return (\r\n      <Text style={styles.paragraph}>\r\n        Det er ingen slektsarv igjen å fordele.\r\n      </Text>\r\n    );\r\n  } else if (\r\n    value.class_closest === undefined ||\r\n    (value.class_closest === 3 &&\r\n      value.distance_closest &&\r\n      value.distance_closest > 2)\r\n  ) {\r\n    let code_paragraph = \"6 første ledd, andre punktum\";\r\n    const legalReference1 = add_legal_reference(\r\n      code_paragraph,\r\n      InheritanceConstants.CODE_PARAGRAPHS,\r\n      InheritanceConstants.LAW_LINKS\r\n    );\r\n\r\n    code_paragraph = \"76 første ledd, første punktum\";\r\n    const legalReference2 = add_legal_reference(\r\n      code_paragraph,\r\n      InheritanceConstants.CODE_PARAGRAPHS,\r\n      InheritanceConstants.LAW_LINKS\r\n    );\r\n    return (\r\n      <View>\r\n        <Text style={styles.paragraph}>\r\n          \"Testator har ingen nære slektninger.\"\r\n        </Text>\r\n        <Text style={styles.paragraph}>{legalReference1}</Text>\r\n        <View>\r\n          <Text style={styles.subheading}>Frivillig arbeid</Text>\r\n          <Bold>{currencyFormatNO(value.genealogy_inheritance_sum)}</Bold>\r\n          <Text style={styles.paragraph}>\r\n            {\" \"}\r\n            vil gå til frivillig arbeid til fordel for barn og unge.\r\n          </Text>\r\n          <Text style={styles.paragraph}>{legalReference2}</Text>\r\n        </View>\r\n      </View>\r\n    );\r\n  } else {\r\n    return (\r\n      <View>\r\n        <Text style={styles.paragraph}>\r\n          De gjenværende{\" \"}\r\n          <Bold>{currencyFormatNO(genealogy_inheritance_sum)}</Bold> fordeles på\r\n          slekten slik at det blir likt på hver gren i den aktuelle\r\n          arvegangsklasse. Nærmeste levende slektning er i arvegangsklasse{\" \"}\r\n          {value.class_closest}\r\n          {getParagraph(\r\n            value.class_closest,\r\n            InheritanceConstants.CODE_PARAGRAPHS,\r\n            InheritanceConstants.LAW_LINKS\r\n          )}\r\n        </Text>\r\n        <Text style={styles.paragraph}>\r\n          {\"\\n\\n\"}\r\n          {genealogy_inheritance_text(value)}\r\n        </Text>\r\n      </View>\r\n    );\r\n  }\r\n};\r\n\r\nconst getParagraph = (\r\n  class_closest: number,\r\n  CODE_PARAGRAPHS: any,\r\n  LAW_LINKS: any\r\n) => {\r\n  let code_paragraph = \"\";\r\n  let helpText = \"\";\r\n  if (class_closest === 1) {\r\n    code_paragraph = \"4 første og annet ledd\";\r\n    helpText = \" (livsarvinger/etterkommere av arvelater).\";\r\n  } else if (class_closest === 2) {\r\n    code_paragraph = \"5 første, andre og tredje ledd\";\r\n    helpText = \" (arvelaters foreldre og deres etterkommere).\";\r\n  } else if (class_closest === 3) {\r\n    code_paragraph = \"6 første og annet ledd\";\r\n    helpText = \" (arvelaters besteforeldre og deres etterkommere).\";\r\n  } else {\r\n    console.log(\"check for error\");\r\n  }\r\n  const legalReferenceText = add_legal_reference(\r\n    code_paragraph,\r\n    CODE_PARAGRAPHS,\r\n    LAW_LINKS\r\n  );\r\n  return (\r\n    <View>\r\n      <Text>{helpText}</Text>\r\n      <Text>{legalReferenceText}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst genealogy_inheritance_text = (value: InheritanceCalculation) => {\r\n  let finalGenealogyInheritanceText;\r\n  for (const i of Object.entries(value.genealogy_inheritance)) {\r\n    const tempVar = i[1];\r\n    finalGenealogyInheritanceText = (\r\n      <Text>\r\n        Person med person-id <Bold>{tempVar.person}</Bold> arver totalt{\" \"}\r\n        <Bold>{currencyFormatNO(tempVar.frac)} </Bold>\r\n        {unravel_chains_to_string([tempVar.chains])}.\r\n      </Text>\r\n    );\r\n  }\r\n  return finalGenealogyInheritanceText;\r\n};\r\n\r\nexport default GenealogyUtils;\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport InheritanceConstants from \"../../../../../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { PliktdelsarvCalculation } from \"../../../../PliktdelsarvCalculation\";\r\nimport { styles } from \"../../../styles\";\r\nimport {\r\n  add_legal_reference,\r\n  currencyFormatNO,\r\n  unravel_chains_to_string,\r\n} from \"../../../../pdf_utils\";\r\nimport { Bold } from \"../text-styles/Bold\";\r\n\r\nconst GenealogyPliktUtils = (value: PliktdelsarvCalculation) => {\r\n  const genealogy_inheritance_sum = value.genealogy_inheritance_sum;\r\n  const genealogyText = getGenealogyText(genealogy_inheritance_sum, value);\r\n\r\n  return (\r\n    <View>\r\n      <Text>{genealogyText}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\n// add_inheritance_calculation_relatives\r\nconst getGenealogyText = (\r\n  genealogyInheritanceSum: number,\r\n  value: PliktdelsarvCalculation\r\n) => {\r\n  const genealogy_inheritance_sum = currencyFormatNO(genealogyInheritanceSum);\r\n  const code_paragraph = \"50 første ledd\";\r\n  const legal_reference_text = add_legal_reference(\r\n    code_paragraph,\r\n    InheritanceConstants.CODE_PARAGRAPHS,\r\n    InheritanceConstants.LAW_LINKS\r\n  );\r\n  const genealogyInheritanceText = genealogy_inheritance_text(value);\r\n  if (value.genealogy_inheritance_sum === 0) {\r\n    return (\r\n      <Text style={styles.paragraph}>\r\n        Det er ingen slektsarv igjen å fordele.\r\n      </Text>\r\n    );\r\n  } else {\r\n    return (\r\n      <Text style={styles.paragraph}>\r\n        <Bold>{genealogy_inheritance_sum}</Bold>{\" \"}\r\n        <Text style={styles.paragraph}>\r\n          fordeles på livsarvingene slik at det blir likt på hver gren.\r\n          (livsarvinger/etterkommere av arvelater).\r\n        </Text>\r\n        <Text style={styles.paragraph}>{legal_reference_text}</Text>\r\n        {\"\\n\\n\"}\r\n        <Text style={styles.paragraph}>{genealogyInheritanceText}</Text>\r\n      </Text>\r\n    );\r\n  }\r\n};\r\n\r\nconst getParagraph = (\r\n  class_closest: number,\r\n  CODE_PARAGRAPHS: any,\r\n  LAW_LINKS: any\r\n) => {\r\n  let code_paragraph = \"\";\r\n  let helpText = \"\";\r\n  if (class_closest === 1) {\r\n    code_paragraph = \"4 første og annet ledd\";\r\n    helpText = \" (livsarvinger/etterkommere av arvelater).\";\r\n  } else if (class_closest === 2) {\r\n    code_paragraph = \"5 første, andre og tredje ledd\";\r\n    helpText = \" (arvelaters foreldre og deres etterkommere).\";\r\n  } else if (class_closest === 3) {\r\n    code_paragraph = \"6 første og annet ledd\";\r\n    helpText = \" (arvelaters besteforeldre og deres etterkommere).\";\r\n  } else {\r\n    console.log(\"check for error\");\r\n  }\r\n  const legalReferenceText = add_legal_reference(\r\n    code_paragraph,\r\n    CODE_PARAGRAPHS,\r\n    LAW_LINKS\r\n  );\r\n  return (\r\n    <View>\r\n      <Text>{helpText}</Text>\r\n      <Text>{legalReferenceText}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst genealogy_inheritance_text = (value: PliktdelsarvCalculation) => {\r\n  let finalGenealogyInheritanceText;\r\n  for (const i of Object.entries(value.genealogy_inheritance)) {\r\n    const tempVar = i[1];\r\n    finalGenealogyInheritanceText = (\r\n      <Text style={styles.paragraph}>\r\n        Person med person-id <Bold>{tempVar.person}</Bold> arver totalt{\" \"}\r\n        <Bold>{currencyFormatNO(tempVar.frac)} </Bold>\r\n        {unravel_chains_to_string([tempVar.chains])}.\r\n      </Text>\r\n    );\r\n  }\r\n  return finalGenealogyInheritanceText;\r\n};\r\n\r\nexport default GenealogyPliktUtils;\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport { styles } from \"../../../styles\";\r\nimport GenealogyUtils from \"./Genealogy.utils\";\r\nimport GenealogyPliktUtils from \"./GenealogyPlikt.utils\";\r\n\r\nexport const Genealogy = (props: { inheritanceMode: boolean }): JSX.Element => {\r\n  if (props.inheritanceMode) {\r\n    const value = useContext(UserContext).inheritanceCalculation;\r\n    const genealogyParagraph = GenealogyUtils(value);\r\n\r\n    return (\r\n      <View style={styles.section} wrap={false}>\r\n        <Text style={styles.paragraphHeading}>Slektsarv</Text>\r\n        {genealogyParagraph}\r\n      </View>\r\n    );\r\n  } else {\r\n    const value = useContext(UserContext).pliktdelsarvCalculation;\r\n    const genealogyPliktParagraph = GenealogyPliktUtils(value);\r\n    return (\r\n      <View style={styles.section} wrap={false}>\r\n        <Text style={styles.paragraphHeading}>Slektsarv</Text>\r\n        {genealogyPliktParagraph}\r\n      </View>\r\n    );\r\n  }\r\n};\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { getPerson } from \"../../../../../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nimport { PliktdelsarvCalculation } from \"../../../../PliktdelsarvCalculation\";\r\nimport { styles } from \"../../../styles\";\r\nimport { currencyFormatNO } from \"../../../../pdf_utils\";\r\n\r\nexport const IntroductionPliktUtils = (value: PliktdelsarvCalculation) => {\r\n  return getPliktIntroString(value);\r\n};\r\n\r\nconst getPliktIntroString = (value: PliktdelsarvCalculation) => {\r\n  const person_name = getPerson(\r\n    value.person._id,\r\n    value.state.personsMap\r\n  )._personName;\r\n  const net_wealth_NOK = currencyFormatNO(value.state.netWealth);\r\n  const survivor_inheritance_sum = currencyFormatNO(\r\n    value.survivor_inheritance_sum\r\n  );\r\n  const genealogy_inheritance_sum = currencyFormatNO(\r\n    value.genealogy_inheritance_sum\r\n  );\r\n  const available_for_will = currencyFormatNO(\r\n    value.netWealth -\r\n      value.survivor_inheritance_sum -\r\n      value.genealogy_inheritance_sum\r\n  );\r\n  return (\r\n    <Text style={styles.paragraph}>\r\n      <Text>\r\n        Denne delen inneholder en beregning av pliktdelsarv etter arvelater med\r\n        person-id\r\n      </Text>{\" \"}\r\n      <Text style={styles.boldValue}>{person_name}</Text>{\" \"}\r\n      <Text style={styles.paragraph}>som etterlater seg en nettoarv på</Text>{\" \"}\r\n      <Text style={styles.boldValue}>{net_wealth_NOK}</Text>\r\n      {\".\\n\\n \"}\r\n      <Text style={styles.boldValue}>{survivor_inheritance_sum}</Text>{\" \"}\r\n      <Text style={styles.paragraph}>går til etterlatte, mens</Text>{\" \"}\r\n      <Text style={styles.boldValue}>{genealogy_inheritance_sum}</Text>{\" \"}\r\n      <Text style={styles.paragraph}>går til livsarvinger. Det betyr at</Text>{\" \"}\r\n      <Text style={styles.boldValue}>{available_for_will}</Text>{\" \"}\r\n      <Text style={styles.paragraph}>fritt kan testamenteres bort.</Text>\r\n    </Text>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport { IntroductionUtils } from \"./Introduction.utils\";\r\nimport { Bold } from \"../text-styles/Bold\";\r\nimport { IntroductionPliktUtils } from \"./IntroductionPlikt.utils\";\r\n\r\nexport const IntroductionPage = (props: {\r\n  inheritanceMode: boolean;\r\n}): JSX.Element => {\r\n  if (props.inheritanceMode) {\r\n    const value = useContext(UserContext).inheritanceCalculation;\r\n    const calculatedValues = IntroductionUtils(value);\r\n    return (\r\n      <View style={[styles.section]} wrap={false}>\r\n        <Text style={[styles.heading, { textAlign: \"center\" }]}>\r\n          Beregning av arv\r\n        </Text>\r\n        <Text style={styles.paragraph}>\r\n          Dette dokumentet inneholder en beregning av arv etter arvelater med\r\n          person-id <Bold>{calculatedValues.testatorName}</Bold>. Boet har en\r\n          total verdi på <Bold>{calculatedValues.currencyFormatted}</Bold>.\r\n        </Text>\r\n      </View>\r\n    );\r\n  } else {\r\n    const value = useContext(UserContext).pliktdelsarvCalculation;\r\n    const pliktIntroText = IntroductionPliktUtils(value);\r\n    return <View wrap={false}>{pliktIntroText}</View>;\r\n  }\r\n};\r\n","import { getPerson } from \"../../../../../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nimport { undividedOwnershipType } from \"../../../../../ChatbotComponent/Helper/Enums/ChatStepTypes\";\r\nimport { InheritanceCalculation } from \"../../../../InheritanceCalculation\";\r\nimport { currencyFormatNO } from \"../../../../pdf_utils\";\r\n\r\nconst undivided_estate_results = (value: InheritanceCalculation) => {\r\n  const finalresult = \"\";\r\n  const first_partly_separate = value.state.undividedEstate.temp_first;\r\n  const testator_name = getPerson(\r\n    value.state.testator._id,\r\n    value.state.personsMap\r\n  )._personName;\r\n  const second_partly_separate = value.state.undividedEstate.temp_last;\r\n  const undivided_spouse_name = getPerson(\r\n    value.state.undividedSpouseId,\r\n    value.state.personsMap\r\n  )._personName;\r\n  const testator_wealth = currencyFormatNO(value.state.netWealth);\r\n  const undivided_estate_separate_wealth = currencyFormatNO(\r\n    value.state.undividedEstate.undividedEstateSeparateWealth\r\n  );\r\n  if (value.state.undividedEstate.undividedEstateChoice) {\r\n    finalresult.concat(\"<Text>Arvelater satt i uskiftet bo. </Text\");\r\n    if (\r\n      value.state.undividedEstate.ownershipType ===\r\n      undividedOwnershipType.felleseie\r\n    ) {\r\n      finalresult.concat(\r\n        `<Text>Det uskiftede boet var utelukkende felleseie. Boet verdier fordeles likt på førstavdødes og sistavdødes arvinger, ${value.state.undividedEstate.undividedEstateSeparateWealth} på hver gruppe.</Text>`\r\n      );\r\n    } else if (\r\n      value.state.undividedEstate.ownershipType ===\r\n      undividedOwnershipType.delvis\r\n    ) {\r\n      finalresult.concat(\r\n        `<Text>Det uskiftede boet var delvis særeie. Førstavdødes (${undivided_spouse_name}) særeie hadde en verdi på ${first_partly_separate}, mens sistavødedes (${testator_name}) særeie hadde en verdi på ${second_partly_separate}. Verdiene som fordeles blant førstavdødes (${undivided_spouse_name}) arvinger er ${testator_wealth}, mens verdiene som fordeles blant sistavdødes (${testator_name})  arvinger er ${undivided_estate_separate_wealth}.</Text>`\r\n      );\r\n    } else if (\r\n      value.state.undividedEstate.ownershipType === undividedOwnershipType.fullt\r\n    ) {\r\n      finalresult.concat(\r\n        `<Text>Det uskiftede boet var fullt særeie. Verdiene som fordeles blant førstavdødes (${undivided_spouse_name})  arvinger er ${testator_wealth}, mens verdiene som fordeles blant sistavdødes (${testator_name}) arvinger er ${undivided_estate_separate_wealth}.</Text>`\r\n      );\r\n    } else {\r\n      console.log(\"check for problem, untroduction.utils.ts\");\r\n    }\r\n  }\r\n  return finalresult;\r\n};\r\n\r\nexport const IntroductionUtils = (value: InheritanceCalculation) => {\r\n  const currencyFormatted = currencyFormatNO(value.state.netWealth);\r\n\r\n  const testatorName = getPerson(1, value.state.personsMap)._personName;\r\n  return {\r\n    currencyFormatted: currencyFormatted,\r\n    testatorName: testatorName,\r\n  };\r\n};\r\n","// import { TableContainer, Table, Paper } from \"@mui/material\";\r\nimport {\r\n  DataTableCell,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHeader,\r\n} from \"@david.kucsai/react-pdf-table\";\r\nimport { styles } from \"../../../styles\";\r\nimport { summaryValueType } from \"../summary/Summary\";\r\n\r\nexport const TableElement = (props: {\r\n  summaryValue: Array<summaryValueType>;\r\n}) => {\r\n  const summaryVal = props.summaryValue;\r\n  return (\r\n    <Table data={summaryVal}>\r\n      <TableHeader>\r\n        <TableCell style={styles.tableHeaderRow}>Person-id</TableCell>\r\n        <TableCell style={styles.tableHeaderRow}>Type</TableCell>\r\n        <TableCell style={styles.tableHeaderRow}>Beløp</TableCell>\r\n      </TableHeader>\r\n      <TableBody>\r\n        <DataTableCell\r\n          style={styles.tableDataRow}\r\n          getContent={(r) => r.survivorName}\r\n        />\r\n        <DataTableCell\r\n          style={styles.tableDataRow}\r\n          getContent={(r) => r.survivorType}\r\n        />\r\n        <DataTableCell\r\n          style={styles.tableDataRow}\r\n          getContent={(r) => r.belopAmount}\r\n        />\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n","import { TableElement } from \"../react-pdf-table/Table\";\r\nimport { currencyFormatNO } from \"../../../../pdf_utils\";\r\nimport { summaryValueType } from \"./Summary\";\r\nimport { InheritanceCalculation } from \"../../../../InheritanceCalculation\";\r\nimport { getPerson } from \"../../../../../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nimport { styles } from \"../../../styles\";\r\nimport { Text } from \"@react-pdf/renderer\";\r\nimport { PliktdelsarvCalculation } from \"../../../../PliktdelsarvCalculation\";\r\n\r\nexport const SummaryUtils = (\r\n  value: InheritanceCalculation | PliktdelsarvCalculation\r\n): JSX.Element => {\r\n  const summaryValues = getSummaryValues(value);\r\n  const table = <TableElement summaryValue={summaryValues} />;\r\n  const emptyTableCase = (\r\n    <Text style={styles.paragraph}>Table not available</Text>\r\n  );\r\n  return summaryValues.length > 0 ? table : emptyTableCase;\r\n};\r\n\r\nexport const getSummaryValues = (\r\n  value: InheritanceCalculation | PliktdelsarvCalculation\r\n): Array<summaryValueType> => {\r\n  const summaryValue: Array<summaryValueType> = [];\r\n  if (value.survivor !== null) {\r\n    const survivor_name = getPerson(\r\n      value.survivor,\r\n      value.state.personsMap\r\n    )._personName;\r\n    const belopAmount = currencyFormatNO(value.survivor_inheritance_sum);\r\n    summaryValue[0] = {\r\n      survivorName: survivor_name,\r\n      survivorType: value.survivor_type,\r\n      belopAmount: belopAmount,\r\n    };\r\n  }\r\n  for (const gen_inherit of value.genealogy_inheritance) {\r\n    if (gen_inherit) {\r\n      const summaryCell = {\r\n        survivorName: gen_inherit.person,\r\n        survivorType: `Slekt i ${value.class_closest}. arvegangsklasse`,\r\n        belopAmount: currencyFormatNO(gen_inherit.frac),\r\n      };\r\n      summaryValue.push(summaryCell);\r\n    }\r\n  }\r\n  if (\r\n    value.genealogy_inheritance_sum > 0 &&\r\n    (value.class_closest === undefined ||\r\n      (value.class_closest === 3 &&\r\n        value.distance_closest &&\r\n        value.distance_closest > 2))\r\n  ) {\r\n    summaryValue[0] = {\r\n      survivorName: \"-\",\r\n      survivorType: \"Frivillig arbeid\",\r\n      belopAmount: currencyFormatNO(value.genealogy_inheritance_sum),\r\n    };\r\n  }\r\n  return summaryValue;\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport { styles } from \"../../../styles\";\r\nimport { SummaryUtils } from \"./Summary.utils\";\r\n\r\nexport type summaryValueType = {\r\n  survivorName: string;\r\n  survivorType: string;\r\n  belopAmount: string;\r\n};\r\n\r\nexport const initialSummaryValue = {\r\n  survivorName: \"\",\r\n  survivorType: \"\",\r\n  belopAmount: \"\",\r\n};\r\n\r\nexport const Summary = (props: { inheritanceMode: boolean }): JSX.Element => {\r\n  const value = useContext(UserContext).inheritanceCalculation;\r\n  if (props.inheritanceMode) {\r\n    const summaryTable = SummaryUtils(value);\r\n\r\n    return (\r\n      <View style={styles.section} wrap={false}>\r\n        <Text style={styles.paragraphHeading}>Sammendrag</Text>\r\n        <View style={styles.marginTop}>{summaryTable}</View>\r\n      </View>\r\n    );\r\n  } else {\r\n    const value = useContext(UserContext).pliktdelsarvCalculation;\r\n    const summaryPliktTable = SummaryUtils(value);\r\n    return (\r\n      <View style={styles.section} wrap={false}>\r\n        <Text style={styles.paragraphHeading}>Sammendrag</Text>\r\n        <View style={styles.marginTop}>{summaryPliktTable}</View>\r\n      </View>\r\n    );\r\n  }\r\n};\r\n","import { Text } from '@react-pdf/renderer';\r\nimport { getPerson } from '../../../../../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods';\r\nimport InheritanceConstants from '../../../../../ChatbotComponent/Helper/Methods/InheritanceConstants';\r\nimport { InheritanceCalculation } from '../../../../InheritanceCalculation';\r\nimport { PliktdelsarvCalculation } from '../../../../PliktdelsarvCalculation';\r\nimport { styles } from '../../../styles';\r\nimport { add_legal_references, currencyFormatNO } from '../../../../pdf_utils';\r\nimport { Bold } from '../text-styles/Bold';\r\n\r\nconst SurvivingPartnerUtils = (\r\n    value: InheritanceCalculation | PliktdelsarvCalculation,\r\n) => {\r\n    let survivor_name = 'Fix error';\r\n    if (value.survivor) {\r\n        survivor_name = getPerson(\r\n            value.survivor,\r\n            value.state.personsMap,\r\n        )._personName;\r\n    }\r\n\r\n    const survivor_inheritance_sum = currencyFormatNO(\r\n        value.survivor_inheritance_sum,\r\n    );\r\n    const genealogy_inheritance_sum = currencyFormatNO(\r\n        value.genealogy_inheritance_sum,\r\n    );\r\n\r\n    const inheritanceDescriptiveText = getInheritanceDescriptiveText(\r\n        value.descriptive_text,\r\n        survivor_name,\r\n        survivor_inheritance_sum,\r\n        genealogy_inheritance_sum,\r\n        value instanceof InheritanceCalculation,\r\n    );\r\n    const legalReferenceTextArray = add_legal_references(\r\n        value.surviving_reference_paragraphs,\r\n        InheritanceConstants.CODE_PARAGRAPHS,\r\n        InheritanceConstants.LAW_LINKS,\r\n    );\r\n    const pliktSpecificText = (\r\n        <Text style={styles.paragraph}>\r\n            OBS! Nye regler for samboer - sjekk ut{'\\n\\n'}\r\n        </Text>\r\n    );\r\n\r\n    return (\r\n        <Text>\r\n            <Text style={styles.paragraphHeading}>\r\n                Gjenlevende ektefelle eller samboer {'\\n'}\r\n                {value instanceof InheritanceCalculation\r\n                    ? ''\r\n                    : pliktSpecificText}\r\n            </Text>\r\n            <Text style={styles.paragraph}>{inheritanceDescriptiveText}</Text>\r\n            {legalReferenceTextArray.map((legalReferenceText) => (\r\n                <Text\r\n                    key={legalReferenceTextArray.indexOf(legalReferenceText)}\r\n                    style={styles.paragraph}\r\n                >\r\n                    {legalReferenceText}\r\n                </Text>\r\n            ))}\r\n        </Text>\r\n    );\r\n};\r\n\r\nconst getInheritanceDescriptiveText = (\r\n    descriptive_text: string,\r\n    survivor_name: string,\r\n    survivor_inheritance_sum: string,\r\n    genealogy_inheritance_sum: string,\r\n    valueType: boolean,\r\n) => {\r\n    if (\r\n        [\r\n            InheritanceConstants.DESC_NO_SPOUSE_OR_COHABITANT,\r\n            InheritanceConstants.DESC_COHABITANT_WITHOUT_COMMON_CHILD,\r\n        ].includes(descriptive_text)\r\n    ) {\r\n        return <Text style={styles.paragraph}>{descriptive_text}</Text>;\r\n    } else if (\r\n        [\r\n            InheritanceConstants.DESC_SPOUSE_NO_CLOSE_RELATIVES,\r\n            InheritanceConstants.DESC_SPOUSE_NO_CLOSE_RELATIVES_2,\r\n            InheritanceConstants.DESC_COHABITANT_NO_CLOSE_RELATIVES,\r\n            InheritanceConstants.DESC_COHABITANT_NO_CLOSE_RELATIVES_2,\r\n        ].includes(descriptive_text)\r\n    ) {\r\n        const inheritanceSpecificTextIf = (\r\n            <Text style={styles.paragraph}>\r\n                {descriptive_text} Den etterlatte har person-id{' '}\r\n                <Bold>{survivor_name}</Bold>. Arv til gjenlevende er{' '}\r\n                {survivor_inheritance_sum}.\r\n            </Text>\r\n        );\r\n\r\n        const pliktSpecificTextIf = (\r\n            <Text>\r\n                {descriptive_text} Den etterlatte har person-id{' '}\r\n                <Bold>{survivor_name}</Bold>. Minstearv til gjenlevende er{' '}\r\n                {survivor_inheritance_sum}.\r\n            </Text>\r\n        );\r\n        return valueType ? inheritanceSpecificTextIf : pliktSpecificTextIf;\r\n    } else {\r\n        const inheritanceSpecificTextElse = (\r\n            <Text style={styles.paragraph}>\r\n                {' '}\r\n                {descriptive_text} Den etterlatte har person-id{' '}\r\n                <Bold>{survivor_name}</Bold>. Arv til gjenlevende er{' '}\r\n                <Bold>{survivor_inheritance_sum}</Bold>, og de resterende{' '}\r\n                <Bold>{genealogy_inheritance_sum}</Bold> går til slekten.\r\n            </Text>\r\n        );\r\n        const pliktSpecificTextElse = (\r\n            <Text style={styles.paragraph}>\r\n                {' '}\r\n                {descriptive_text} Den etterlatte har person-id{' '}\r\n                <Bold>{survivor_name}</Bold>. Minstearv til gjenlevende er{' '}\r\n                <Bold>{survivor_inheritance_sum}</Bold>.\r\n            </Text>\r\n        );\r\n        return valueType ? inheritanceSpecificTextElse : pliktSpecificTextElse;\r\n    }\r\n};\r\n\r\nexport default SurvivingPartnerUtils;\r\n","import { View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport { styles } from \"../../../styles\";\r\nimport SurvivingPartnerUtils from \"./SurvivingPartner.utils\";\r\n\r\nexport const SurvivingPartner = (props: {\r\n  inheritanceMode: boolean;\r\n}): JSX.Element => {\r\n  if (props.inheritanceMode) {\r\n    const value = useContext(UserContext).inheritanceCalculation;\r\n\r\n    const survivingPartnerParagraph = SurvivingPartnerUtils(value);\r\n\r\n    return (\r\n      <View style={styles.section} wrap={false}>\r\n        {survivingPartnerParagraph}\r\n      </View>\r\n    );\r\n  } else {\r\n    const value = useContext(UserContext).pliktdelsarvCalculation;\r\n    const survivingPartnerParagraph = SurvivingPartnerUtils(value);\r\n    return (\r\n      <View style={styles.section} wrap={false}>\r\n        {survivingPartnerParagraph}\r\n      </View>\r\n    );\r\n  }\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { Genealogy } from \"../common/genealogy/Genealogy\";\r\nimport { IntroductionPage } from \"../common/introSection/IntroductionPage\";\r\nimport { Summary } from \"../common/summary/Summary\";\r\nimport { SurvivingPartner } from \"../common/survivingPartner/SurvivingPartner\";\r\n\r\n/* SurvivingPartner -> Gjenlevende ektefelle eller samboer\r\n   Genealogy -> Slektsarv\r\n   Summary -> Sammendrag\r\n*/\r\n\r\nexport const FirstSection = (): JSX.Element => {\r\n  return (\r\n    <View style={styles.section}>\r\n      <IntroductionPage inheritanceMode />\r\n      <Text style={styles.subheading}>Beregnet arv i fravær av testament</Text>\r\n      <SurvivingPartner inheritanceMode />\r\n      <Genealogy inheritanceMode />\r\n      <Summary inheritanceMode />\r\n    </View>\r\n  );\r\n};\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { getPerson } from \"../../../../../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nimport InheritanceConstants from \"../../../../../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { UndividedCalculation } from \"../../../../UndividedCalculation\";\r\nimport { styles } from \"../../../styles\";\r\nimport {\r\n  add_legal_reference,\r\n  currencyFormatNO,\r\n  unravel_chains_to_string,\r\n} from \"../../../../pdf_utils\";\r\nimport { TableElement } from \"../../common/react-pdf-table/Table\";\r\nimport { summaryValueType } from \"../../common/summary/Summary\";\r\nimport { Bold } from \"../../common/text-styles/Bold\";\r\n\r\nexport const getUndividedRelativeText = (\r\n  value: UndividedCalculation\r\n): JSX.Element => {\r\n  let returnValue;\r\n  if (value.genealogy_inheritance_sum === 0) {\r\n    returnValue = <Text>Det er ingen slektsarv igjen å fordele.</Text>;\r\n  } else if (\r\n    value.class_closest === undefined ||\r\n    (value.class_closest === 3 &&\r\n      value.distance_closest &&\r\n      value.distance_closest > 2)\r\n  ) {\r\n    const code_paragraph1 = \"6 første ledd, andre punktum\";\r\n    const code_paragraph2 = \"76 første ledd, første punktum\";\r\n    const legalReference1 = add_legal_reference(\r\n      code_paragraph1,\r\n      InheritanceConstants.CODE_PARAGRAPHS,\r\n      InheritanceConstants.LAW_LINKS\r\n    );\r\n    const legalReference2 = add_legal_reference(\r\n      code_paragraph2,\r\n      InheritanceConstants.CODE_PARAGRAPHS,\r\n      InheritanceConstants.LAW_LINKS\r\n    );\r\n\r\n    returnValue = (\r\n      <Text>\r\n        <Text>Testator har ingen nære slektninger.</Text>\r\n        <Text>{legalReference1}</Text>\r\n        <Text style={styles.paragraphHeading}>Frivillig arbeid</Text>\r\n        <Text>\r\n          <Bold>${currencyFormatNO(value.genealogy_inheritance_sum)}</Bold>{\" \"}\r\n          <Text>vil gå til frivillig arbeid til fordel for barn og unge.</Text>\r\n          <Text>{legalReference2}</Text>\r\n        </Text>\r\n      </Text>\r\n    );\r\n  } else {\r\n    let code_paragraph = \"\";\r\n    let endSentence = \"\";\r\n    if (value.class_closest === 1) {\r\n      code_paragraph = \"4 første og annet ledd\";\r\n      endSentence = \" (livsarvinger/etterkommere av arvelater).\";\r\n    } else if (value.class_closest === 2) {\r\n      code_paragraph = \"5 første, andre og tredje ledd\";\r\n      endSentence = \" (arvelaters foreldre og deres etterkommere).\";\r\n    } else if (value.class_closest === 3) {\r\n      code_paragraph = \"6 første og annet ledd\";\r\n      endSentence = \" (arvelaters besteforeldre og deres etterkommere).\";\r\n    } else {\r\n      throw new Error(\"wrong class_closest value\");\r\n    }\r\n    const legalReferenceText = add_legal_reference(\r\n      code_paragraph,\r\n      InheritanceConstants.CODE_PARAGRAPHS,\r\n      InheritanceConstants.LAW_LINKS\r\n    );\r\n\r\n    const unraveledText = value.genealogy_inheritance.map(\r\n      (genealogy_inheritance_unit) => {\r\n        <Text>\r\n          <Text>Person med person-id</Text>\r\n          <Bold>{genealogy_inheritance_unit.person}</Bold>{\" \"}\r\n          <Text>arver totalt</Text>{\" \"}\r\n          <Bold>{genealogy_inheritance_unit.frac}</Bold>\r\n          <Text>\r\n            `${unravel_chains_to_string([genealogy_inheritance_unit.chains])}\r\n            .\\n`\r\n          </Text>\r\n        </Text>;\r\n      }\r\n    );\r\n\r\n    returnValue = (\r\n      <Text>\r\n        <Text>De gjenværende</Text>{\" \"}\r\n        <Bold>{currencyFormatNO(value.genealogy_inheritance_sum)}</Bold>{\" \"}\r\n        <Text>\r\n          fordeles på slekten slik at det blir likt på hver gren i den aktuelle\r\n          arvegangsklasse.\r\n        </Text>{\" \"}\r\n        <Text>\r\n          `Nærmeste levende slektning er i arvegangsklasse $\r\n          {value.class_closest} ${endSentence}`\r\n        </Text>\r\n        <Text>{legalReferenceText}</Text>\r\n        <Text>{unraveledText}</Text>\r\n      </Text>\r\n    );\r\n  }\r\n  return returnValue;\r\n};\r\n\r\nexport const getUndividedSummaryTable = (\r\n  value: UndividedCalculation\r\n): JSX.Element => {\r\n  const summaryValues = getSummaryValues(value);\r\n  const table = <TableElement summaryValue={summaryValues} />;\r\n  return table;\r\n};\r\n\r\nconst getSummaryValues = (\r\n  value: UndividedCalculation\r\n): Array<summaryValueType> => {\r\n  const summaryValue: Array<summaryValueType> = [];\r\n  let survivor_name = \"\";\r\n  let survivor_type = \"\";\r\n  let belop_amount = \"\";\r\n  if (value.survivor) {\r\n    survivor_name = getPerson(\r\n      value.survivor,\r\n      value.state.personsMap\r\n    )._personName;\r\n\r\n    survivor_type = value.survivor_type;\r\n    belop_amount = currencyFormatNO(value.genealogy_inheritance_sum);\r\n  }\r\n  summaryValue.push({\r\n    survivorName: survivor_name,\r\n    survivorType: survivor_type,\r\n    belopAmount: belop_amount,\r\n  });\r\n\r\n  value.genealogy_inheritance.map((gen_inherit) => {\r\n    summaryValue.push({\r\n      survivorName: gen_inherit.person,\r\n      survivorType: `Slekt i ${value.class_closest}. arvegangsklasse`,\r\n      belopAmount: currencyFormatNO(gen_inherit.frac),\r\n    });\r\n  });\r\n\r\n  if (\r\n    value.genealogy_inheritance_sum > 0 &&\r\n    (value.class_closest === undefined ||\r\n      (value.class_closest === 3 &&\r\n        value.distance_closest &&\r\n        value.distance_closest > 2))\r\n  ) {\r\n    summaryValue.push({\r\n      survivorName: `-`,\r\n      survivorType: `Frivillig arbeid`,\r\n      belopAmount: currencyFormatNO(value.genealogy_inheritance_sum),\r\n    });\r\n  }\r\n  return summaryValue;\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport { styles } from \"../../../styles\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport {\r\n  getUndividedRelativeText,\r\n  getUndividedSummaryTable,\r\n} from \"./UndividedEstateCalculationUtils\";\r\nimport { UndividedCalculation } from \"../../../../UndividedCalculation\";\r\n\r\nexport const UndividedEstateCalculation = (): JSX.Element => {\r\n  const value = useContext(UserContext).undividedCalculation;\r\n  let undividedResult: JSX.Element;\r\n  if (value.state.undividedEstate.undividedEstateChoice) {\r\n    const addUndividedEstateRelatives = add_undivided_estate_relatives(value);\r\n    const addUndividedEstateSummary = add_undivided_estate_summary(value);\r\n    undividedResult = (\r\n      <Text>\r\n        <Text>{addUndividedEstateRelatives}</Text>\r\n        {\"\\n\"}\r\n        <Text>{addUndividedEstateSummary}</Text>\r\n      </Text>\r\n    );\r\n  } else {\r\n    undividedResult = (\r\n      <Text style={styles.paragraph}>Ingen uskiftesituasjon</Text>\r\n    );\r\n  }\r\n  return (\r\n    <View style={styles.section} break>\r\n      <Text style={styles.subheading}>Legg til introduksjon her</Text>\r\n      <Text style={styles.paragraph}>{undividedResult}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst add_undivided_estate_relatives = (\r\n  value: UndividedCalculation\r\n): JSX.Element => {\r\n  const UndividedRelativeText = getUndividedRelativeText(value);\r\n  return (\r\n    <Text style={styles.paragraph}>\r\n      <Text style={styles.paragraphHeading}>Slektsarv</Text>\r\n      {\"\\n\"}\r\n      <Text>{UndividedRelativeText}</Text>\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst add_undivided_estate_summary = (\r\n  value: UndividedCalculation\r\n): JSX.Element => {\r\n  const UndividedSummaryTable = getUndividedSummaryTable(value);\r\n  return (\r\n    <Text style={styles.paragraph}>\r\n      <Text style={styles.paragraphHeading}>Sammendrag</Text>\r\n      {\"\\n\"}\r\n      <Text>{UndividedSummaryTable}</Text>\r\n    </Text>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { UndividedEstateCalculation } from \"./UndividedEstateCalculation/UndividedEstateCalculation\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../FinalDocument\";\r\nexport const SecondSection = () => {\r\n  const value = useContext(UserContext).inheritanceCalculation;\r\n\r\n  const undividedStateElement = (\r\n    <View style={styles.section} wrap={false}>\r\n      <Text style={styles.subheading}>Uskiftearv</Text>\r\n      <UndividedEstateCalculation />\r\n    </View>\r\n  );\r\n  {\r\n    const secondSectionElement = value.state.undividedEstate\r\n      .undividedEstateChoice ? (\r\n      undividedStateElement\r\n    ) : (\r\n      <Text></Text>\r\n    );\r\n    return secondSectionElement;\r\n  }\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { Genealogy } from \"../common/genealogy/Genealogy\";\r\nimport { IntroductionPage } from \"../common/introSection/IntroductionPage\";\r\nimport { Summary } from \"../common/summary/Summary\";\r\nimport { SurvivingPartner } from \"../common/survivingPartner/SurvivingPartner\";\r\n\r\n/* SurvivingPartner -> Gjenlevende ektefelle eller samboer\r\n   Genealogy -> Slektsarv\r\n   Summary -> Sammendrag\r\n*/\r\n\r\nexport const ThirdSection = (): JSX.Element => {\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.subheading}>Pliktdelsarv</Text>\r\n      <IntroductionPage inheritanceMode={false} />\r\n      <SurvivingPartner inheritanceMode={false} />\r\n      <Genealogy inheritanceMode={false} />\r\n      <Summary inheritanceMode={false} />\r\n    </View>\r\n  );\r\n};\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport InheritanceConstants from \"../../../../../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { styles } from \"../../../styles\";\r\nimport { addLovdataLink } from \"../../../../pdf_utils\";\r\n\r\nconst generalReservationsUtils = () => {\r\n  return {\r\n    uskifteText: getUskifteText(),\r\n    testamentText: getTestamentText(),\r\n    avkortingText: getavkortingText(),\r\n    barnText: getBarnText(),\r\n  };\r\n};\r\n\r\nconst getUskifteText = () => (\r\n  <Text style={styles.paragraph}>\r\n    <Text style={styles.paragraphHeading}>Uskifte</Text>\r\n    {\"\\n\"}\r\n    <Text>Beregningene forutsetter at avdøde ikke sitter i uskiftet bo.</Text>\r\n  </Text>\r\n);\r\n\r\nconst getTestamentText = () => (\r\n  <Text style={styles.paragraph}>\r\n    <Text style={styles.paragraphHeading}>Testament</Text>\r\n    {\"\\n\"}\r\n    <Text>\r\n      Beregningene forutsetter at avdøde ikke etterlater seg testament.\r\n    </Text>\r\n  </Text>\r\n);\r\n\r\nconst getavkortingText = () => {\r\n  const code_paragraph = \"75 første ledd\";\r\n  const lovdata_link = addLovdataLink(\r\n    code_paragraph,\r\n    InheritanceConstants.LAW_LINKS\r\n  );\r\n  return (\r\n    <Text style={styles.paragraph}>\r\n      <Text style={styles.paragraphHeading}>Avkorting i arv</Text>\r\n      {\"\\n\"}\r\n      <Text>\r\n        Bestemmelsene om avkorting i arvelovens § 75 er ikke tatt hensyn til i\r\n        bergningene.\r\n      </Text>\r\n      {\"\\n\"}\r\n      <Text style={styles.redText}>\r\n        Det er særlig viktig å være OBS på mulig avkorting dersom det har blitt\r\n        gitt forskudd på arv.{\"\\n\"}\r\n      </Text>\r\n      <Text>{lovdata_link}</Text>\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst getBarnText = () => {\r\n  const code_paragraph = \"7\";\r\n  return (\r\n    <Text style={styles.paragraph}>\r\n      <Text style={styles.paragraphHeading}>Barn</Text>\r\n      {\"\\n\"}\r\n      <Text>Vær obs på de særskilte bestemmelsene i arveloven § 7.</Text>\r\n      <Text>\r\n        {addLovdataLink(code_paragraph, InheritanceConstants.LAW_LINKS)}\r\n      </Text>\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport default generalReservationsUtils;\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\nimport generalReservationsUtils from \"./GeneralReservationsUtils\";\r\n\r\nexport const GeneralReservations = (): JSX.Element => {\r\n  const generalReservationsText = generalReservationsUtils();\r\n  return (\r\n    <View style={styles.section} wrap={false}>\r\n      <Text style={styles.paragraphHeading}>Generelle forbehold</Text>\r\n      {\"\\n\\n\"}\r\n      {generalReservationsText.uskifteText}\r\n      {\"\\n\\n\"}\r\n      {generalReservationsText.testamentText}\r\n      {\"\\n\\n\"}\r\n      {generalReservationsText.avkortingText}\r\n      {\"\\n\\n\"}\r\n      {generalReservationsText.barnText}\r\n      {\"\\n\\n\"}\r\n    </View>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { useContext } from \"react\";\r\nimport InheritanceConstants from \"../../../../../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport { UserContext } from \"../../../FinalDocument\";\r\nimport { styles } from \"../../../styles\";\r\nimport { currencyFormatNO } from \"../../../../pdf_utils\";\r\nimport { Bold } from \"../../common/text-styles/Bold\";\r\n\r\nexport const NationalInsurance = (): JSX.Element => {\r\n  const NationalInsuranceText = getNationalInsuranceString();\r\n  return (\r\n    <View style={styles.section} wrap={false}>\r\n      <Text style={styles.paragraphHeading}>Folketrygdens grunnbeløp</Text>\r\n      <Text style={styles.paragraph}>{NationalInsuranceText}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst getNationalInsuranceString = () => {\r\n  // const value = useContext(UserContext).inheritanceCalculation;\r\n  return (\r\n    <Text wrap={false}>\r\n      <Text>\r\n        Enkelte terskelverdier beregnes utfra det til enhver tid gjeldende\r\n        grunnbeløp i folketrygden. I beregningene er det forutsatt at\r\n        grunnbeløpet i folketrygden er på{\" \"}\r\n      </Text>\r\n      <Bold>{currencyFormatNO(InheritanceConstants.G)}</Bold>.\r\n    </Text>\r\n  );\r\n};\r\n","import { Text, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport { GeneralReservations } from \"./generalReservations/GeneralReservations\";\r\nimport { NationalInsurance } from \"./nationalInsurance/NationalInsurance\";\r\n\r\nexport const FourthSection = (): JSX.Element => {\r\n  return (\r\n    <View style={styles.section}>\r\n      <Text style={styles.subheading}>Merknader og forbehold{\"\\n\\n\"}</Text>\r\n      <NationalInsurance />\r\n      <GeneralReservations />\r\n    </View>\r\n  );\r\n};\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const Footer = (): JSX.Element => {\r\n  return (\r\n    <Text\r\n      style={styles.pageNumber}\r\n      render={({ pageNumber, totalPages }) => `${pageNumber} / ${totalPages}`}\r\n      fixed\r\n    />\r\n  );\r\n};\r\n","import { Text } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../../styles\";\r\n\r\nexport const Header = (): JSX.Element => {\r\n  return (\r\n    <Text style={styles.header} fixed>\r\n      Arvebot\r\n    </Text>\r\n  );\r\n};\r\n","import { Image, View } from \"@react-pdf/renderer\";\r\nimport { styles } from \"../../styles\";\r\nimport domtoimage from \"dom-to-image\";\r\nimport { useState } from \"react\";\r\n\r\nexport const FifthSection = (): JSX.Element => {\r\n  const [url, setUrl] = useState(\"src/assets/images/arvebot-logo.png\");\r\n  const node = document.querySelector(\".react-flow\") as Node;\r\n  domtoimage\r\n    .toPng(node, {\r\n      filter: (node: Node): boolean => {\r\n        // we don't want to add the minimap and the controls to the image\r\n\r\n        if (\r\n          (node as HTMLElement)?.classList?.contains(\"react-flow__minimap\") ||\r\n          (node as HTMLElement)?.classList?.contains(\"react-flow__controls\")\r\n        ) {\r\n          return false;\r\n        }\r\n        return true;\r\n      },\r\n    })\r\n    .then(function (dataUrl: any) {\r\n      setUrl(dataUrl);\r\n    })\r\n    .catch(function (error: any) {\r\n      console.error(\"oops, something went wrong!\", error);\r\n    });\r\n  return (\r\n    <View style={styles.imageView} wrap={false}>\r\n      <Image style={styles.image} src={url} />\r\n    </View>\r\n  );\r\n};\r\n","import { Document, Page } from \"@react-pdf/renderer\";\r\nimport { FirstSection } from \"./Sections/firstSection/FirstSection\";\r\nimport { SecondSection } from \"./Sections/secondSection/SecondSection\";\r\nimport { ThirdSection } from \"./Sections/thirdSection/ThirdSection\";\r\nimport { FourthSection } from \"./Sections/fourthSection/FourthSection\";\r\nimport { styles } from \"./styles\";\r\nimport { Footer } from \"./Sections/common/fixedSection/Footer\";\r\nimport { Header } from \"./Sections/common/fixedSection/Header\";\r\nimport { createContext } from \"react\";\r\nimport { InheritanceCalculation } from \"../InheritanceCalculation\";\r\nimport \"react-pdf/dist/umd/Page/AnnotationLayer.css\";\r\nimport { PliktdelsarvCalculation } from \"../PliktdelsarvCalculation\";\r\nimport { UndividedCalculation } from \"../UndividedCalculation\";\r\nimport { FifthSection } from \"./Sections/fifthSection/fifthSection\";\r\n\r\ninterface FinalObjectInput {\r\n  inheritanceCalculation: InheritanceCalculation;\r\n  pliktdelsarvCalculation: PliktdelsarvCalculation;\r\n  undividedCalculation: UndividedCalculation;\r\n}\r\n\r\nexport const UserContext = createContext(\r\n  {} as {\r\n    inheritanceCalculation: InheritanceCalculation;\r\n    pliktdelsarvCalculation: PliktdelsarvCalculation;\r\n    undividedCalculation: UndividedCalculation;\r\n  }\r\n);\r\n// First Section - Introduction, Inheritance\r\n// Second Section - Uskiftearv\r\n// Third Section - Pliktdelsarv\r\n// Fourth Section - Merknader og forbehold\r\nconst FinalDocument = (props: { inputData: FinalObjectInput }): JSX.Element => {\r\n  return (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page} wrap>\r\n        <UserContext.Provider\r\n          value={{\r\n            inheritanceCalculation: props.inputData.inheritanceCalculation,\r\n            pliktdelsarvCalculation: props.inputData.pliktdelsarvCalculation,\r\n            undividedCalculation: props.inputData.undividedCalculation,\r\n          }}\r\n        >\r\n          <Header />\r\n          <FirstSection />\r\n          <SecondSection />\r\n          <ThirdSection />\r\n          <FourthSection />\r\n          <FifthSection />\r\n          <Footer />\r\n        </UserContext.Provider>\r\n      </Page>\r\n    </Document>\r\n  );\r\n};\r\nexport default FinalDocument;\r\n","import { ChatbotInterface } from \"../ChatbotComponent/Generics\";\r\nimport { NodeEntity } from \"../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nimport InheritanceConstants from \"../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport ActionProvider from \"../ChatbotComponent/ActionProvider\";\r\nimport { ReportCalculationBase } from \"./ReportCalculationBase\";\r\nimport { getNode } from \"../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\n\r\nexport class PliktdelsarvCalculation extends ReportCalculationBase {\r\n  state: ChatbotInterface;\r\n  actionProvider: ActionProvider;\r\n  person: NodeEntity;\r\n  constructor(\r\n    person: NodeEntity,\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface,\r\n    will = undefined\r\n  ) {\r\n    super(person, actionProvider, state, 3, will);\r\n    this.state = state;\r\n    this.actionProvider = actionProvider;\r\n    this.person = getNode(person._id, this.state.nodeMap);\r\n    this.will = will;\r\n  }\r\n\r\n  // computeInheritance = () => {\r\n  //   //\r\n  // };\r\n\r\n  // computeGenealogyInheritance = (person_id: number) => {\r\n  //   this.survivor_inheritance_sum = Math.min(\r\n  //     this.state.netWealth,\r\n  //     this.minimum_surviving_inheritance\r\n  //   );\r\n\r\n  //   this.genealogy_inheritance_sum = Math.min(\r\n  //     this.state.netWealth - this.survivor_inheritance_sum,\r\n  //     this.state.netWealth * InheritanceConstants.FRACTION_PLIKTDEL,\r\n  //     InheritanceConstants.LINE_MAXIMUM_PLIKTDEL *\r\n  //       this.state.testator._children.length\r\n  //   );\r\n  //   if (this.genealogy_inheritance_sum !== 0) {\r\n  //     this.splits_with_chains = this.reportUtils.split_evenly_between_lines(\r\n  //       this.state.testator._children\r\n  //     );\r\n\r\n  //     const genealogy_splits = this.reportUtils.combine_duplicates(\r\n  //       this.splits_with_chains\r\n  //     );\r\n\r\n  //     genealogy_splits.map((genealogy_split: any) => {\r\n  //       return this.genealogy_inheritance.push({\r\n  //         person: genealogy_split.person,\r\n  //         frac: genealogy_split.frac * this.genealogy_inheritance_sum,\r\n  //         chains: genealogy_split.chains,\r\n  //       });\r\n  //     });\r\n  //   } else {\r\n  //     this.splits_with_chains = [];\r\n  //     this.genealogy_splits = splits_initial;\r\n  //     this.genealogy_inheritance = [splits_initial];\r\n  //   }\r\n  //   return this.genealogy_inheritance;\r\n  // };\r\n}\r\n","import { ChatbotInterface } from \"../ChatbotComponent/Generics\";\r\nimport { NodeEntity } from \"../ChatbotComponent/Helper/Classes/NodeEntity\";\r\nimport Norsk from \"../../../languages/translationNO.json\";\r\nimport { createIntl, createIntlCache } from \"react-intl\";\r\nimport InheritanceConstants from \"../ChatbotComponent/Helper/Methods/InheritanceConstants\";\r\nimport ActionProvider from \"../ChatbotComponent/ActionProvider\";\r\nimport { ReportCalculationBase } from \"./ReportCalculationBase\";\r\nimport {\r\n  getNode,\r\n  get_class_and_distance_closest_surviving_relative,\r\n} from \"../ChatbotComponent/ActionProviderMethods/OtherChatbotMethods\";\r\nconst cache = createIntlCache();\r\nconst intl = createIntl({ locale: \"nb-NO\", messages: Norsk }, cache);\r\nexport class UndividedCalculation extends ReportCalculationBase {\r\n  survivor: number | null = null;\r\n\r\n  constructor(\r\n    person: NodeEntity,\r\n    actionProvider: ActionProvider,\r\n    state: ChatbotInterface\r\n  ) {\r\n    super(person, actionProvider, state, 2);\r\n    this.state = state;\r\n    this.actionProvider = actionProvider;\r\n    this.person = getNode(person._id, this.state.nodeMap);\r\n  }\r\n\r\n  // computeGenealogyInheritance = () => {\r\n  //   this.survivor_inheritance_sum = Math.min(\r\n  //     this.state.netWealth,\r\n  //     Math.max(\r\n  //       this.minimum_surviving_inheritance,\r\n  //       this.surviving_fraction * this.state.netWealth\r\n  //     )\r\n  //   );\r\n  //   this.genealogy_inheritance_sum =\r\n  //     this.state.netWealth - this.survivor_inheritance_sum;\r\n  //   if (this.genealogy_inheritance_sum !== 0) {\r\n  //     this.splits_with_chains =\r\n  //       this.reportUtils.compute_default_genealogy_splits_with_chains(\r\n  //         this.person\r\n  //       );\r\n\r\n  //     const genealogy_splits = this.reportUtils.combine_duplicates(\r\n  //       this.splits_with_chains\r\n  //     );\r\n  //   } else {\r\n  //     this.splits_with_chains = [];\r\n  //     this.genealogy_inheritance = [];\r\n  //   }\r\n  //   return this.genealogy_inheritance;\r\n  // };\r\n}\r\n","import { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport { InheritanceCalculation } from '../../Reports/InheritanceCalculation';\r\nimport FinalDocument from '../../Reports/PDF/FinalDocument';\r\nimport { PliktdelsarvCalculation } from '../../Reports/PliktdelsarvCalculation';\r\nimport { UndividedCalculation } from '../../Reports/UndividedCalculation';\r\nimport ActionProvider from '../ActionProvider';\r\nimport { ChatbotInterface } from '../Generics';\r\nimport { NodeEntity } from '../Helper/Classes/NodeEntity';\r\nimport Person from '../Helper/Classes/Person';\r\nimport { ChatStepTypes, QuestionType } from '../Helper/Enums/ChatStepTypes';\r\nimport { ParentChildSelector } from '../Helper/Enums/ParentChildSelector';\r\nimport InheritanceConstants from '../Helper/Methods/InheritanceConstants';\r\nimport QuestionConstants from '../Helper/Methods/QuestionConstants';\r\nimport { handleUndividedStep } from './UndividedEstateMethods';\r\n\r\nexport const handleFinalQuestionDef = (\r\n    res: boolean,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    if (res) {\r\n        const document = computeInheritances(state, actionProvider);\r\n        const pdfDownloadLink = (\r\n            <div>\r\n                <PDFDownloadLink\r\n                    document={document}\r\n                    fileName={\r\n                        getPerson(state.testator._id, state.personsMap)\r\n                            ._personName\r\n                    }\r\n                >\r\n                    {({ blob, url, loading, error }) =>\r\n                        loading ? 'Loading document...' : 'Download now!'\r\n                    }\r\n                </PDFDownloadLink>\r\n            </div>\r\n        );\r\n        const pdfLink = actionProvider.createChatBotMessage(pdfDownloadLink);\r\n        console.log(pdfLink);\r\n\r\n        actionProvider.addMessageToBotState(pdfLink);\r\n\r\n        console.log('prepare report and download');\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nconst computeInheritances = (\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n): JSX.Element => {\r\n    const inheritanceCalculation = new InheritanceCalculation(\r\n        state.person,\r\n        actionProvider,\r\n        state,\r\n    );\r\n    inheritanceCalculation.computeMethod(1);\r\n    inheritanceCalculation.computeGenealogyInheritance(\r\n        state.testator._id,\r\n        state,\r\n    );\r\n\r\n    const pliktdelsarvCalculation = new PliktdelsarvCalculation(\r\n        state.person,\r\n        actionProvider,\r\n        state,\r\n    );\r\n    pliktdelsarvCalculation.computeMethod(2);\r\n    pliktdelsarvCalculation.computeGenealogyPliktInheritance(\r\n        state.testator._id,\r\n        state,\r\n    );\r\n\r\n    const undividedCalculation = new UndividedCalculation(\r\n        state.person,\r\n        actionProvider,\r\n        state,\r\n    );\r\n    undividedCalculation.computeMethod(3);\r\n    const document = (\r\n        <FinalDocument\r\n            inputData={{\r\n                inheritanceCalculation: inheritanceCalculation,\r\n                pliktdelsarvCalculation: pliktdelsarvCalculation,\r\n                undividedCalculation: undividedCalculation,\r\n            }}\r\n        />\r\n    );\r\n    return document;\r\n};\r\n\r\nexport const handleClosingStep = (\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n    isSecondParent = true,\r\n) => {\r\n    switch (state.stepID) {\r\n        case ChatStepTypes.successorStep:\r\n            actionProvider.closestSurvivingRelativeChildren();\r\n            break;\r\n        case ChatStepTypes.parentsStep:\r\n            state.temp_person = state.person;\r\n            actionProvider.closestSurvivingRelativeParents(isSecondParent);\r\n            break;\r\n        case ChatStepTypes.undividedEstateStep:\r\n            state.temp_person = state.person;\r\n            handleUndividedStep(state, actionProvider, isSecondParent);\r\n            break;\r\n        case ChatStepTypes.grandParentStep:\r\n            state.temp_person = getNode(\r\n                state.deceasedParentsArray[0],\r\n                state.nodeMap,\r\n            );\r\n            actionProvider.closestSurvivingRelativeGrandParents(true);\r\n            break;\r\n\r\n        case ChatStepTypes.testatorOtherChildStep:\r\n            actionProvider.askUnderAgeQuestion();\r\n    }\r\n};\r\n\r\nexport const handleClosestSurvivingRelativeChildren = (\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const testator = state.person;\r\n    const testatorDetail = Person.getPerson(testator._id, state.personsMap);\r\n    const temp_class_testator =\r\n        get_class_and_distance_closest_surviving_relative(\r\n            state.testator,\r\n            state,\r\n        )[0];\r\n\r\n    if (\r\n        state.person !== state.testator &&\r\n        state.testator._undividedEstateSpouse\r\n    ) {\r\n        if (!(temp_class_testator && temp_class_testator !== 1)) {\r\n            state = {\r\n                ...state,\r\n                parent_flag: QuestionType.part1,\r\n                successor_flag: QuestionType.initialQuestion,\r\n                isUndividedParent: true,\r\n            };\r\n            const newParentQuestion = actionProvider.createChatBotMessage(\r\n                QuestionConstants.addParentsQuestion1(\r\n                    testatorDetail._personName,\r\n                ),\r\n            );\r\n            actionProvider.addMessageToBotState(newParentQuestion);\r\n            return actionProvider.returnState(state);\r\n        }\r\n    }\r\n\r\n    if (temp_class_testator === 1) {\r\n        state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.rearChildrenStep,\r\n        };\r\n\r\n        actionProvider.askFinalQuestion();\r\n        return actionProvider.returnState(state);\r\n    }\r\n\r\n    if (\r\n        testator._spouse !== null &&\r\n        state.netWealth <=\r\n            InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_PARENTS\r\n    ) {\r\n        actionProvider.askFinalQuestion();\r\n        return actionProvider.returnState(state);\r\n    }\r\n\r\n    if (\r\n        testator._cohabitant !== null &&\r\n        state.netWealth <=\r\n            InheritanceConstants.MINIMUM_INHERITANCE_COHABITANT_VS_PARENTS\r\n    ) {\r\n        actionProvider.askFinalQuestion();\r\n        return actionProvider.returnState(state);\r\n    }\r\n    state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.parentsStep,\r\n        parent_flag: QuestionType.part1,\r\n        temp_person: state.testator,\r\n        successor_flag: QuestionType.initialQuestion,\r\n    };\r\n    const newParentQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.addParentsQuestion1(testatorDetail._personName),\r\n    );\r\n    actionProvider.addMessageToBotState(newParentQuestion);\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleClosestSurvivingRelativeParents = (\r\n    isSecondParent: boolean,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    if (isSecondParent && state.temp_person._parents.length < 2) {\r\n        // TODO\r\n        state.successor_flag = QuestionType.initialQuestion;\r\n        state.parent_flag = QuestionType.part3;\r\n        const personName = getPerson(\r\n            state.temp_person._id,\r\n            state.personsMap,\r\n        )._personName;\r\n        const secondParentChoiceQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.askSecondParentChoiceQuestion(`${personName}`),\r\n            QuestionConstants.YesNoWidgetOptions,\r\n        );\r\n        actionProvider.addMessageToBotState(secondParentChoiceQuestion);\r\n        return actionProvider.returnState(state);\r\n    }\r\n\r\n    if (state.person._spouse !== null) {\r\n        actionProvider.askFinalQuestion();\r\n        return actionProvider.returnState(state);\r\n    }\r\n    const temp_class = get_class_and_distance_closest_surviving_relative(\r\n        state.person,\r\n        state,\r\n    )[0];\r\n    const eitherParentsDeceased =\r\n        state.person._parents.filter((p_id) => {\r\n            return Person.getPerson(p_id, state.personsMap)._deceased;\r\n        }).length !== 0;\r\n    const personDetail = Person.getPerson(state.person._id, state.personsMap);\r\n\r\n    if (\r\n        state.person._parents.length === 2 &&\r\n        eitherParentsDeceased &&\r\n        temp_class === 2\r\n    ) {\r\n        const parent1Detail = Person.getPerson(\r\n            state.person._parents[0],\r\n            state.personsMap,\r\n        );\r\n        const parent2Detail = Person.getPerson(\r\n            state.person._parents[1],\r\n            state.personsMap,\r\n        );\r\n        if (!personDetail._underAge) {\r\n            actionProvider.askFinalQuestion();\r\n            return actionProvider.returnState(state);\r\n        }\r\n        if (state.person._parents.length !== 2) {\r\n            actionProvider.askFinalQuestion();\r\n            return actionProvider.returnState(state);\r\n        }\r\n\r\n        if (parent1Detail._deceased) {\r\n            state = {\r\n                ...state,\r\n                stepID: ChatStepTypes.marriedParentsStep,\r\n            };\r\n            const marriedParentsQn = actionProvider.createChatBotMessage(\r\n                QuestionConstants.MarriedParents1(\r\n                    parent1Detail._personName,\r\n                    parent2Detail._personName,\r\n                ),\r\n            );\r\n            actionProvider.addMessageToBotState(marriedParentsQn);\r\n            return actionProvider.returnState(state);\r\n        } else {\r\n            state = {\r\n                ...state,\r\n                stepID: ChatStepTypes.marriedParentsStep,\r\n            };\r\n            const marriedParentsQn = actionProvider.createChatBotMessage(\r\n                QuestionConstants.MarriedParents2(\r\n                    parent1Detail._personName,\r\n                    parent2Detail._personName,\r\n                ),\r\n            );\r\n            actionProvider.addMessageToBotState(marriedParentsQn);\r\n            return actionProvider.returnState(state);\r\n        }\r\n    } else {\r\n        actionProvider.grandParentFirst();\r\n        return actionProvider.returnState(state);\r\n    }\r\n};\r\n\r\nexport const handleClosestSurvivingRelativeGrandParens = (\r\n    isSecondParent: boolean,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    if (isSecondParent && state.temp_person._parents.length < 2) {\r\n        // TODO\r\n        state.successor_flag = QuestionType.initialQuestion;\r\n        state.parent_flag = QuestionType.part3;\r\n        const grandparentName = getPerson(\r\n            state.temp_person._id,\r\n            state.personsMap,\r\n        );\r\n        const secondParentChoiceQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.askSecondParentChoiceQuestion(\r\n                `${grandparentName._personName}`,\r\n            ),\r\n            QuestionConstants.YesNoWidgetOptions,\r\n        );\r\n        actionProvider.addMessageToBotState(secondParentChoiceQuestion);\r\n        return actionProvider.returnState(state);\r\n    }\r\n    state.deceasedParentsArray = state.deceasedParentsArray.filter(\r\n        (item) => item !== state.deceasedParentsArray[0],\r\n    );\r\n    actionProvider.askForNextGrandParent();\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nconst surviving_successor_distance = (\r\n    node: NodeEntity,\r\n    state: any,\r\n): number | undefined => {\r\n    const nodeDetail: Person = Person.getPerson(node._id, state.personsMap);\r\n\r\n    if (nodeDetail._deceased === false) return 0;\r\n    else if (node._children.length === 0) return undefined;\r\n    else {\r\n        const possible_distances: Array<number> = [];\r\n        for (const child_id of node._children) {\r\n            const temp = surviving_successor_distance(\r\n                NodeEntity.getNode(child_id, state.nodeMap),\r\n                state,\r\n            );\r\n            if (temp != undefined) {\r\n                possible_distances.push(1 + temp);\r\n            }\r\n        }\r\n        if (possible_distances.length === 0) return undefined;\r\n        else return Math.min(...possible_distances);\r\n    }\r\n};\r\n\r\nexport const get_class_and_distance_closest_surviving_relative = (\r\n    testatorNode: NodeEntity,\r\n    state: any,\r\n): [number | undefined, number | undefined] => {\r\n    const distance = surviving_successor_distance(testatorNode, state);\r\n    if (distance !== undefined) return [1, distance];\r\n    else if (testatorNode._parents.length == 0) return [undefined, undefined];\r\n    else {\r\n        const alternatives: Array<Array<number | undefined>> = [];\r\n        for (const parent_id of testatorNode._parents) {\r\n            alternatives.push(\r\n                get_class_and_distance_closest_surviving_relative(\r\n                    NodeEntity.getNode(parent_id, state.nodeMap),\r\n                    state,\r\n                ),\r\n            );\r\n        }\r\n\r\n        alternatives.sort((a, b) => {\r\n            if (a[0] != undefined && b[0] != undefined) return a[0] - b[0];\r\n            if (a[0] == undefined && b[0] != undefined) return 1;\r\n            return -1;\r\n        });\r\n        const [closest_alternative_class, closest_alternative_distance] =\r\n            alternatives[0];\r\n\r\n        if (closest_alternative_class == undefined) {\r\n            return [undefined, undefined];\r\n        }\r\n        return [closest_alternative_class + 1, closest_alternative_distance];\r\n    }\r\n};\r\n\r\nexport const createNewPerson = (\r\n    personID: string,\r\n    state: any,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const newPerson = new Person(\r\n        personID,\r\n        actionProvider.generateNextID(state.id),\r\n    );\r\n    state.personsMap.set(newPerson._id, newPerson);\r\n    const newNode = new NodeEntity(newPerson._id, 0);\r\n    state.nodeMap.set(newNode._id, newNode);\r\n    return newNode;\r\n};\r\nexport const createEmptyNode = (state: any, id: number) => {\r\n    const newPerson = new Person('', id);\r\n    state.personsMap.set(newPerson._id, newPerson);\r\n    const newNode = new NodeEntity(newPerson._id, 0);\r\n    state.nodeMap.set(newNode._id, newNode);\r\n    return newNode;\r\n};\r\nexport const createTestator = (\r\n    personID: string,\r\n    state: any,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const newPerson = new Person(\r\n        personID,\r\n        actionProvider.generateNextID(state.id),\r\n    );\r\n    newPerson._deceased = true;\r\n    state.personsMap.set(newPerson._id, newPerson);\r\n    const newNode = new NodeEntity(newPerson._id, 0);\r\n    newNode._path.push([ParentChildSelector.testator, newPerson._id]);\r\n    state.nodeMap.set(newNode._id, newNode);\r\n    return newNode;\r\n};\r\n\r\nexport const getPerson = (id: number, personMap: Map<number, Person>) => {\r\n    const person: Person | undefined = personMap.get(id);\r\n    if (person == undefined) {\r\n        throw new Error('Person not found with given id:' + id);\r\n    }\r\n    return person;\r\n};\r\n\r\nexport const getNode = (id: number, nodeMap: Map<number, NodeEntity>) => {\r\n    const node: NodeEntity | undefined = nodeMap.get(id);\r\n    if (node == undefined) {\r\n        throw new Error('Node not found with given id:' + id);\r\n    }\r\n    return node;\r\n};\r\n","import ActionProvider from '../ActionProvider';\r\nimport InfoMessagesWidget from '../Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget';\r\nimport { ChatbotInterface } from '../Generics';\r\nimport Person from '../Helper/Classes/Person';\r\nimport {\r\n    ChatStepTypes,\r\n    QuestionType,\r\n    undividedOwnershipType,\r\n} from '../Helper/Enums/ChatStepTypes';\r\nimport { ParentChildSelector } from '../Helper/Enums/ParentChildSelector';\r\nimport {\r\n    CurrencyOutput,\r\n    ParseCurrencyStringForOutput,\r\n} from '../Helper/Methods/HandleCurrency';\r\nimport QuestionConstants from '../Helper/Methods/QuestionConstants';\r\nimport {\r\n    createNewPerson,\r\n    getNode,\r\n    getPerson,\r\n    get_class_and_distance_closest_surviving_relative,\r\n} from './OtherChatbotMethods';\r\n\r\nexport const undividedEstateChoice = (\r\n    undividedEstateChoiceResponse: boolean,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    if (undividedEstateChoiceResponse) {\r\n        state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.undividedEstateStep,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part1,\r\n                undividedEstateChoice: undividedEstateChoiceResponse,\r\n            },\r\n        };\r\n        const totalEstateNetValueQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.TotalEstateNetValueQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(totalEstateNetValueQuestion);\r\n    } else {\r\n        state = {\r\n            ...state,\r\n            stepID: ChatStepTypes.netWealthStep,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: 'none',\r\n                undividedEstateChoice: undividedEstateChoiceResponse,\r\n            },\r\n        };\r\n        const netWealthQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.NetWealthQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(netWealthQuestion);\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const totalEstateValue = (\r\n    totalEstateValueResponse: string,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const totalEstateValueQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.TotalEstateNetValueQuestion,\r\n    );\r\n    const currencyIntResponse = CurrencyOutput(totalEstateValueResponse);\r\n    const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1],\r\n    );\r\n    const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n    if (currencyIntResponse[0] === 5) {\r\n        const ownershipTypeQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.OwnershipTypeQuestion,\r\n            QuestionConstants.OwnershipQuestionWidgetOptions,\r\n        );\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part2,\r\n                totalEstateValue: parseInt(currencyIntResponse[1]),\r\n            },\r\n        };\r\n        const currencyCustom = actionProvider.createClientMessage(currencyJSX);\r\n        actionProvider.addMessageToBotState(currencyCustom);\r\n        actionProvider.addMessageToBotState(ownershipTypeQuestion);\r\n    } else {\r\n        const totalEstateWarning = actionProvider.createChatBotMessage(\r\n            QuestionConstants.TotalEstateNetValueWarning,\r\n        );\r\n\r\n        actionProvider.addMessageToBotState(totalEstateWarning);\r\n        actionProvider.addMessageToBotState(totalEstateValueQuestion);\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const undividedOwnershipResponse = (\r\n    ownershipResponse: string,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    if (ownershipResponse === undividedOwnershipType.felleseie) {\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part6,\r\n                undividedEstateSeparateWealth:\r\n                    state.undividedEstate.totalEstateValue / 2,\r\n                ownershipType: undividedOwnershipType.felleseie,\r\n            },\r\n\r\n            netWealth: state.undividedEstate.totalEstateValue / 2,\r\n        };\r\n        if (state.undividedEstate.undividedEstateSeparateWealth > 0) {\r\n            const undividedEstateSpouseQuestion =\r\n                actionProvider.createChatBotMessage(\r\n                    QuestionConstants.UndividedEstateSpouseQuestion,\r\n                );\r\n            actionProvider.addMessageToBotState(undividedEstateSpouseQuestion);\r\n        } else {\r\n            if (\r\n                state.person !== state.testator &&\r\n                state.person._undividedEstateSpouse\r\n            ) {\r\n                const temp_class_undivided_spouse =\r\n                    get_class_and_distance_closest_surviving_relative(\r\n                        getNode(\r\n                            state.person._undividedEstateSpouse,\r\n                            state.nodeMap,\r\n                        ),\r\n                        state,\r\n                    )[0];\r\n                if (temp_class_undivided_spouse === undefined) {\r\n                    state.netWealth =\r\n                        state.netWealth +\r\n                        state.undividedEstate.undividedEstateSeparateWealth;\r\n                    state.undividedEstate.undividedEstateSeparateWealth = 0;\r\n                }\r\n\r\n                if (state.netWealth <= 0) {\r\n                    actionProvider.askFinalQuestion();\r\n                } else {\r\n                    actionProvider.setState((state: ChatbotInterface) => {\r\n                        state.stepID = ChatStepTypes.underAgeStep;\r\n                    });\r\n                    const underAgeQuestion =\r\n                        actionProvider.createChatBotMessage(\r\n                            QuestionConstants.UnderAgeQuestion,\r\n                            QuestionConstants.YesNoWidgetOptions,\r\n                        );\r\n                    actionProvider.addMessageToBotState(underAgeQuestion);\r\n                    return actionProvider.returnState(state);\r\n                }\r\n            }\r\n        }\r\n    } else if (ownershipResponse === 'DELVIS SÆREIE') {\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part3,\r\n            },\r\n        };\r\n        const delvisFirstQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.DelvisFirstQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(delvisFirstQuestion);\r\n    } else if (ownershipResponse === 'FULLT SÆREIE') {\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part5,\r\n            },\r\n        };\r\n        const fulltSaereieQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.FulltSaereieQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(fulltSaereieQuestion);\r\n    } else {\r\n        const ownershipTypeWarning = actionProvider.createChatBotMessage(\r\n            QuestionConstants.OwnershipTypeWarning,\r\n        );\r\n        const ownershipTypeQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.OwnershipTypeQuestion,\r\n            QuestionConstants.OwnershipQuestionWidgetOptions,\r\n        );\r\n        actionProvider.addMessageToBotState(ownershipTypeWarning);\r\n        actionProvider.addMessageToBotState(ownershipTypeQuestion);\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const delvisFirstResponse = (\r\n    response: string,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const currencyIntResponse = CurrencyOutput(response);\r\n    const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1],\r\n    );\r\n    const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n    if (currencyIntResponse[0] === 5) {\r\n        const currencyCustom = actionProvider.createClientMessage(currencyJSX);\r\n        actionProvider.addMessageToBotState(currencyCustom);\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part4,\r\n                temp_first: parseInt(currencyIntResponse[1]),\r\n            },\r\n        };\r\n        const delvisSecondQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.DelvisSecondQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(delvisSecondQuestion);\r\n    } else {\r\n        const netWealthWarning = actionProvider.createChatBotMessage(\r\n            QuestionConstants.NetWealthWarning,\r\n        );\r\n        const delvisFirstQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.DelvisFirstQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(netWealthWarning);\r\n        actionProvider.addMessageToBotState(delvisFirstQuestion);\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const delvisSecondResponse = (\r\n    res: string,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const currencyIntResponse = CurrencyOutput(res);\r\n    const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1],\r\n    );\r\n    const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n    if (currencyIntResponse[0] === 5) {\r\n        const currencyCustom = actionProvider.createClientMessage(currencyJSX);\r\n        actionProvider.addMessageToBotState(currencyCustom);\r\n        state.undividedEstate.temp_last = parseInt(currencyIntResponse[1]);\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part6,\r\n                undividedEstateSeparateWealth:\r\n                    (state.undividedEstate.totalEstateValue -\r\n                        state.undividedEstate.temp_last -\r\n                        state.undividedEstate.temp_first) /\r\n                        2 +\r\n                    state.undividedEstate.temp_first,\r\n            },\r\n            netWealth:\r\n                (state.undividedEstate.totalEstateValue -\r\n                    state.undividedEstate.temp_last -\r\n                    state.undividedEstate.temp_first) /\r\n                    2 +\r\n                state.undividedEstate.temp_last,\r\n        };\r\n        const undividedEstateSpouseQuestion =\r\n            actionProvider.createChatBotMessage(\r\n                QuestionConstants.UndividedEstateSpouseQuestion,\r\n            );\r\n        actionProvider.addMessageToBotState(undividedEstateSpouseQuestion);\r\n    } else {\r\n        const netWealthWarning = actionProvider.createChatBotMessage(\r\n            QuestionConstants.NetWealthWarning,\r\n        );\r\n        const delvisSecondQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.DelvisSecondQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(netWealthWarning);\r\n        actionProvider.addMessageToBotState(delvisSecondQuestion);\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const delvisFulltResponse = (\r\n    res: string,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const currencyIntResponse = CurrencyOutput(res);\r\n    const currencyStringResponse = ParseCurrencyStringForOutput(\r\n        currencyIntResponse[1],\r\n    );\r\n    const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n    if (currencyIntResponse[0] === 5) {\r\n        const currencyCustom = actionProvider.createClientMessage(currencyJSX);\r\n        actionProvider.addMessageToBotState(currencyCustom);\r\n        state = {\r\n            ...state,\r\n            undividedEstate: {\r\n                ...state.undividedEstate,\r\n                undivided_flag: QuestionType.part6,\r\n                undividedEstateSeparateWealth:\r\n                    state.undividedEstate.totalEstateValue - parseInt(res),\r\n            },\r\n            netWealth: parseInt(res),\r\n        };\r\n        if (state.undividedEstate.undividedEstateSeparateWealth > 0) {\r\n            const undividedEstateSpouseQuestion =\r\n                actionProvider.createChatBotMessage(\r\n                    QuestionConstants.UndividedEstateSpouseQuestion,\r\n                );\r\n            actionProvider.addMessageToBotState(undividedEstateSpouseQuestion);\r\n        }\r\n    } else {\r\n        const netWealthWarning = actionProvider.createChatBotMessage(\r\n            QuestionConstants.NetWealthWarning,\r\n        );\r\n        const fulltSaereieQuestion = actionProvider.createChatBotMessage(\r\n            QuestionConstants.FulltSaereieQuestion,\r\n        );\r\n        actionProvider.addMessageToBotState(netWealthWarning);\r\n        actionProvider.addMessageToBotState(fulltSaereieQuestion);\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nexport const undividedEstateSpouse = (\r\n    res: string,\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    const undividedSpouseID = res;\r\n\r\n    const newUndividedSpouse = createNewPerson(\r\n        undividedSpouseID,\r\n        state,\r\n        actionProvider,\r\n    );\r\n\r\n    state.person = newUndividedSpouse;\r\n    state.testator._undividedEstateSpouse = newUndividedSpouse._id;\r\n    state.testator.setPathforPartner(\r\n        ParentChildSelector.undividedSpouse,\r\n        newUndividedSpouse,\r\n    );\r\n    const newUndividedSpouseDetail = Person.getPerson(\r\n        newUndividedSpouse._id,\r\n        state.personsMap,\r\n    );\r\n    newUndividedSpouseDetail._deceased = true;\r\n    const textBeforeSucsrUndvdSpouse = actionProvider.createChatBotMessage(\r\n        QuestionConstants.TextBeforeSucsrUndvdSpouse,\r\n    );\r\n    actionProvider.addMessageToBotState(textBeforeSucsrUndvdSpouse);\r\n    state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.undividedEstateStep,\r\n        successor_flag: QuestionType.part3,\r\n        temp_person: newUndividedSpouse,\r\n        undividedSpouseId: newUndividedSpouse._id,\r\n    };\r\n    newUndividedSpouse._partnerNode = state.testator._id;\r\n    const newSuccessorTogetherQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.undividedChildrenTogetherCount(),\r\n    );\r\n    actionProvider.addMessageToBotState(newSuccessorTogetherQuestion);\r\n    return actionProvider.returnState(state);\r\n};\r\nexport const handleUndividedStep = (\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n    isTwoParent: boolean,\r\n) => {\r\n    const testator = state.person;\r\n    const testatorDetail = Person.getPerson(testator._id, state.personsMap);\r\n    if (state.undividedEstate.undivided_flag === QuestionType.part6) {\r\n        state.undividedEstate.undivided_flag = QuestionType.part7;\r\n        state.person._partnerNode = null;\r\n        state.successor_flag = QuestionType.part3;\r\n        const newSuccessorUndvdSpouseQuestion =\r\n            actionProvider.createChatBotMessage(\r\n                QuestionConstants.undvdSpouseOtherSuccessorQuestion(),\r\n            );\r\n        actionProvider.addMessageToBotState(newSuccessorUndvdSpouseQuestion);\r\n    } else if (state.undividedEstate.undivided_flag === QuestionType.part7) {\r\n        const temp_class_undivided_spouse =\r\n            get_class_and_distance_closest_surviving_relative(\r\n                getNode(state.person._id, state.nodeMap),\r\n                state,\r\n            )[0];\r\n        if (temp_class_undivided_spouse !== 1) {\r\n            // ask parent of und spouse question\r\n            state.undividedEstate.undivided_flag = QuestionType.part8;\r\n            state.parent_flag = QuestionType.part1;\r\n            state.temp_person = state.person;\r\n            const newParentQuestion = actionProvider.createChatBotMessage(\r\n                QuestionConstants.addParentsQuestion1(\r\n                    testatorDetail._personName,\r\n                ),\r\n            );\r\n            actionProvider.addMessageToBotState(newParentQuestion);\r\n        } else {\r\n            askTestatorOtherChildrenQuestion(state, actionProvider);\r\n        }\r\n    } else {\r\n        if (isTwoParent && state.temp_person._parents.length < 2) {\r\n            state.successor_flag = QuestionType.initialQuestion;\r\n            state.parent_flag = QuestionType.part3;\r\n            const personName = getPerson(\r\n                state.temp_person._id,\r\n                state.personsMap,\r\n            )._personName;\r\n            const secondParentChoiceQuestion =\r\n                actionProvider.createChatBotMessage(\r\n                    QuestionConstants.askSecondParentChoiceQuestion(\r\n                        `${personName}`,\r\n                    ),\r\n                    QuestionConstants.YesNoWidgetOptions,\r\n                );\r\n            actionProvider.addMessageToBotState(secondParentChoiceQuestion);\r\n            return actionProvider.returnState(state);\r\n        }\r\n        if (state.testator._undividedEstateSpouse) {\r\n            const temp_class_undivided_spouse =\r\n                get_class_and_distance_closest_surviving_relative(\r\n                    getNode(\r\n                        state.testator._undividedEstateSpouse,\r\n                        state.nodeMap,\r\n                    ),\r\n                    state,\r\n                )[0];\r\n            if (temp_class_undivided_spouse === undefined) {\r\n                state.netWealth =\r\n                    state.netWealth +\r\n                    state.undividedEstate.undividedEstateSeparateWealth;\r\n                state.undividedEstate.undividedEstateSeparateWealth = 0;\r\n            }\r\n            if (state.netWealth <= 0) {\r\n                actionProvider.askFinalQuestion();\r\n                return state;\r\n            } else {\r\n                askTestatorOtherChildrenQuestion(state, actionProvider);\r\n            }\r\n        }\r\n    }\r\n    return actionProvider.returnState(state);\r\n};\r\n\r\nconst askTestatorOtherChildrenQuestion = (\r\n    state: ChatbotInterface,\r\n    actionProvider: ActionProvider,\r\n) => {\r\n    state.stepID = ChatStepTypes.testatorOtherChildStep;\r\n    state.successor_flag = QuestionType.part3;\r\n    state.person = state.testator;\r\n    state.temp_person = state.testator;\r\n    const testatorOtherSuccessorQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.testatorOtherSuccessorQuestion(),\r\n    );\r\n    actionProvider.addMessageToBotState(testatorOtherSuccessorQuestion);\r\n};\r\n","import ActionProvider from \"../ActionProvider\";\r\nimport { ChatbotInterface } from \"../Generics\";\r\nimport { NodeEntity } from \"../Helper/Classes/NodeEntity\";\r\nimport Person from \"../Helper/Classes/Person\";\r\nimport { ChatStepTypes, QuestionType } from \"../Helper/Enums/ChatStepTypes\";\r\nimport QuestionConstants from \"../Helper/Methods/QuestionConstants\";\r\nimport {\r\n  createEmptyNode,\r\n  createNewPerson,\r\n  getNode,\r\n  getPerson,\r\n  get_class_and_distance_closest_surviving_relative,\r\n  handleClosingStep,\r\n} from \"./OtherChatbotMethods\";\r\n\r\nexport const handleSuccessorCnt = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const successorCount = parseInt(res);\r\n  state.temp_person._childCount = successorCount;\r\n  if (successorCount === 0) {\r\n    const parentID = state.temp_person.getParentId(state.nodeMap);\r\n    if (parentID) {\r\n      const parent = getNode(parentID, state.nodeMap);\r\n      state.temp_person = parent;\r\n      const successorProcessArray = state.successorProcessArray;\r\n      handleNoSuccessorCase(state, successorProcessArray, actionProvider);\r\n    } else {\r\n      handleClosingStep(state, actionProvider);\r\n    }\r\n    return actionProvider.returnState(state);\r\n  }\r\n\r\n  const questionType = state.temp_person._children.length === 0;\r\n  let itr_id = state.id;\r\n  for (let i = 0; i < state.temp_person._childCount; i++) {\r\n    const child = createEmptyNode(state, itr_id++);\r\n    state.temp_person.add_child(child, true);\r\n    if (state.temp_person._partnerNode !== null) {\r\n      const currentPartnerNode = getNode(\r\n        state.temp_person._partnerNode,\r\n        state.nodeMap\r\n      );\r\n      currentPartnerNode.add_child(child, true, true);\r\n      currentPartnerNode.updateProcessChildNodePos();\r\n    }\r\n  }\r\n  state.id = itr_id;\r\n  if (\r\n    state.successorProcessArray.filter((t) => t[0] === state.temp_person._level)\r\n      .length === 0\r\n  ) {\r\n    state.successorProcessArray.push([state.temp_person._level, 1]);\r\n  }\r\n\r\n  state.successor_flag = QuestionType.part1;\r\n  const personName = getPerson(\r\n    state.temp_person._id,\r\n    state.personsMap\r\n  )._personName;\r\n  if (questionType) {\r\n    const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addSuccessorQuestion1(personName)\r\n    );\r\n    actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n  } else {\r\n    const allChildrenID = actionProvider.getParentChildrenIDStrings(\r\n      state.temp_person._children,\r\n      state\r\n    );\r\n    const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addSuccessorQuestion2(personName, allChildrenID)\r\n    );\r\n    actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleSuccessorInput = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const childID = state.temp_person.getChildUnprocessedNode();\r\n  if (childID) {\r\n    const child = getNode(childID, state.nodeMap);\r\n    const childDetail = getPerson(childID, state.personsMap);\r\n    childDetail._personName = res;\r\n    state = {\r\n      ...state,\r\n      successor_flag: QuestionType.part2,\r\n      temp_child: child,\r\n    };\r\n\r\n    const personId: any = Person.getPerson(\r\n      child._id,\r\n      state.personsMap\r\n    )?._personName;\r\n    const aliveQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.AliveQuestion(personId),\r\n      QuestionConstants.YesNoWidgetOptions\r\n    );\r\n    actionProvider.addMessageToBotState(aliveQuestion);\r\n    // }\r\n    return actionProvider.returnState(state);\r\n  } else {\r\n    // error case\r\n    console.log(\"Count of children exceeded\");\r\n  }\r\n};\r\n\r\nconst handleNoSuccessorCase = (\r\n  state: ChatbotInterface,\r\n  successorProcessArray: Array<[number, number]>,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const childItrPos =\r\n    successorProcessArray[successorProcessArray.length - 1][1];\r\n  if (childItrPos) {\r\n    if (state.temp_person._childCount > childItrPos) {\r\n      successorProcessArray[successorProcessArray.length - 1][1] =\r\n        childItrPos + 1;\r\n      // ask childid question\r\n      state.successor_flag = QuestionType.part1;\r\n      const allChildrenID = actionProvider.getParentChildrenIDStrings(\r\n        state.temp_person._children,\r\n        state\r\n      );\r\n      const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.addSuccessorQuestion2(\r\n          getPerson(state.temp_person._id, state.personsMap)._personName,\r\n          allChildrenID\r\n        )\r\n      );\r\n      actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n      return actionProvider.returnState(state);\r\n    } else if (state.temp_person._childCount === childItrPos) {\r\n      let currentParentID = state.temp_person._id;\r\n      let currentParent = NodeEntity.getNode(currentParentID, state.nodeMap);\r\n\r\n      let isCurrentParentID = true;\r\n      while (\r\n        successorProcessArray[successorProcessArray.length - 1][1] ===\r\n        currentParent._childCount\r\n      ) {\r\n        successorProcessArray.pop();\r\n        // current parent update\r\n        const currentId = currentParent.getParentId(state.nodeMap);\r\n        if (currentId) {\r\n          currentParentID = currentId;\r\n          currentParent = NodeEntity.getNode(currentParentID, state.nodeMap);\r\n        } else {\r\n          isCurrentParentID = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!isCurrentParentID) {\r\n        // exit case\r\n        handleClosingStep(state, actionProvider);\r\n      } else {\r\n        successorProcessArray[successorProcessArray.length - 1][1] =\r\n          successorProcessArray[successorProcessArray.length - 1][1] + 1;\r\n        // ask childid question\r\n        state.temp_person = currentParent;\r\n        const currentParentDetail = getPerson(\r\n          currentParentID,\r\n          state.personsMap\r\n        );\r\n        state.successor_flag = QuestionType.part1;\r\n        const allChildrenID = actionProvider.getParentChildrenIDStrings(\r\n          currentParent._children,\r\n          state\r\n        );\r\n        const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n          QuestionConstants.addSuccessorQuestion2(\r\n            currentParentDetail._personName,\r\n            allChildrenID\r\n          )\r\n        );\r\n        actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n        return actionProvider.returnState(state);\r\n      }\r\n    } else {\r\n      throw new Error(\"state.temp_person._childCount < childItrPos case\");\r\n    }\r\n  } else {\r\n    throw new Error(\"childItrPos is null\");\r\n  }\r\n};\r\n\r\nexport const handleChildAliveOption = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const child = state.temp_child;\r\n  const childDetail = getPerson(child._id, state.personsMap);\r\n  // const temp_person: NodeEntity = state.temp_person\r\n  const successorProcessArray = state.successorProcessArray;\r\n  if (res) {\r\n    childDetail._deceased = false;\r\n    handleNoSuccessorCase(state, successorProcessArray, actionProvider);\r\n  } else {\r\n    // not alive\r\n    childDetail._deceased = true;\r\n    if (state.stepID === ChatStepTypes.grandParentStep) {\r\n      const generationCount = child.getGenerationCount();\r\n      if (generationCount === 2) {\r\n        handleNoSuccessorCase(state, successorProcessArray, actionProvider);\r\n        return actionProvider.returnState(state);\r\n      }\r\n    }\r\n    state = {\r\n      ...state,\r\n      successor_flag: QuestionType.part3,\r\n      temp_person: child,\r\n    };\r\n    const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addSuccessorCount(childDetail._personName)\r\n    );\r\n    actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n    return actionProvider.returnState(state);\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleSecondParentExists = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  if (res) {\r\n    const temp_person = state.temp_person;\r\n    state = {\r\n      ...state,\r\n      parent_flag: QuestionType.part1,\r\n    };\r\n    const allParentsID = actionProvider.getParentChildrenIDStrings(\r\n      temp_person._parents,\r\n      state\r\n    );\r\n    const temp_person_detail = getPerson(temp_person._id, state.personsMap);\r\n    const newParentQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addParentsQuestion2(\r\n        temp_person_detail._personName,\r\n        allParentsID\r\n      )\r\n    );\r\n    actionProvider.addMessageToBotState(newParentQuestion);\r\n  } else {\r\n    handleClosingStep(state, actionProvider, false);\r\n    // if (state.stepID !== ChatStepTypes.grandParentStep) {\r\n    //   actionProvider.closestSurvivingRelativeParents(false);\r\n    // } else {\r\n    //   actionProvider.closestSurvivingRelativeGrandParents(false);\r\n    // }\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleParentsInput = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const predecessor_id = res;\r\n  const predecessor = createNewPerson(predecessor_id, state, actionProvider);\r\n  state = {\r\n    ...state,\r\n    parent_flag: QuestionType.part2,\r\n    temp_parent: predecessor,\r\n  };\r\n\r\n  state.temp_person.add_parent(predecessor, true);\r\n\r\n  const aliveQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.AliveQuestion(\r\n      Person.getPerson(predecessor._id, state.personsMap)._personName\r\n    ),\r\n    QuestionConstants.YesNoWidgetOptions\r\n  );\r\n  actionProvider.addMessageToBotState(aliveQuestion);\r\n\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleParentAliveOption = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const temp_parent = state.temp_parent;\r\n  const temp_parent_detail = Person.getPerson(\r\n    temp_parent._id,\r\n    state.personsMap\r\n  );\r\n  if (!res) {\r\n    temp_parent_detail._deceased = true;\r\n    state = {\r\n      ...state,\r\n      temp_person: temp_parent,\r\n      successor_flag: QuestionType.part3,\r\n    };\r\n    temp_parent._processChildNodePos += 1;\r\n    const allChildrenID = actionProvider.getParentChildrenIDStrings(\r\n      temp_parent._children,\r\n      state\r\n    );\r\n    const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addSuccessorOfParentCount(\r\n        temp_parent_detail._personName,\r\n        allChildrenID\r\n      )\r\n    );\r\n    actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n    return actionProvider.returnState(state);\r\n  } else {\r\n    temp_parent_detail._deceased = false;\r\n    handleClosingStep(state, actionProvider);\r\n    // if (state.stepID !== ChatStepTypes.grandParentStep) {\r\n    //   actionProvider.closestSurvivingRelativeParents();\r\n    // } else {\r\n    //   actionProvider.closestSurvivingRelativeGrandParents();\r\n    // }\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleGrandParentFirst = (\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const testatorNode = NodeEntity.getNode(state.person._id, state.nodeMap);\r\n  if (!state.deceasedParentsArray) state.deceasedParentsArray = [];\r\n\r\n  for (const parent_id of testatorNode._parents) {\r\n    if (Person.getPerson(parent_id, state.personsMap)._deceased) {\r\n      const temp_class = get_class_and_distance_closest_surviving_relative(\r\n        NodeEntity.getNode(parent_id, state.nodeMap),\r\n        state\r\n      )[0];\r\n      if (temp_class !== 1) {\r\n        if (!state.deceasedParentsArray.includes(parent_id))\r\n          state.deceasedParentsArray.push(parent_id);\r\n      }\r\n    }\r\n  }\r\n  if (state.deceasedParentsArray.length !== 0) {\r\n    const temp_person = getNode(state.deceasedParentsArray[0], state.nodeMap);\r\n    const temp_person_detail = getPerson(\r\n      state.deceasedParentsArray[0],\r\n      state.personsMap\r\n    );\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.grandParentStep,\r\n      parent_flag: QuestionType.part1,\r\n      temp_person: temp_person,\r\n      successor_flag: QuestionType.initialQuestion,\r\n    };\r\n    const newParentQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addParentsQuestion1(temp_person_detail._personName)\r\n    );\r\n    actionProvider.addMessageToBotState(newParentQuestion);\r\n  } else {\r\n    console.log(\"check situation if it arrives here\");\r\n    actionProvider.askFinalQuestion();\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleAskForNextGrandParent = (\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  if (state.deceasedParentsArray.length !== 0) {\r\n    const temp_person = getNode(state.deceasedParentsArray[0], state.nodeMap);\r\n    const temp_person_detail = getPerson(\r\n      state.deceasedParentsArray[0],\r\n      state.personsMap\r\n    );\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.grandParentStep,\r\n      parent_flag: QuestionType.part1,\r\n      temp_person: temp_person,\r\n      successor_flag: QuestionType.initialQuestion,\r\n    };\r\n    const newParentQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addParentsQuestion1(temp_person_detail._personName)\r\n    );\r\n    actionProvider.addMessageToBotState(newParentQuestion);\r\n  } else {\r\n    actionProvider.askFinalQuestion();\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleMarriedParents = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  if (res) {\r\n    actionProvider.set_spouse(\r\n      state.person._parents[0],\r\n      state.person._parents[1],\r\n      true\r\n    );\r\n    actionProvider.askFinalQuestion();\r\n  } else {\r\n    actionProvider.grandParentFirst();\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n","import Person from './Helper/Classes/Person';\r\nimport { ChatbotInterface, InitialChatbotState } from './Generics';\r\nimport { ChatStepTypes } from './Helper/Enums/ChatStepTypes';\r\nimport { ReactElement } from 'react';\r\nimport { NodeEntity } from './Helper/Classes/NodeEntity';\r\nimport chartSelector from '../../../store/chartSelector';\r\nimport { messageService } from './services/ChatbotCommunicator';\r\nimport {\r\n    delvisFirstResponse,\r\n    delvisFulltResponse,\r\n    delvisSecondResponse,\r\n    totalEstateValue,\r\n    undividedEstateChoice,\r\n    undividedEstateSpouse,\r\n    undividedOwnershipResponse,\r\n} from './ActionProviderMethods/UndividedEstateMethods';\r\nimport QuestionConstants from './Helper/Methods/QuestionConstants';\r\nimport {\r\n    handleAskUnderAgeQuestion,\r\n    handleNetWealth,\r\n    handleTestator,\r\n    handleUnderAge,\r\n} from './ActionProviderMethods/TestatorInformationMethods';\r\nimport {\r\n    handleCohabitantChoice,\r\n    handleSpouseOption,\r\n    handleSpouseInput,\r\n    handleCohabitantInput,\r\n} from './ActionProviderMethods/PartnerMethods';\r\nimport {\r\n    handleAskForNextGrandParent,\r\n    handleChildAliveOption,\r\n    handleGrandParentFirst,\r\n    handleMarriedParents,\r\n    handleParentAliveOption,\r\n    handleParentsInput,\r\n    handleSecondParentExists,\r\n    handleSuccessorCnt,\r\n    handleSuccessorInput,\r\n} from './ActionProviderMethods/RelativeMethods';\r\nimport {\r\n    handleClosestSurvivingRelativeChildren,\r\n    handleClosestSurvivingRelativeGrandParens,\r\n    handleClosestSurvivingRelativeParents,\r\n    handleFinalQuestionDef,\r\n} from './ActionProviderMethods/OtherChatbotMethods';\r\n\r\nclass ActionProvider {\r\n    createChatBotMessage: (\r\n        questionElement: ReactElement,\r\n        widget?: Record<string, unknown>,\r\n    ) => ReactElement;\r\n    setState: (state: unknown) => ChatbotInterface;\r\n    createClientMessage: (\r\n        messageElement: ReactElement,\r\n    ) => ReactElement<any, any>;\r\n    stateRef: any;\r\n    checkstate: any = null;\r\n    isStarted = true;\r\n    glb_state: any = null;\r\n    GRANDCHILDREN_PATH_LIMIT = 4;\r\n    constructor(\r\n        createChatBotMessage: (\r\n            questionElement: ReactElement,\r\n            widget?: Record<string, unknown>,\r\n        ) => ReactElement,\r\n        setStateFunc: (state: any) => any,\r\n        createClientMessage: (messageElement: ReactElement) => any,\r\n        stateRef: any,\r\n    ) {\r\n        this.createChatBotMessage = createChatBotMessage;\r\n        this.setState = setStateFunc;\r\n        this.createClientMessage = createClientMessage;\r\n        this.stateRef = stateRef;\r\n        // this.setRevertListeners()\r\n    }\r\n\r\n    setRevertListeners() {\r\n        messageService.clearAllInternalSubscription();\r\n        /* eslint-disable @typescript-eslint/no-unused-vars */\r\n        const subscription = messageService\r\n            .getMessageInChatbot()\r\n            .subscribe((message) => {\r\n                this.revertState();\r\n            });\r\n        messageService.addInternalSubscription(subscription);\r\n    }\r\n    revertState = () => {\r\n        const revertCount = localStorage.getItem('revertCount');\r\n        let lastState: any;\r\n        if (revertCount) {\r\n            lastState = messageService.getPreviousState(parseInt(revertCount));\r\n        } else {\r\n            lastState = messageService.getPreviousState(0);\r\n        }\r\n\r\n        if (lastState) {\r\n            if (revertCount) {\r\n                localStorage.setItem(\r\n                    'revertCount',\r\n                    (parseInt(revertCount) + 1).toString(),\r\n                );\r\n            } else {\r\n                localStorage.setItem('revertCount', '1');\r\n            }\r\n            this.setState((state: any) => {\r\n                state = lastState;\r\n                return this.returnState(state);\r\n            });\r\n        }\r\n    };\r\n    // setPreviousStateData = (currentState: any, lastState: any) => {\r\n    //\r\n    // }\r\n\r\n    handleTestator = (testatorResponse: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleTestator(testatorResponse, state, this);\r\n        });\r\n    };\r\n\r\n    handleUndividedEstateChoice = (\r\n        undividedEstateChoiceResponse: boolean,\r\n    ): void => {\r\n        // TODO: implement Yes/No conditions for undivided states.\r\n        // TODO: need to fix the values in object and correctly implement the whole algorithm\r\n        // TODO: check for correct text for the questions. (last step, the format of questions already available)\r\n        this.setState((state: ChatbotInterface) => {\r\n            return undividedEstateChoice(\r\n                undividedEstateChoiceResponse,\r\n                state,\r\n                this,\r\n            );\r\n        });\r\n    };\r\n\r\n    handleTotalEstateValueResponse = (\r\n        totalEstateValueResponse: string,\r\n    ): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return totalEstateValue(totalEstateValueResponse, state, this);\r\n        });\r\n    };\r\n\r\n    handleOwnershipResponse = (ownershipResponse: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return undividedOwnershipResponse(ownershipResponse, state, this);\r\n        });\r\n    };\r\n\r\n    handleDelvisFirstResponse = (res: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return delvisFirstResponse(res, state, this);\r\n        });\r\n    };\r\n\r\n    handleDelvisSecondResponse = (res: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return delvisSecondResponse(res, state, this);\r\n        });\r\n    };\r\n\r\n    handleFulltSaereieResponse = (res: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return delvisFulltResponse(res, state, this);\r\n        });\r\n    };\r\n\r\n    handleUndividedEstateSpouse = (res: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return undividedEstateSpouse(res, state, this);\r\n        });\r\n    };\r\n\r\n    handleNetWealth(currencyResponse: string): void {\r\n        /**\r\n         *  * function for handling wealth replies.\r\n         *  * stepID is updated to 3 and then proceed to underage question.\r\n         *  * conditions for reply in currencyDisplayValue function.\r\n         */\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleNetWealth(currencyResponse, state, this);\r\n        });\r\n    }\r\n\r\n    handleUnderAge = (selectedOption: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleUnderAge(selectedOption, state, this);\r\n        });\r\n    };\r\n\r\n    handleSpouseChoice = (spouseChoice: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleSpouseOption(spouseChoice, state, this);\r\n        });\r\n    };\r\n\r\n    handleSpouseInput = (spouseResponse: string): void => {\r\n        const spouseID = spouseResponse;\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleSpouseInput(spouseID, state, this);\r\n        });\r\n    };\r\n\r\n    handleCohabitantChoice = (cohabitantChoiceResponse: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleCohabitantChoice(\r\n                cohabitantChoiceResponse,\r\n                state,\r\n                this,\r\n            );\r\n        });\r\n    };\r\n\r\n    handleCohabitantInput = (cohabitantResponse: string): void => {\r\n        const cohabitantID = cohabitantResponse;\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleCohabitantInput(cohabitantID, state, this);\r\n        });\r\n    };\r\n\r\n    handleSuccessorCount(successorCountResponse: string): void {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleSuccessorCnt(successorCountResponse, state, this);\r\n        });\r\n    }\r\n    handleSuccessorInput = (successorResponse: string): void => {\r\n        const child_name = successorResponse;\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleSuccessorInput(successorResponse, state, this);\r\n        });\r\n    };\r\n\r\n    handleChildAliveOption = (aliveResponse: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleChildAliveOption(aliveResponse, state, this);\r\n        });\r\n    };\r\n\r\n    handleSecondParentExists = (secondParentChoice: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleSecondParentExists(secondParentChoice, state, this);\r\n        });\r\n    };\r\n\r\n    handleParentsInput = (parentResponse: string): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleParentsInput(parentResponse, state, this);\r\n        });\r\n    };\r\n\r\n    handleParentAliveOption = (alive: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleParentAliveOption(alive, state, this);\r\n        });\r\n    };\r\n\r\n    grandParentFirst = () => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleGrandParentFirst(state, this);\r\n        });\r\n    };\r\n\r\n    askForNextGrandParent = () => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleAskForNextGrandParent(state, this);\r\n        });\r\n    };\r\n\r\n    // TODO check options\r\n    handleMarriedParents = (marriedParentsResponse: boolean): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleMarriedParents(marriedParentsResponse, state, this);\r\n        });\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n    handleFinalQuestion = (finalOption: boolean): void => {\r\n        this.setState((state: any) => {\r\n            return handleFinalQuestionDef(finalOption, state, this);\r\n        });\r\n    };\r\n\r\n    askUnderAgeQuestion = () => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleAskUnderAgeQuestion(state, this);\r\n        });\r\n    };\r\n\r\n    closestSurvivingRelativeChildren = () => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleClosestSurvivingRelativeChildren(state, this);\r\n        });\r\n    };\r\n\r\n    getParentChildrenIDStrings = (\r\n        collection: Array<number>,\r\n        state: ChatbotInterface,\r\n    ): ReactElement => {\r\n        return (\r\n            <strong>{`{{ ${collection\r\n                .map(\r\n                    (child_id) =>\r\n                        Person.getPerson(child_id, state.personsMap)\r\n                            ._personName,\r\n                )\r\n                .filter((name) => name !== '')\r\n                .join(', ')} }}`}</strong>\r\n        );\r\n    };\r\n\r\n    askFinalQuestion = (): void => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            state = {\r\n                ...state,\r\n                stepID: ChatStepTypes.finalStep,\r\n            };\r\n            const finalQuestion = this.createChatBotMessage(\r\n                QuestionConstants.FinalQuestion,\r\n                QuestionConstants.YesNoWidgetOptions,\r\n            );\r\n            this.addMessageToBotState(finalQuestion);\r\n            return this.returnState(state);\r\n        });\r\n    };\r\n\r\n    closestSurvivingRelativeParents = (isSecondParent = true) => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleClosestSurvivingRelativeParents(\r\n                isSecondParent,\r\n                state,\r\n                this,\r\n            );\r\n        });\r\n    };\r\n\r\n    closestSurvivingRelativeGrandParents = (isSecondParent = true) => {\r\n        this.setState((state: ChatbotInterface) => {\r\n            return handleClosestSurvivingRelativeGrandParens(\r\n                isSecondParent,\r\n                state,\r\n                this,\r\n            );\r\n        });\r\n    };\r\n\r\n    // Generic functions\r\n    addMessageToBotState = (messages: any): void => {\r\n        this.setState((state: any) => {\r\n            if (Array.isArray(messages)) {\r\n                state.messages = [...state.messages, ...messages];\r\n            } else {\r\n                state.messages = [...state.messages, messages];\r\n            }\r\n            return this.returnState(state);\r\n        });\r\n    };\r\n\r\n    handleDefault = (): void => {\r\n        const message = this.createChatBotMessage(\r\n            QuestionConstants.DefaultText,\r\n            {\r\n                withAvatar: true,\r\n            },\r\n        );\r\n\r\n        this.addMessageToBotState(message);\r\n    };\r\n\r\n    generateNextID = (id: number) => {\r\n        this.setState((state: any) => {\r\n            state.id = state.id + 1;\r\n            return this.returnState(state);\r\n        });\r\n        return id;\r\n    };\r\n\r\n    set_spouse = (\r\n        firstSpouse_id: number,\r\n        secondSpouse_id: number,\r\n        add_for_both: boolean,\r\n    ): void => {\r\n        this.setState((state: any) => {\r\n            NodeEntity.getNode(firstSpouse_id, state.nodeMap)._spouse =\r\n                secondSpouse_id;\r\n            if (add_for_both) {\r\n                NodeEntity.getNode(secondSpouse_id, state.nodeMap)._spouse =\r\n                    firstSpouse_id;\r\n            }\r\n            return this.returnState(state);\r\n        });\r\n    };\r\n\r\n    check = () => {\r\n        const self = this;\r\n        if (this.isStarted) {\r\n            this.checkstate = setInterval(() => {\r\n                if (self.glb_state !== null) {\r\n                    self.isStarted = false;\r\n                    messageService.sendMessageFromChatbot({\r\n                        detail: self.glb_state,\r\n                    });\r\n                    // close the interval\r\n                    self.glb_state = null;\r\n                    clearInterval(this.checkstate);\r\n                }\r\n            }, 200);\r\n        }\r\n    };\r\n    returnState = (state: any) => {\r\n        this.check();\r\n        this.glb_state = chartSelector(state);\r\n        return state;\r\n    };\r\n    handleValidation = (tempMessages: any) => {\r\n        this.setState((state: any) => {\r\n            if (tempMessages && tempMessages.length !== 0) {\r\n                state.messages = tempMessages;\r\n                return state;\r\n            }\r\n            return state;\r\n        });\r\n    };\r\n    resetChatbot = () => {\r\n        this.setState((state: any) => {\r\n            state = InitialChatbotState;\r\n\r\n            return this.returnState(state);\r\n        });\r\n        const initialQuestion = this.createChatBotMessage(\r\n            QuestionConstants.TestatorQuestion,\r\n        );\r\n        this.addMessageToBotState(initialQuestion);\r\n    };\r\n\r\n    delay = (n: number) => {\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, n * 1000);\r\n        });\r\n    };\r\n}\r\n\r\nexport default ActionProvider;\r\n","import ActionProvider from \"../ActionProvider\";\r\nimport InfoMessagesWidget from \"../Custom/Widgets/InfoMessagesWidget/InfoMessagesWidget\";\r\nimport { ChatbotInterface } from \"../Generics\";\r\nimport { ChatStepTypes } from \"../Helper/Enums/ChatStepTypes\";\r\nimport {\r\n  CurrencyOutput,\r\n  ParseCurrencyStringForOutput,\r\n} from \"../Helper/Methods/HandleCurrency\";\r\nimport QuestionConstants from \"../Helper/Methods/QuestionConstants\";\r\nimport { createTestator, getPerson } from \"./OtherChatbotMethods\";\r\n\r\nexport const handleTestator = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  /**\r\n   *  * function for handling personID replies.\r\n   *  * stepID is updated to 2 and then proceed to wealth question.\r\n   *  * open reply, no conditions for now.\r\n   */\r\n\r\n  const undividedEstateQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.UndividedEstateQuestion,\r\n    QuestionConstants.YesNoWidgetOptions\r\n  );\r\n  state = {\r\n    ...state,\r\n    stepID: ChatStepTypes.testatorStep,\r\n    testator: createTestator(res, state, actionProvider),\r\n  };\r\n  state = {\r\n    ...state,\r\n  };\r\n\r\n  actionProvider.addMessageToBotState(undividedEstateQuestion);\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleNetWealth = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  const netWealthQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.NetWealthQuestion,\r\n    { withAvatar: true }\r\n  );\r\n  const currencyIntResponse = CurrencyOutput(res);\r\n  const currencyStringResponse = ParseCurrencyStringForOutput(\r\n    currencyIntResponse[1]\r\n  );\r\n  const currencyJSX = <InfoMessagesWidget label={currencyStringResponse} />;\r\n  if (currencyIntResponse[0] === 5) {\r\n    const underAgeQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.UnderAgeQuestion,\r\n      QuestionConstants.YesNoWidgetOptions\r\n    );\r\n    const currencyCustom = actionProvider.createClientMessage(currencyJSX);\r\n    actionProvider.addMessageToBotState(currencyCustom);\r\n\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.underAgeStep,\r\n      netWealth: parseInt(currencyIntResponse[1]),\r\n    };\r\n    if (state.netWealth <= 0) {\r\n      actionProvider.askFinalQuestion();\r\n    }\r\n    actionProvider.addMessageToBotState(underAgeQuestion);\r\n  } else {\r\n    const netWealthWarning = actionProvider.createChatBotMessage(\r\n      QuestionConstants.NetWealthWarning\r\n    );\r\n\r\n    actionProvider.addMessageToBotState(netWealthWarning);\r\n    actionProvider.addMessageToBotState(netWealthQuestion);\r\n  }\r\n\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleUnderAge = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  state.person = state.testator;\r\n  state.temp_person = state.testator;\r\n  getPerson(state.person._id, state.personsMap)._underAge = res;\r\n  if (res) {\r\n    const cohabitantChoiceQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.CohabitantChoiceQuestion,\r\n      QuestionConstants.YesNoWidgetOptions\r\n    );\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.cohabitantChoice,\r\n    };\r\n    actionProvider.addMessageToBotState(cohabitantChoiceQuestion);\r\n\r\n    return actionProvider.returnState(state);\r\n  }\r\n\r\n  const spouseChoiceQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.SpouseChoiceQuestion,\r\n    QuestionConstants.YesNoWidgetOptions\r\n  );\r\n  state = {\r\n    ...state,\r\n    stepID: ChatStepTypes.spouseChoice,\r\n  };\r\n  actionProvider.addMessageToBotState(spouseChoiceQuestion);\r\n\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleAskUnderAgeQuestion = (\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  state.stepID = ChatStepTypes.underAgeStep;\r\n  const underAgeQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.UnderAgeQuestion,\r\n    QuestionConstants.YesNoWidgetOptions\r\n  );\r\n  actionProvider.addMessageToBotState(underAgeQuestion);\r\n  return actionProvider.returnState(state);\r\n};\r\n","import ActionProvider from \"../ActionProvider\";\r\nimport { ChatbotInterface } from \"../Generics\";\r\nimport Person from \"../Helper/Classes/Person\";\r\nimport { ChatStepTypes, QuestionType } from \"../Helper/Enums/ChatStepTypes\";\r\nimport { ParentChildSelector } from \"../Helper/Enums/ParentChildSelector\";\r\nimport InheritanceConstants from \"../Helper/Methods/InheritanceConstants\";\r\nimport QuestionConstants from \"../Helper/Methods/QuestionConstants\";\r\nimport { createNewPerson } from \"./OtherChatbotMethods\";\r\n\r\nexport const handleSpouseOption = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  // Spouse present\r\n  if (res) {\r\n    state.stepID = ChatStepTypes.spouseStep;\r\n\r\n    const spouseQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.SpouseQuestion\r\n    );\r\n    actionProvider.addMessageToBotState(spouseQuestion);\r\n  }\r\n  // No spouse\r\n  else {\r\n    const testator = Person.getPerson(state.person._id, state.personsMap);\r\n    // is Adult, then ask for cohabitant\r\n    if (!testator._underAge && testator.spouse === undefined) {\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.cohabitantChoice,\r\n      };\r\n      const cohabitantChoiceQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.CohabitantChoiceQuestion,\r\n        QuestionConstants.YesNoWidgetOptions\r\n      );\r\n      actionProvider.addMessageToBotState(cohabitantChoiceQuestion);\r\n    } else {\r\n      state = {\r\n        ...state,\r\n        stepID: ChatStepTypes.successorStep,\r\n        successor_flag: QuestionType.part3,\r\n      };\r\n      const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n        QuestionConstants.addSuccessorCount(testator._personName)\r\n      );\r\n      actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n    }\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleSpouseInput = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  /**\r\n   *  * function for handling spouseID replies.\r\n   *  * stepID is updated to 6 and then further conditions are evaluated next.\r\n   *  * open reply, no conditions for now.\r\n   */\r\n  const testator = Person.getPerson(state.person._id, state.personsMap);\r\n  const newSpouse = createNewPerson(res, state, actionProvider);\r\n  state.person._spouse = newSpouse._id;\r\n  state.person.setPathforPartner(ParentChildSelector.spouse, newSpouse);\r\n  if (\r\n    state.netWealth <=\r\n    InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN\r\n  ) {\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.rearChildrenStep,\r\n    };\r\n    actionProvider.askFinalQuestion();\r\n    return actionProvider.returnState(state);\r\n  }\r\n\r\n  state = {\r\n    ...state,\r\n    stepID: ChatStepTypes.successorStep,\r\n    successor_flag: QuestionType.part3,\r\n  };\r\n  state.testator._partnerNode = newSpouse._id;\r\n  const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.addSuccessorCount(testator._personName)\r\n  );\r\n  actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleCohabitantChoice = (\r\n  res: boolean,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  // if cohabitant choice is yes\r\n  if (res) {\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.cohabitantStep,\r\n    };\r\n    const cohabitantQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.CohabitantQuestion\r\n    );\r\n    actionProvider.addMessageToBotState(cohabitantQuestion);\r\n  }\r\n  // if cohabitant choice is no\r\n  else {\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.successorStep,\r\n      successor_flag: QuestionType.part3,\r\n    };\r\n    const testator = Person.getPerson(state.person._id, state.personsMap);\r\n    const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n      QuestionConstants.addSuccessorCount(testator._personName)\r\n    );\r\n    actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n  }\r\n  return actionProvider.returnState(state);\r\n};\r\n\r\nexport const handleCohabitantInput = (\r\n  res: string,\r\n  state: ChatbotInterface,\r\n  actionProvider: ActionProvider\r\n) => {\r\n  /**\r\n   *  * function for handling cohabitant replies.\r\n   *  * stepID is updated to 7 and then further conditions are evaluated next.\r\n   *  * open reply, no conditions for now.\r\n   */\r\n  const testator = Person.getPerson(state.person._id, state.personsMap);\r\n  const newCohabitant = createNewPerson(res, state, actionProvider);\r\n  state.person._cohabitant = newCohabitant._id;\r\n  state.person.setPathforPartner(ParentChildSelector.cohabitant, newCohabitant);\r\n\r\n  if (\r\n    state.netWealth <=\r\n    InheritanceConstants.MINIMUM_INHERITANCE_SPOUSE_VS_CHILDREN\r\n  ) {\r\n    state = {\r\n      ...state,\r\n      stepID: ChatStepTypes.rearChildrenStep,\r\n    };\r\n    actionProvider.askFinalQuestion();\r\n    return actionProvider.returnState(state);\r\n  }\r\n  state = {\r\n    ...state,\r\n    stepID: ChatStepTypes.successorStep,\r\n    successor_flag: QuestionType.part3,\r\n  };\r\n  const newSuccessorQuestion = actionProvider.createChatBotMessage(\r\n    QuestionConstants.addSuccessorCount(testator._personName)\r\n  );\r\n  actionProvider.addMessageToBotState(newSuccessorQuestion);\r\n  return actionProvider.returnState(state);\r\n};\r\n","export default function chartSelector(state) {\r\n  return {\r\n    nodeMap: state.nodeMap,\r\n    personsMap: state.personsMap,\r\n    testator: state.testator,\r\n  };\r\n}\r\n\r\nexport function messageSelector(state) {\r\n  return {\r\n    messages: state.messages,\r\n  };\r\n}\r\n","class ChartNode {\r\n  id: string;\r\n  type: string;\r\n  data: NodeData;\r\n  position: { x: number; y: number };\r\n  xLevel: number;\r\n  draggable = false;\r\n  connectable = false;\r\n  constructor(\r\n    id: string,\r\n    type: string,\r\n    data: NodeData,\r\n    position: { x: number; y: number },\r\n    xLevel: number\r\n  ) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.data = data;\r\n    this.position = position;\r\n    this.xLevel = xLevel;\r\n  }\r\n}\r\nexport class NodeData {\r\n  label = \"\";\r\n  showDialog: boolean;\r\n  pos: {\r\n    left?: null | string;\r\n    right?: null | string;\r\n    top?: null | string;\r\n    bottom?: null | string;\r\n  };\r\n\r\n  constructor(label: string, data?: any) {\r\n    this.label = label;\r\n    this.pos = data;\r\n    this.showDialog = false;\r\n  }\r\n}\r\nexport default ChartNode;\r\n","class ChartConnector {\r\n  id: string;\r\n  type = \"smoothstep\";\r\n  source: string;\r\n  target: string;\r\n  label: string;\r\n  animated = false;\r\n  // arrowHeadType = \"arrowclosed\";\r\n  sourceHandle: string;\r\n  targetHandle: string;\r\n\r\n  constructor(\r\n    id: string,\r\n    type: string,\r\n    source: string,\r\n    target: string,\r\n    label: string,\r\n    sourceHandle = \"\",\r\n    targetHandle = \"\"\r\n  ) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.source = source;\r\n    this.target = target;\r\n    this.label = label;\r\n    this.sourceHandle = sourceHandle;\r\n    this.targetHandle = targetHandle;\r\n  }\r\n}\r\n\r\nexport default ChartConnector;\r\n","export class Bubble {\r\n  parent: number | undefined;\r\n  elements: Array<number>;\r\n  constructor(elements: Array<number>, parent?: number) {\r\n    this.elements = elements;\r\n    this.parent = parent;\r\n  }\r\n}\r\n","import { Handle, Position } from \"react-flow-renderer\";\r\nimport { Textfit } from \"react-textfit\";\r\n\r\nenum HandleType {\r\n  source = \"source\",\r\n  target = \"target\",\r\n}\r\n\r\nconst customHandleData = [\r\n  {\r\n    type: \"source\",\r\n    position: Position.Right,\r\n    id: \"s_right\",\r\n    style: { top: \"50%\", background: \"#555\" },\r\n  },\r\n  {\r\n    type: \"source\",\r\n    position: Position.Bottom,\r\n    id: \"s_bottom\",\r\n    style: { left: \"50%\", background: \"#555\" },\r\n  },\r\n  {\r\n    type: \"target\",\r\n    position: Position.Left,\r\n    id: \"t_left\",\r\n    style: { top: \"50%\", background: \"#555\" },\r\n  },\r\n  {\r\n    type: \"target\",\r\n    position: Position.Top,\r\n    id: \"t_top\",\r\n    style: { left: \"50%\", background: \"#555\" },\r\n  },\r\n];\r\n\r\nconst condition = false;\r\nconst inheritanceDisplay = condition ? \"block\" : \"none\";\r\n\r\nconst partnerNodeStyles = {\r\n  OuterDiv: {\r\n    background: \"#fff\",\r\n    color: \"#000\",\r\n    width: \"7rem\",\r\n    // height: \"1.8rem\",\r\n    borderRadius: \"3px\",\r\n    borderColor: \"midnightblue\",\r\n    borderStyle: \"solid\",\r\n    borderWidth: \"1px\",\r\n    letterSpacing: \"0.5px\",\r\n  },\r\n  innerDiv1: {\r\n    width: \"6.8rem\",\r\n    display: \"contents\",\r\n    height: `${condition ? \"100%\" : \"2 / 3\"}%`,\r\n    padding: \"5%\",\r\n  },\r\n  innerDiv2: {\r\n    display: inheritanceDisplay,\r\n    borderTop: \"black solid 1px\",\r\n    padding: \"0 2px\",\r\n    letterSpacing: 0,\r\n  },\r\n  textFitStyle: {\r\n    margin: \"auto\",\r\n    textAlign: \"center\",\r\n    fontSize: \"90%\",\r\n    paddingBottom: \"0.2rem\",\r\n  },\r\n  subtitle: {\r\n    fontSize: \"0.5rem\",\r\n    margin: 0,\r\n    whiteSpace: \"nowrap\" as const,\r\n  },\r\n};\r\n\r\nconst CustomNode = (totalData: any) => {\r\n  const data = totalData.data;\r\n\r\n  const isConnectable = data.isConnectable;\r\n  // eslint-disable-next-line\r\n  const handles = customHandleData.map((v, k) => {\r\n    if (check(data.pos, v.position)) {\r\n      return (\r\n        <Handle\r\n          key={v.id}\r\n          type={v.type === \"source\" ? HandleType.source : HandleType.target}\r\n          position={v.position}\r\n          id={v.id}\r\n          style={v.style}\r\n          isConnectable={isConnectable}\r\n        />\r\n      );\r\n    }\r\n  });\r\n  const labelString = deceasedFormatter(data.label);\r\n  return (\r\n    <div>\r\n      <div id={`detail_${totalData.id}`} style={partnerNodeStyles.OuterDiv}>\r\n        <div style={partnerNodeStyles.innerDiv1}>\r\n          <Textfit\r\n            style={partnerNodeStyles.textFitStyle}\r\n            max={20}\r\n            mode=\"single\"\r\n            forceSingleModeWidth={false}\r\n          >\r\n            {labelString}\r\n          </Textfit>\r\n        </div>\r\n        <div style={partnerNodeStyles.innerDiv2}>\r\n          <p style={partnerNodeStyles.subtitle}>Amount: NOK </p>\r\n        </div>\r\n        {/* <Typography align=\"center\" variant=\"subtitle2\" style={{ textTransform: \"uppercase\", fontFamily: \"Helvetica\", padding: \"0 5px\" }}></Typography> */}\r\n        {handles}\r\n      </div>\r\n      {/* <Popper style={{ position: \"absolute\", display: data.showDialog ? \"block\" : \"none\" }}\r\n        open={data.showDialog}\r\n        anchorEl={document.getElementById(`detail_${totalData.id}`)}\r\n      >{`Hi popover ${data.label}`}</Popper> */}\r\n    </div>\r\n  );\r\n};\r\nconst check = (data: any, pos: string): boolean => {\r\n  if (\r\n    data &&\r\n    (data.left === pos ||\r\n      data.right === pos ||\r\n      data.top === pos ||\r\n      data.bottom === pos)\r\n  )\r\n    return true;\r\n\r\n  return false;\r\n};\r\n\r\nconst deceasedFormatter = (personString: string) => {\r\n  // const tempArray = personString.split(\"†\");\r\n\r\n  // if (tempArray.length === 2) {\r\n  //   const spanElement = document.createElement(\"span\");\r\n  //   spanElement.innerHTML = `tempArray[0] <p style=\"color: red\">tempArray[1]</p>`\r\n  //   return spanElement\r\n  // }\r\n  return personString;\r\n};\r\n\r\nexport default CustomNode;\r\n","import { Subject, Subscription } from 'rxjs';\r\n\r\nconst chatBotDataSubject = new Subject();\r\nconst chatbotMessageSubscriptionList = new Array<Subscription>()\r\nexport const componentCommunicatorService = {\r\n\r\n    sendChatbotMessage: (message: any) => chatBotDataSubject.next(message),\r\n\r\n\r\n    getChatbotMessage: () => chatBotDataSubject.asObservable(),\r\n\r\n    addSubscription: (subscription: Subscription) => chatbotMessageSubscriptionList.push(subscription),\r\n\r\n\r\n    clearAllSubscription: () => {\r\n        chatbotMessageSubscriptionList.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        })\r\n    },\r\n\r\n\r\n};","import ReactFlow, {\r\n  Background,\r\n  BackgroundVariant,\r\n  Controls,\r\n} from \"react-flow-renderer\";\r\nimport { processData } from \"./ProcessDataForChart\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useZoomPanHelper, useUpdateNodeInternals } from \"react-flow-renderer\";\r\nimport CustomNode from \"./CustomNode\";\r\nimport ChartNode from \"./Classes/ChartNode\";\r\nimport ChartConnector from \"./Classes/ChartConnector\";\r\nimport { componentCommunicatorService } from \"../../ChatbotComponent/services/ComponentCommunicatorService\";\r\n\r\n// import { CustomDetailDialog } from \"./Classes/CustomDetailDialog\";\r\n\r\nconst flowStyles = { height: \"80vh\", width: \"60%\" };\r\nlet isHandleChange = true;\r\nconst OrgChartTree = () => {\r\n  // const result = useSelector(chartSelector);\r\n  const [result, setResult] = useState({\r\n    nodeMap: new Map(),\r\n    personMap: new Map(),\r\n    testator: null,\r\n  });\r\n  const [chartContent, setChartContent] = useState([]);\r\n  const componentWillUnmount = useRef(false);\r\n  const updateNodeInternals = useUpdateNodeInternals();\r\n\r\n  const getNodeData = () =>\r\n    chartContent.forEach((chartData: ChartNode | ChartConnector) => {\r\n      //\r\n      if (chartData instanceof ChartNode) {\r\n        updateNodeInternals(chartData.id);\r\n      }\r\n    });\r\n  useEffect(() => {\r\n    return () => {\r\n      componentWillUnmount.current = true;\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    componentCommunicatorService.clearAllSubscription();\r\n    const subscription = componentCommunicatorService\r\n      .getChatbotMessage()\r\n      .subscribe((data: any) => setResult(data));\r\n    componentCommunicatorService.addSubscription(subscription);\r\n    if (componentWillUnmount.current) {\r\n      componentCommunicatorService.clearAllSubscription();\r\n    }\r\n  }, [1]);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      getNodeData();\r\n    }, 500);\r\n  }, [chartContent]);\r\n  useEffect(() => {\r\n    setChartContent(processData(result));\r\n    isHandleChange = true;\r\n  }, [result]);\r\n  const { fitView } = useZoomPanHelper();\r\n  const nodeTypes = {\r\n    specialNode: CustomNode,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHandleChange) {\r\n      fitView();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"ChartContainer\" style={{ height: \"100%\", paddingTop: \"3rem\" }}>\r\n      <ReactFlow\r\n        elements={chartContent}\r\n        style={flowStyles}\r\n        nodeTypes={nodeTypes}\r\n        nodesConnectable={false}\r\n        paneMoveable={false}\r\n        selectNodesOnDrag={false}\r\n        elementsSelectable={false}\r\n        nodesDraggable={false}\r\n      >\r\n        <Background variant={BackgroundVariant.Lines} gap={1} size={2} />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrgChartTree;\r\n","export default __webpack_public_path__ + \"static/media/chat_button_logo.6fc97b77.svg\";","import { useEffect, useRef } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Chatbot } from \"react-chatbot-kit\";\r\nimport Config from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/Config.js\";\r\nimport MessageParser from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/MessageParser\";\r\nimport ActionProvider from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/ActionProvider\";\r\nimport OrgChartTree from \"../Components/InheritanceCalculatorComponents/OtherComponent/FamilyChart/ChartComponent\";\r\nimport \"../Components/InheritanceCalculatorComponents/OtherComponent/ChatbotToggleButton/ChatbotToggleButton.scss\";\r\nimport botIcon from \"../assets/images/chat_button_logo.svg\";\r\nimport { ReactFlowProvider } from \"react-flow-renderer\";\r\nimport { messageService } from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/services/ChatbotCommunicator.tsx\";\r\nimport { componentCommunicatorService } from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/services/ComponentCommunicatorService.tsx\";\r\n\r\nconst InheritanceCalculatorPage = () => {\r\n  let prev = \"block\";\r\n  // const componentWillUnmount = useRef(false);\r\n  useEffect(() => {\r\n    messageService.clearAllExternalSubscription();\r\n    const subscription = messageService\r\n      .getMessageOutChatbot()\r\n      .subscribe(({ detail }) => {\r\n        componentCommunicatorService.sendChatbotMessage(detail);\r\n        // dispatch({\r\n        //   type: \"UPDATE_GENERIC\",\r\n        //   payload: detail,\r\n        // });\r\n      });\r\n    messageService.addExternalSubscription(subscription);\r\n    setWarningDiv();\r\n    // setRevertDiv();\r\n    addListenerToChatInputField();\r\n  }, [1]);\r\n  // useEffect(() => {\r\n  //   return () => {\r\n  //     componentWillUnmount.current = true;\r\n  //   };\r\n  // }, []);\r\n  // useEffect(() => {\r\n  //   if (componentWillUnmount.current) {\r\n  //     messageService.clearAllExternalSubscription();\r\n  //     messageService.clearAllInternalSubscription();\r\n  //   }\r\n  // }, [1]);\r\n\r\n  // localStorage.setItem(\"isRevertListenerSet\", \"false\");\r\n  // document.removeEventListener(\"revert\");\r\n  const toggleBot = () => {\r\n    const divChatBot = document.getElementsByClassName(\r\n      \"react-chatbot-kit-chat-container\"\r\n    )[0];\r\n    if (prev === \"block\") {\r\n      divChatBot.style.display = \"none\";\r\n      prev = \"none\";\r\n    } else {\r\n      divChatBot.style.display = \"block\";\r\n      prev = \"block\";\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"InheritanceCalculatorMain\" style={{ height: \"100%\" }}>\r\n      <Typography variant=\"h2\" align=\"center\">\r\n        Inheritance Calculator\r\n      </Typography>\r\n      <ReactFlowProvider>\r\n        <OrgChartTree />\r\n      </ReactFlowProvider>\r\n      {\r\n        <div className=\"chatbotContainer\">\r\n          <Chatbot\r\n            config={Config}\r\n            actionProvider={ActionProvider}\r\n            messageParser={MessageParser}\r\n          />\r\n        </div>\r\n      }\r\n      <button className=\"ChatbotToggleButton\" onClick={toggleBot}>\r\n        <img src={botIcon} />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n// const setRevertDiv = () => {\r\n//   const chatParentElement = document.getElementsByClassName(\r\n//     \"react-chatbot-kit-chat-input-container\"\r\n//   )[0];\r\n//   if (!document.getElementById(\"revert-div\")) {\r\n//     const chatContainer = document.getElementsByClassName(\r\n//       \"react-chatbot-kit-chat-container\"\r\n//     )[0];\r\n//     chatContainer.id = \"chat_container\";\r\n//     const newDiv = document.createElement(\"div\");\r\n//     newDiv.id = \"revert-div\";\r\n//     const revertButton = document.createElement(\"button\");\r\n//     revertButton.innerText = \"Revert\";\r\n//     newDiv.appendChild(revertButton);\r\n//     chatParentElement.prepend(newDiv);\r\n//     revertButton.addEventListener(\"click\", ({ event }) => {\r\n//       messageService.sendMessageToChatbot(\"ON CLICK\");\r\n//     });\r\n//   }\r\n// };\r\nconst setWarningDiv = () => {\r\n  // const chatParentElement = document.getElementsByClassName(\r\n  //   \"react-chatbot-kit-chat-container\"\r\n  // )[0];\r\n\r\n  const chatParentElement = document.getElementsByClassName(\r\n    \"react-chatbot-kit-chat-input-form\"\r\n  )[0];\r\n  const newDiv = document.createElement(\"div\");\r\n  newDiv.id = \"chatbot-warning-div\";\r\n  newDiv.innerHTML = \"warning\";\r\n  newDiv.style.backgroundColor = \"red\";\r\n  newDiv.style.position = \"absolute\";\r\n  newDiv.style.bottom = \"2.5rem\";\r\n  newDiv.style.width = \"100%\";\r\n  newDiv.style.display = \"none\";\r\n  chatParentElement.prepend(newDiv);\r\n};\r\n\r\nconst addListenerToChatInputField = () => {\r\n  const chatInputField = document.getElementsByClassName(\r\n    \"react-chatbot-kit-chat-input\"\r\n  )[0];\r\n  chatInputField.addEventListener(\"input\", () => {\r\n    const warningDiv = document.getElementById(\"chatbot-warning-div\");\r\n    if (warningDiv) {\r\n      if (warningDiv.style.display === \"block\") {\r\n        warningDiv.style.display = \"none\";\r\n      }\r\n    }\r\n  });\r\n};\r\nexport default InheritanceCalculatorPage;\r\n","import { ReactElement } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport makeStyles from \"@mui/styles/makeStyles\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// import LangButton from \"./LangButton/LangButton\";\r\n\r\ninterface propsTypes {\r\n  description: string;\r\n  title: string;\r\n}\r\n\r\nconst Copyright = (): ReactElement => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Arvebot\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  footer: {\r\n    // backgroundColor: theme.palette.background.paper,\r\n    padding: useTheme().spacing(6),\r\n    backgroundColor: \"silver\",\r\n  },\r\n}));\r\n\r\nconst Footer = (props: propsTypes): ReactElement => {\r\n  const classes = useStyles();\r\n  const { description, title } = props;\r\n\r\n  return (\r\n    <Paper className={classes.footer}>\r\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <Typography\r\n        variant=\"subtitle1\"\r\n        align=\"center\"\r\n        color=\"textSecondary\"\r\n        component=\"p\"\r\n      >\r\n        {description}\r\n      </Typography>\r\n      <Copyright />\r\n\r\n      {/* {Object.keys(props.langValue).map((lang) => (\r\n        <LangButton\r\n          key={lang}\r\n          langButtonValue={props.langValue[lang]}\r\n          sendDataToParent={props.sendDataToParent}\r\n        />\r\n      ))} */}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nFooter.propTypes = {\r\n  description: PropTypes.string,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Footer;\r\n","import { ReactElement } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst ResourcesPage = (): ReactElement => {\r\n  return (\r\n    <Typography variant=\"h2\" align=\"center\">\r\n      ResourcesPage\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default ResourcesPage;\r\n","import { ChatbotState } from \"../Components/InheritanceCalculatorComponents/ChatbotComponent/Generics\";\r\n\r\nconst initialState = ChatbotState;\r\n\r\nconst genericReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_GENERIC\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default genericReducer;\r\n","import { createStore } from \"redux\";\r\nimport genericReducer from \"./genericReducer\";\r\n\r\nconst store = createStore(genericReducer);\r\nexport default store;\r\n","// React\r\nimport { ReactElement } from 'react';\r\n// material-ui\r\nimport { Paper } from '@mui/material';\r\nimport {\r\n    createTheme,\r\n    ThemeProvider,\r\n    StyledEngineProvider,\r\n} from '@mui/material/styles';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\n// react-router\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { IntlProvider } from 'react-intl';\r\n// local - check in newer chrome version and remove. added polyfill because nb locale not supported in chromium>92\r\n// https://github.com/formatjs/formatjs/issues/3066\r\nimport '@formatjs/intl-datetimeformat/polyfill-force';\r\nimport '@formatjs/intl-datetimeformat/locale-data/nb';\r\nimport '@formatjs/intl-numberformat/polyfill-force';\r\nimport '@formatjs/intl-numberformat/locale-data/nb';\r\nimport '@formatjs/intl-numberformat/locale-data/en';\r\n//\r\n// import theme from \"./theme\";\r\nimport Header from './Components/Generic/Header/Header';\r\nimport HomePage from './Pages/HomePage';\r\nimport AboutPage from './Pages/AboutPage';\r\nimport InheritanceCalculatorPage from './Pages/InheritanceCalculatorPage.js';\r\nimport Footer from './Components/Generic/Footer/Footer';\r\n// import HomePageImage from \"./assets/images/homepage-image.jpg\";\r\nimport ResourcesPage from './Pages/ResourcesPage';\r\n\r\nimport Norsk from './languages/translationNO.json';\r\n// import English from \"./languages/translationEN.json\";\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst theme = createTheme();\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // backgroundImage: `url(${HomePageImage})`,\r\n        // backgroundPosition: \"center\",\r\n        // backgroundSize: \"cover\",\r\n        // backgroundRepeat: \"no-repeat\",\r\n        height: '100vh',\r\n    },\r\n    rootPaper: {\r\n        marginTop: '5rem',\r\n        minHeight: '100vh',\r\n        background:\r\n            'radial-gradient( circle farthest-corner at 10% 20%,  #FCCABD 0%, #4151C9 45.5% )',\r\n        opacity: '1',\r\n    },\r\n});\r\n\r\nconst menuItems = (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route path=\"/about\" component={AboutPage} />\r\n        <Route path=\"/calculator\" component={InheritanceCalculatorPage} />\r\n        <Route path=\"/resources\" component={ResourcesPage} />\r\n    </Switch>\r\n);\r\n\r\nconst App = (): ReactElement => {\r\n    const classes = useStyles();\r\n    const lang = 'nb-NO';\r\n    const langMessages = Norsk;\r\n    // const [lang, setLang] = useState(\"nb-NO\");\r\n    // const [langMessages, setLangMessages] = useState(Norsk);\r\n    // const sendDataToParent = (index) => {\r\n    //   setLang(index.code);\r\n    //   if (index.code === \"nb-NO\") {\r\n    //     setLangMessages(Norsk);\r\n    //   } else {\r\n    //     setLangMessages(English);\r\n    //   }\r\n    // };\r\n\r\n    // const LangValue = {\r\n    //   no: {\r\n    //     code: \"nb-NO\",\r\n    //     name: \"Norsk\",\r\n    //   },\r\n    //   en: {\r\n    //     code: \"en-US\",\r\n    //     name: \"English\",\r\n    //   },\r\n    // };\r\n    return (\r\n        <StyledEngineProvider injectFirst>\r\n            <ThemeProvider theme={theme}>\r\n                <IntlProvider locale={lang} messages={langMessages}>\r\n                    <Paper\r\n                        role=\"img\"\r\n                        // className={classes.root}\r\n                        aria-label=\"Image by Free-Photos from Pixabay\"\r\n                    >\r\n                        <Header />\r\n                        <Provider store={store}>\r\n                            <Paper className={classes.rootPaper}>\r\n                                {menuItems}\r\n                            </Paper>\r\n                        </Provider>\r\n                    </Paper>\r\n                    {/* <Footer langValue={LangValue} sendDataToParent={sendDataToParent} /> */}\r\n                    <Footer description=\"Arvebot\" title=\"Arvebot\" />\r\n\r\n                    {/* Route components are rendered if the path prop matches the current URL */}\r\n                </IntlProvider>\r\n            </ThemeProvider>\r\n        </StyledEngineProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n// react-spring -> animations\r\n// nivo for visualisation\r\n// primary - 003049   , 264653 , 031d44\r\n// secondary - EAE2B7   ,e76f51 , d5896f\r\n","// import { StrictMode } from \"react\";\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport './index.scss';\r\n// import * as Sentry from \"@sentry/react\";\r\n// import { BrowserTracing } from \"@sentry/tracing\";\r\nimport App from './App';\r\nimport { render } from 'react-dom';\r\n\r\n/***\r\n** Uncomment for sentry logging\r\nSentry.init({\r\n  dsn: \"https://4ee9eb855a3d475eba0981e5e96f4090@o1245495.ingest.sentry.io/6402725\",\r\n  integrations: [new BrowserTracing()],\r\n\r\n  tracesSampleRate: 1.0,\r\n});\r\n*/\r\nrender(\r\n    // <StrictMode>\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    // </StrictMode>,\r\n    document.getElementById('app'),\r\n);\r\n"],"sourceRoot":""}